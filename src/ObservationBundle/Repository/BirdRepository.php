<?php

namespace ObservationBundle\Repository;

use Doctrine\ORM\Tools\Pagination\Paginator;
use ObservationBundle\Entity\User;

/**
 * BirdsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class BirdRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Fonction pour paginer la liste d'oiseaux
     */
    public function getPage($page, $numbers, $search = null, $type, $plumage)
    {
        $query = $this->createQueryBuilder('b');
        if ($search !== null) {


//             $query
//                        ->orWhere('b.lbNom LIKE :regex')
//                        ->setParameter('regex', "%$search%");
//            }
//
//            if ($plumage !== null)
//            {
//                $query
//                        ->andWhere("b.plumage LIKE :regex4")
//                        ->setParameter('regex4', $plumage);
//            }
//            var_dump($plumage);
//

            switch ($type) {
                case 'lbNom':
                    $query
                        ->orWhere('b.lbNom LIKE :regex')
                        ->setParameter('regex', "%$search%");
                    break;
                case 'nomVern':
                    $query
                        ->orWhere("b.nomVern LIKE :regex2")
                        ->setParameter('regex2', "%$search%");
                    break;
                case 'bec':
                    $query
                        ->orWhere("b.bec LIKE :regex3")
                        ->setParameter('regex3', "%$search%");
                    break;
                case 'plumage':
                    $query
                        ->orWhere("b.plumage LIKE :regex4")
                        ->setParameter('regex4', "%$search%");
                    break;
                default:
                    $query
                        ->orWhere("b.couleur LIKE :regex5")
                        ->setParameter('regex5', "%$search%");
                    break;
            }
        }
        $query->orderBy('b.nomVern', 'ASC')
            ->addOrderBy('b.lbNom', 'ASC')->getQuery();

        $query->setFirstResult(($page - 1) * $numbers)->setMaxResults($numbers);

        return new Paginator($query, true);
    }

    public function findForValidate(User $user)
    {
        $query = $this->createQueryBuilder('b')
            ->innerJoin('b.observations', 'o')
            ->where('o.user = :user')
            ->setParameter('user', $user)
            ->andWhere('o.validated = true');

        return $query->getQuery()->getResult();
    }
}
