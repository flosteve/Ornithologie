"use strict";

var Kore;!function (a) {
  function b(c, d, e, g, h, i, j) {
    void 0 === e && (e = {}), void 0 === j && (j = !1), c = c || "POST";var k = e && Object.keys(e).length ? "POST" == c ? JSON.stringify(e) : e : null;$.ajax(a.API_DOMAIN + d, { data: k, type: c, dataType: "json", contentType: "application/json", success: function success(b, c, d) {
        if (void 0 !== b.redirect) {
          var e = b.redirect + "/" + window.location.hash;return a.onAlert("RÃ©ponse API : redirect vers " + e), window.location.assign(e);
        }if (!0 === j && l(), b.body ? b.body.error : !b.success || b.error) {
          var i = !0;$.isFunction(h) && (i = !1 !== h(b, d)), i && f(b);
        } else $.isFunction(g) && g(b, d);
      }, error: function error(j, k, l) {
        if (console.log("*********** API ERROR ***********"), console.log(j), console.log(k), console.log(l), 401 == j.status) console.log("401 unauthorized, try to relog and retry the request"), a.relog(function () {
          b(c, d, e, g, h, i);
        });else if (j && j.responseJSON) {
          console.log(j.responseJSON);var m = j.responseJSON,
              n = !0;$.isFunction(h) && (n = !1 !== h(m, j)), n && f(m);
        } else $.isFunction(h) && h(null, j), console.log("API ERROR");
      }, complete: function complete(a, b) {
        $.isFunction(i) && i(a, b);
      } });
  }function c(b, c) {
    return "/" == b.charAt(0) && (b = b.substring(1)), (c ? a.OLD_STATIC_DOMAIN : a.STATIC_DOMAIN) + b;
  }function d(b, c) {
    void 0 === c && (c = !1);var d = b;return "/" == b.charAt(0) && (d = b.substring(1)), (c ? a.FILES_DOMAIN : a.WEB_DOMAIN) + d;
  }function e(b) {
    return a.PROTOCOL + "://" + b + "." + a.MAIN_DOMAIN;
  }function f(b) {
    b = b || {};var c = b.error ? b.error : b;void 0 !== c.message && a.onAlert(c.message);
  }function g(a) {
    var b = new XMLHttpRequest();b.open("POST", a, !0);for (var c in _) {
      _.hasOwnProperty(c) && b.setRequestHeader(c, _[c]);
    }return b;
  }function h(a, c, d, e, f) {
    return void 0 === c && (c = {}), F(!0), b("GET", a, c, d, e, f);
  }function i(a, c, d, e, f) {
    return void 0 === c && (c = {}), c.sender = c.sender || {}, c.sender._socket = A(), "ping" != a && F(!0), b("POST", a, c, d, e, f);
  }function j(a, c, d) {
    void 0 === c && (c = {}), void 0 === d && (d = "POST"), b(d, a, c, function (a) {}, function (b, e) {
      "application/force-download" == e.getResponseHeader("Content-Type") && k(a, c, d);
    });
  }function k(b, c, d) {
    void 0 === c && (c = {}), void 0 === d && (d = "POST");var e = "";$.extend(c, { _api_authorization: z(), _api_account: _[a.HEADER_NAME] });for (var f in c) {
      e += '<input type=hidden" name="' + f + '" value="' + c[f] + '">';
    }$("<form>", { id: "frmApiDownload", method: d, html: e, action: a.API_DOMAIN + b }).appendTo(document.body).submit().remove();
  }function l(a) {
    $(".tooltip").remove(), a.empty().off();
  }function m(b, c, d, e) {
    l(e), e.html(b(c)), a.onViewLoaded(e), d && d(e, c);
  }function n() {
    return console.log("redirect home"), q("/");
  }function o() {
    console.log("************ reload"), Path.routes.current = null, Path.dispatch(location.hash);
  }function p(a, b) {
    void 0 === b && (b = !1), a = (a && "/" == a.charAt(0) ? "" : "/") + a, Path.routes.current = "#" + a, q(a, !1, b);
  }function q(a, b, c) {
    return void 0 === b && (b = !1), void 0 === c && (c = !1), a = (a && "/" == a.charAt(0) ? "" : "/") + a, b ? window.location.replace(a) : window.location.assign((c ? window.location.pathname : "/") + "#" + a), !1;
  }function r(a) {
    $('.deep-link[data-deep-link="' + a + '"').click();
  }function s(a, b) {
    W[a] = b;
  }function t(a) {
    return W[a];
  }function u(a, b, c) {
    var d = window.confirm("FIXME MODAL !\n" + a);d && $.isFunction(b) ? b() : !d && $.isFunction(c) && c();
  }function v() {
    var b = $.cookie(a.COOKIE_NAME),
        c = w();_ = { Authorization: b, "X-Requested-With": "XMLHttpRequest" }, _[a.HEADER_NAME] = c, X = b, $.ajaxSetup({ dataType: "json", error: N, headers: _, statusCode: { 400: H, 403: I, 404: J, 405: K, 500: L, 503: M } }), a.onAppLoaded();
  }function w() {
    var b = "",
        c = window.location.host;return c = c.replace(a.MAIN_DOMAIN, ""), "" !== c && (b = c.substr(0, c.length - 1)), b;
  }function x(b) {
    if (void 0 === b && (b = !1), !X && (X = $.cookie(a.COOKIE_NAME), b && !X)) throw new Error("Could not retrieve authtoken from cookie");
  }function y(a) {
    X = a;
  }function z() {
    return X;
  }function A() {
    return Y ? Y.io.engine.id : null;
  }function B() {
    return console.log("**************** getSocket"), console.log(Y), Y;
  }function C(a) {
    console.log("************* setSocket"), console.log(a), Y = a;
  }function D(a, b) {
    void 0 === b && (b = {}), i(a, b, E);
  }function E() {
    console.log("LOGOUT!!"), window.location.assign("/servlet/logout.php");
  }function F(b) {
    if (void 0 === b && (b = !1), !X) return console.log("==> Token not found"), Z = null;var c = Math.floor(Date.now() / 1e3);Z && c < Z + 600 || (console.log("//////////////////// set cookie 2 : " + a.COOKIE_DOMAIN), Z = c, $.cookie(a.COOKIE_NAME, X, { expires: 7, domain: a.COOKIE_DOMAIN, path: "/" }));
  }function G() {
    var b = {};for (var c in a.Routes) {
      $.extend(b, a.Routes[c]);
    }for (var d in b) {
      Path.map("#/" + d).to(b[d]).enter(a.onRouteEnter);
    }Path.root("#/"), Path.rescue(a.onNotFound), Path.listen();
  }function H() {
    console.log("ERREUR 400");
  }function I() {
    console.log("ERREUR 403");
  }function J() {
    console.log("ERREUR 404");
  }function K() {
    console.log("ERREUR 405");
  }function L() {
    console.log("ERREUR 500");
  }function M() {
    console.log("ERREUR 503");
  }function N(b, c, d) {
    switch (console.log("ERREUR AJAX : " + c), console.log(d), c) {case "timeout":
        break;case "error":
        if ("Unauthorized" == d) return;}a.onAlert("FIXME message : erreur ajax, cf console"), console.log(b), console.log(c), console.log(d);
  }function O(a) {
    a && (a.preventDefault(), a.stopPropagation());
  }function P(a, b) {
    alert(a);
  }function Q(a, b) {
    return a;
  }function R(a) {}function S() {}function T() {}function U(a) {}function V() {}a.HEADER_NAME = null, a.MAIN_DOMAIN = null, a.ACCOUNT_ID = null, a.FILES_DOMAIN = null, a.WEB_DOMAIN = null, a.SUBDOMAIN = null, a.API_DOMAIN = null, a.API_FILES_DOMAIN = null, a.STATIC_DOMAIN = null, a.OLD_STATIC_DOMAIN = null, a.ZIPPER_DOMAIN = null, a.COOKIE_NAME = null, a.COOKIE_DOMAIN = null, a.NODEJS_SERVER = null, a.PROTOCOL = null, a.APP_TOKEN = null;var W = {},
      X = null,
      Y = null,
      Z = 0,
      _ = {};a.Routes = {}, a.urlStatic = c, a.url = d, a.accountURL = e, a.handleResponseError = f, a.createApiXhr = g, a.apiGet = h, a.apiPost = i, a.apiDownload = j, a.clearView = l, a.view = m, a.redirectHome = n, a.reload = o, a.modifyRoute = p, a.navigate = q, a.deepLink = r, a.setConfig = s, a.getConfig = t, a.confirm = u, a.getAccountName = w, a.retrieveAuthToken = x, a.setAuthToken = y, a.getAuthToken = z, a.getSocketId = A, a.getSocket = B, a.setSocket = C, a.ajaxLogout = D, a.logout = E, a.updateCookie = F, a.routing = G, a.stopEvent = O, a.onAlert = P, a.trans = Q, a.relog = R, a.onNotFound = S, a.onRouteEnter = T, a.onViewLoaded = U, a.onAppLoaded = V, $(document).ready(v);
}(Kore || (Kore = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AAccountBase = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.getCompanyName = function () {
      return this.company_name || this.account_name;
    }, b.prototype.getLogoUrl = function (a) {
      return void 0 === a && (a = "logo_128px.png"), this.custom_image_id ? Kore.WEB_DOMAIN + "ui/custom-image.php?id=" + this.custom_image_id : App.Global.urlStaticImageCustom(a);
    }, b.prototype.getURL = function () {
      return Kore.accountURL(this.account_name);
    }, b;
  }(a.Base.AAccountBase);a.AccountBase = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AAuth = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.getModulesAuth = function () {
      var a = {};return a[App.Global.MODULES.AGENDA] = this.calendar, a[App.Global.MODULES.CHANNEL] = this.channel, a[App.Global.MODULES.DOCUMENTS] = this.documents, a[App.Global.MODULES.MEETINGS] = this.meetings, a[App.Global.MODULES.REPORTING] = this.reporting, a[App.Global.MODULES.TASKS] = this.tasks, a;
    }, b.prototype.isEqual = function (a) {
      for (var b in this) {
        if (this.hasOwnProperty(b) && a[b] !== this[b]) return !1;
      }return !0;
    }, b;
  }(a.Base.AAuth);a.Auth = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.auth && (b.auth = new a.Auth(b.auth)), $.extend(this, b);
      }return b;
    }();b.AUserAuth = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AUserAuth);a.UserAuth = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AAccountModules = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AAccountModules);a.AccountModules = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (b) {
      function c(c) {
        c.modules && (c.modules = new a.AccountModules(c.modules)), b.call(this, c);
      }return __extends(c, b), c;
    }(a.AccountBase);b.AAccount = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AAccount);a.Account = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.account && (b.account = new a.AccountBase(b.account)), $.extend(this, b);
      }return b;
    }();b.AAccountOther = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AAccountOther);a.AccountOther = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.end_date && (b.end_date = moment.utc(b.end_date, App.Util.UTCFormat).setUserTimezone()), b.occurrences && (b.occurrences = b.occurrences.map(function (b) {
          return new a.CalendarEvent(b);
        })), b.recurrence_id && (b.recurrence_id = moment.utc(b.recurrence_id, App.Util.UTCFormat).setUserTimezone()), b.start_date && (b.start_date = moment.utc(b.start_date, App.Util.UTCFormat).setUserTimezone()), b.until && (b.until = moment.utc(b.until, App.Util.UTCFormat).setUserTimezone()), $.extend(this, b);
      }return b;
    }();b.ACalendarEvent = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b(b) {
      a.call(this, b);
    }return __extends(b, a), b.prototype.getId = function () {
      return this.isEvent ? this.calendar_event_id + (this.recurrence_id ? "-" + this.recurrence_id.format("X") : "") : this.isTask ? "task-" + this.taskId : this.isMeeting ? "meeting-" + this.meetingId : void 0;
    }, b.prototype.getColor = function () {
      return this.isEvent ? this.viewable ? App.Colors.getColorForId(parseInt(this.color_id.toString())).toString() : App.Colors.getColorForId(App.Colors.IColorsEnum.GREY).setAlpha(.5).toString() : this.isTask ? "rgba(255, 203, 0, 0.15)" : this.isMeeting ? "rgba(115, 204, 70, 0.2)" : void 0;
    }, b.prototype.getTextColor = function () {
      return this.isEvent ? "#ffffff" : this.isTask ? "rgba(165, 106, 0, 1)" : this.isMeeting ? "rgba(43, 118, 0, 1)" : void 0;
    }, b.prototype.getBorderColor = function () {
      return this.isEvent ? null : this.isTask ? "rgba(255, 203, 0, 1)" : this.isMeeting ? "rgba(115, 204, 70, 1)" : void 0;
    }, b.prototype.getFullCalendarEvent = function () {
      var a = { id: this.getId(), title: this.title, start: this.all_day ? this.start_date.clone().utc() : this.start_date, end: this.all_day ? this.end_date.clone().utc() : this.end_date, allDay: this.all_day, project_id: this.project_id, editable: this.editable, color: this.getColor(), textColor: this.getTextColor(), borderColor: this.getBorderColor(), users: this.users, user_id: this.user_id };return this.isEvent ? (a.eventId = this.calendar_event_id, a.isEvent = !0, a.reminders = this.reminders, a.recurrent = this.isRecurrent(), a.specifiedRecurrence = this.isSpecifiedOccurrence(), a.start = this.all_day ? this.start_date.clone().utc().hours(12) : this.start_date, a.end = this.all_day ? this.end_date.clone().utc().hours(13).add(1, "day") : this.end_date, a.viewable = this.viewable, a.nb_attachments = this.nb_attachments, a.nb_comments = this.nb_comments) : this.isTask ? (a.isTask = !0, a.complete = this.complete, a.url = this.url, a.taskId = this.taskId) : this.isMeeting && (a.isMeeting = !0, a.meetingId = this.meetingId, a.url = this.url), a.end.diff(a.start, "minutes") < b.MIN_SLOT_HEIGHT_IN_MINUTES && (a.end = a.start.clone().add(b.MIN_SLOT_HEIGHT_IN_MINUTES, "minutes")), a;
    }, b.prototype.isRecurrent = function () {
      return !!this.freq;
    }, b.prototype.isSpecifiedOccurrence = function () {
      return !!this.modified_occurrence;
    }, b.prototype.getURL = function (a) {
      if (!this.isEvent) return null;var c = App.Global.projects(!0)[this.project_id];return c ? b.getURLForEventId(this.calendar_event_id, c, a) : null;
    }, b.getURLForEventId = function (a, b, c) {
      return b ? App.Global.url([b.slug, App.Global.MODULES.AGENDA, "?event=" + a].join("/"), !0, c) : null;
    }, b.MIN_SLOT_HEIGHT_IN_MINUTES = 30, b;
  }(a.Base.ACalendarEvent);a.CalendarEvent = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ACategory = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ACategory);a.Category = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.users && (b.users = b.users.map(function (b) {
          return new a.ChatUser(b);
        })), b.last_message_date && (b.last_message_date = moment.utc(b.last_message_date, App.Util.UTCFormat).setUserTimezone()), b.date && (b.date = moment.utc(b.date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, b);
      }return b;
    }();b.AChat = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getTitle = function () {
      if (this.isChannel()) return this.getProject().name;if (this.name) return this.name;var b = this.getOtherUsersId();if (b.length) {
        var c = [];for (var d in b) {
          if (b.hasOwnProperty(d)) {
            var e = b[d],
                f = a.User.getUserName(e);c.push(f);
          }
        }return c.join(", ");
      }return App.Global.user().display_name;
    }, c.prototype.hasUnseenMessages = function () {
      return !!this.new_count;
    }, c.prototype.isGroupChat = function () {
      return this.getOtherUsersId().length > 1 || this.isChannel();
    }, c.prototype.isChannel = function () {
      return !!this.project_id;
    }, c.prototype.getProject = function () {
      return App.Global.projects(!0, !0)[this.project_id] || null;
    }, c.prototype.getUsers = function () {
      return this.getUsersId().map(function (b) {
        return a.User.getUser(b);
      });
    }, c.prototype.getOtherUsers = function () {
      return this.getOtherUsersId().map(function (b) {
        return a.User.getUser(b);
      });
    }, c.prototype.getUsersId = function () {
      return this.users.map(function (a) {
        return a.user_id;
      });
    }, c.prototype.getOtherUsersId = function () {
      var a = App.Global.user().user_id;return this.getUsersId().filter(function (b) {
        return b != a;
      });
    }, c.prototype.isOlderThan = function (a) {
      return !!this.last_message_date && moment().diff(this.last_message_date, "days") > a;
    }, c;
  }(a.Base.AChat);a.Chat = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (b) {
      function c(c) {
        c.messages && (c.messages = c.messages.map(function (b) {
          return new a.ChatMessage(b);
        })), b.call(this, c);
      }return __extends(c, b), c;
    }(a.Chat);b.AChatFull = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.loadMore = function (b, c) {
      var d = this;App.API.Chat.loadMessages(this.chat_id, b, { onSuccess: function onSuccess(b) {
          if (b && b.messages) {
            var e = b.messages.map(function (b) {
              return new a.ChatMessage(b);
            });c(e), d.messages = e.concat(d.messages);
          }
        } });
    }, c.prototype.getLastMessage = function () {
      return this.getMessages().length ? this.getMessages().slice(-1).pop() : null;
    }, c.prototype.getLastMessageFromMe = function () {
      var a = this.getMessages().slice().reverse();for (var b in a) {
        if (a.hasOwnProperty(b) && a[b].isMine()) return a[b];
      }return null;
    }, c.prototype.getMessages = function () {
      return this.messages;
    }, c.prototype.getMessage = function (a) {
      for (var b in this.messages) {
        if (this.messages.hasOwnProperty(b) && this.messages[b].index == a) return this.messages[b];
      }return null;
    }, c.prototype.getMessagesSorted = function () {
      var a = {};for (var b in this.messages) {
        if (this.messages.hasOwnProperty(b)) {
          var c = this.messages[b];a[c.index] = c;
        }
      }return a;
    }, c.prototype.getPreviousMessage = function (a) {
      var b = this.getMessagesSorted(),
          c = null;for (var d in b) {
        if (b.hasOwnProperty(d)) {
          var e = b[d];if (e.deletion_date) continue;if (a == parseInt(d)) return c;c = e;
        }
      }return null;
    }, c.prototype.addMessage = function (a) {
      this.messages.push(a), this.messages_count++;
    }, c.prototype.editMessage = function (a) {
      for (var b in this.messages) {
        if (this.messages.hasOwnProperty(b) && this.messages[b].index == a.index) return this.messages[b] = a, !0;
      }return !1;
    }, c.prototype.addFavorite = function (a) {
      -1 === $.inArray(a, this.favorites) && this.favorites.push(a);
    }, c.prototype.removeFavorite = function (a) {
      var b = $.inArray(a, this.favorites);b >= 0 && this.favorites.splice(b, 1);
    }, c.prototype.userUpdateReadCount = function (a, b) {
      for (var c in this.users) {
        if (this.users.hasOwnProperty(c)) {
          var d = this.users[c];if (d.user_id == a) {
            this.users[c].last_seen_count = b;break;
          }
        }
      }
    }, c;
  }(a.Base.AChatFull);a.ChatFull = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AChatUser = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AChatUser);a.ChatUser = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.date && (b.date = moment.utc(b.date, App.Util.UTCFormat).setUserTimezone()), b.deletion_date && (b.deletion_date = moment.utc(b.deletion_date, App.Util.UTCFormat).setUserTimezone()), b.attachment && (b.attachment = new a.ExternalAttachment(b.attachment)), $.extend(this, b);
      }return b;
    }();b.AChatMessage = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getNaturalDate = function () {
      return App.Util.naturalDate(this.date);
    }, c.prototype.getFullDate = function () {
      return this.date.format("LL LTS");
    }, c.prototype.getText = function () {
      return this.links && this.links.length ? this.links.map(function (a) {
        return $("<div></div>").text(a).html();
      }).join("<br>") : this.content;
    }, c.prototype.getUser = function () {
      return a.User.getUser(this.user_id);
    }, c.prototype.isMine = function () {
      return this.user_id == App.Global.user().user_id;
    }, c;
  }(a.Base.AChatMessage);a.ChatMessage = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.date && (a.date = moment.utc(a.date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.AComment = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.getNaturalDate = function () {
      return App.Util.naturalDate(this.date);
    }, b.prototype.getText = function () {
      return this.text;
    }, b.prototype.isMine = function () {
      return this.user_id == App.Global.user().user_id;
    }, b;
  }(a.Base.AComment);a.Comment = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.date && (b.date = moment.utc(b.date, App.Util.UTCFormat).setUserTimezone()), b.properties && (b.properties = new a.Property(b.properties)), $.extend(this, b);
      }return b;
    }();b.ADirectory = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (a) {
    a[a.PUBLIC = 0] = "PUBLIC", a[a.RESTRICTED = 1] = "RESTRICTED", a[a.ACL = 2] = "ACL";
  }(a.DirectoryAuth || (a.DirectoryAuth = {}));var b = (a.DirectoryAuth, function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.dateFormat = function (a) {
      return void 0 === a && (a = App.Global.getLangOptions().datetimeFormat), moment(this.date).format(a);
    }, b.prototype.getSharingURL = function () {
      return this.sharing_code ? App.Global.url("shared/#/folder/" + this.sharing_code) : null;
    }, b.prototype.getPath = function (a) {
      var b = this.path_names.slice(0);return a && App.Global.project() && b.unshift(App.Global.project().name), b.join("/") + "/";
    }, b.prototype.getProject = function () {
      if (!this.project_id) return console.warn("cant get project, no project_id"), null;var a = App.Global.projects(!0)[this.project_id];return a || (console.warn("project not found: " + this.project_id), null);
    }, b.prototype.getURL = function (a) {
      var c = this.getProject();return c ? b.getURLForDirectoryId(this.dir_id, c, a) : null;
    }, b.prototype.getProperty = function (a) {
      return this.properties[a] ? this.properties[a].value : null;
    }, b.getURLForDirectoryId = function (a, b, c) {
      return b ? App.Global.url([b.slug, App.Global.MODULES.DOCUMENTS, "?directory=" + a].join("/"), !0, c) : null;
    }, b;
  }(a.Base.ADirectory));a.Directory = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.date && (a.date = moment.utc(a.date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.AFileBase = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getSize = function () {
      return App.Util.naturalSize(this.size);
    }, c.prototype.getUser = function () {
      var b = this.user_id;return a.User.getUser(b);
    }, c.prototype.dateFormat = function (a) {
      return void 0 === a && (a = App.Global.getLangOptions().datetimeFormat), this.date.format(a);
    }, c.prototype.getIcon = function () {
      return a.File.iconForExtension(this.getIconExtension());
    }, c.prototype.isExtensionValidForOnDemandPreview = function () {
      return -1 !== $.inArray(this.extension.toLowerCase(), App.Preview.getAvailableExtensionsForOnDemandPreview());
    }, c.prototype.isExtensionValidForAutomaticPreview = function () {
      return -1 !== $.inArray(this.extension.toLowerCase(), App.Preview.getAvailableExtensionsForAutomaticPreview());
    }, c.prototype.isExtensionValidForPreview = function () {
      return -1 !== $.inArray(this.extension.toLowerCase(), App.Preview.getAvailableExtensionsForPreview());
    }, c.prototype.getIconExtension = function () {
      return this.extension.toLowerCase();
    }, c.prototype.previewMode = function () {
      return this.isExtensionValidForAutomaticPreview() ? App.PreviewMode.AUTOMATIC : App.PreviewMode.UNAVAILABLE;
    }, c.prototype.previewable_getName = function () {
      return this.name;
    }, c.prototype.previewable_getExtension = function () {
      return this.getIconExtension();
    }, c.prototype.previewable_getId = function () {
      return null;
    }, c.prototype.previewable_getDocType = function () {
      return null;
    }, c.prototype.previewable_previewMode = function () {
      return null;
    }, c.prototype.previewable_canPreview = function () {
      return null;
    }, c.prototype.previewable_isAutomaticPreviewMode = function () {
      return null;
    }, c.prototype.previewable_getPreviewStatus = function () {
      return null;
    }, c.prototype.previewable_setPreviewStatus = function (a) {
      return null;
    }, c.prototype.previewable_getProjectId = function () {
      return null;
    }, c.prototype.previewable_isExternal = function () {
      return !1;
    }, c.iconForExtension = function (a) {
      var b = App.Global.iconForExtension(a),
          c = "&nbsp;";return "default" === b && (c = a.substring(0, 3)), '<span class="file-icon ' + b + '">' + c + "</span>";
    }, c;
  }(a.Base.AFileBase);a.FileBase = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (b) {
      function c(c) {
        c.trash_date && (c.trash_date = moment.utc(c.trash_date, App.Util.UTCFormat).setUserTimezone()), c.lock && c.lock.lock_date && (c.lock.lock_date = moment.utc(c.lock.lock_date, App.Util.UTCFormat).setUserTimezone()), c.tags && (c.tags = c.tags.map(function (b) {
          return new a.Tag(b);
        })), c.properties && (c.properties = new a.Property(c.properties)), c.doc_validation_request && (c.doc_validation_request = new a.DocValidationRequest(c.doc_validation_request)), b.call(this, c);
      }return __extends(c, b), c;
    }(a.FileBase);b.AFile = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getURL = function (b) {
      var d = a.Project.getProject(this.project_id);return d ? c.getURLForFileId(this.file_master_id, !0, d, b) : null;
    }, c.prototype.getProject = function () {
      if (!this.project_id) return console.warn("Cannot get project, no project_id"), null;var a = App.Global.projects(!0, !0)[this.project_id];return a || (console.warn("Project not found: " + this.project_id), null);
    }, c.prototype.getIconExtension = function () {
      return this.getExtension(!0);
    }, c.prototype.getExtension = function (a) {
      if (a) {
        if ("googledrive" == this.cloud_service) return "google";if ("evernote" == this.cloud_service) return "evernote";
      }return this.extension.toLowerCase();
    }, c.prototype.getSharingURL = function () {
      return this.sharing && this.sharing.sharing_code ? App.Global.url("download.php?code=" + this.sharing.sharing_code) : null;
    }, c.prototype.getSharingCode = function () {
      return this.sharing && this.sharing.sharing_code ? this.sharing.sharing_code : null;
    }, c.prototype.getLockUserId = function () {
      return this.lock && this.lock.lock_user_id ? this.lock.lock_user_id : null;
    }, c.prototype.getPath = function (a) {
      var b = this.path_names.slice(0);return a && App.Global.project() && b.unshift(App.Global.project().name), b.join("/") + "/";
    }, c.prototype.getCloudURL = function () {
      if (!this.cloud_service) return null;switch (this.cloud_service) {case "googledrive":
          return this.gdocs;default:
          return this.cloud_service_data.url;}
    }, c.prototype.previewMode = function () {
      return this.isExtensionValidForAutomaticPreview() ? App.PreviewMode.AUTOMATIC : this.isExtensionValidForOnDemandPreview() && App.Preview.isOnDemandActive() && this.preview_status != App.PreviewStatus.CALC_ISSUES ? App.PreviewMode.ON_DEMAND : App.PreviewMode.UNAVAILABLE;
    }, c.prototype.trashDateFormat = function (a) {
      return void 0 === a && (a = App.Global.getLangOptions().datetimeFormat), this.trash_date.format(a);
    }, c.prototype.getTrashUser = function () {
      var b = this.trash_user_id;return a.User.getUser(b);
    }, c.prototype.addTag = function (a) {
      this.hasTag(a.label) || this.tags.push(a);
    }, c.prototype.hasTag = function (a) {
      for (var b in this.tags) {
        if (this.tags.hasOwnProperty(b)) {
          var c = this.tags[b];if (c.label == a) return !0;
        }
      }return !1;
    }, c.prototype.getTags = function () {
      return this.tags.filter(function (a) {
        return App.Global.tagExists(a.tag_id);
      }).sort(function (a, b) {
        return a.label.toLowerCase() < b.label.toLowerCase() ? -1 : a.label.toLowerCase() > b.label.toLowerCase() ? 1 : 0;
      });
    }, c.prototype.previewable_getId = function () {
      return this.file_id;
    }, c.prototype.previewable_getDocType = function () {
      return "file";
    }, c.prototype.previewable_previewMode = function () {
      return this.previewMode();
    }, c.prototype.previewable_canPreview = function () {
      return this.previewMode() !== App.PreviewMode.UNAVAILABLE;
    }, c.prototype.previewable_isAutomaticPreviewMode = function () {
      return this.previewMode() == App.PreviewMode.AUTOMATIC;
    }, c.prototype.previewable_getPreviewStatus = function () {
      return this.preview_status;
    }, c.prototype.previewable_setPreviewStatus = function (a) {
      this.preview_status = a;
    }, c.prototype.previewable_getProjectId = function () {
      return this.project_id;
    }, c.getEventNameForType = function (a) {
      var b = ["add", "delete", "update", null, "restore", "download", null, null, null, "validation_request_created", "validation_response_added", "validation_request_removed", "validation_response_removed", "validation_request_updated", "validation_response_updated", "validation_request_date_updated"],
          c = b[a - 1];return c || (console.warn("file event not found: ", a), null);
    }, c.getURLForFileId = function (a, b, c, d, e) {
      return c ? App.Global.url([c.slug, App.Global.MODULES.DOCUMENTS, "?" + (b ? "file_master" : "file") + "=" + a + (e ? "&tab=" + e : "")].join("/"), !0, d) : null;
    }, c;
  }(a.Base.AFile);a.File = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.date && (a.date = moment.utc(a.date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.validation_expiry_date && (a.event_data.validation_expiry_date = moment.utc(a.event_data.validation_expiry_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.AFileEvent = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getUser = function () {
      var b = this.user_id;return a.User.getUser(b);
    }, c;
  }(a.Base.AFileEvent);a.FileEvent = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.FileBase);b.ADocumentAttachment = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.previewMode = function () {
      return this.isExtensionValidForAutomaticPreview() ? App.PreviewMode.AUTOMATIC : this.isExtensionValidForOnDemandPreview() && App.Preview.isOnDemandActive() && this.preview_status != App.PreviewStatus.CALC_ISSUES ? App.PreviewMode.ON_DEMAND : App.PreviewMode.UNAVAILABLE;
    }, b.prototype.previewable_getId = function () {
      return this.doc_id;
    }, b.prototype.previewable_getDocType = function () {
      return this.doc_type;
    }, b.prototype.previewable_previewMode = function () {
      return this.previewMode();
    }, b.prototype.previewable_canPreview = function () {
      return this.previewMode() !== App.PreviewMode.UNAVAILABLE;
    }, b.prototype.previewable_isAutomaticPreviewMode = function () {
      return this.previewMode() == App.PreviewMode.AUTOMATIC;
    }, b.prototype.previewable_getPreviewStatus = function () {
      return this.preview_status;
    }, b.prototype.previewable_setPreviewStatus = function (a) {
      this.preview_status = a;
    }, b.prototype.previewable_getProjectId = function () {
      return this.project_id;
    }, b;
  }(a.Base.ADocumentAttachment);a.DocumentAttachment = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AError = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AError);a.Error = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        b.file_timestamp && (b.file_timestamp = moment.utc(b.file_timestamp, App.Util.UTCFormat).setUserTimezone()), a.call(this, b);
      }return __extends(b, a), b;
    }(a.FileBase);b.AExternalAttachment = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.previewMode = function () {
      return this.isExtensionValidForAutomaticPreview() ? App.PreviewMode.AUTOMATIC : App.PreviewMode.UNAVAILABLE;
    }, b.prototype.previewable_getId = function () {
      return this.attachment_id;
    }, b.prototype.previewable_getDocType = function () {
      return "document";
    }, b.prototype.previewable_previewMode = function () {
      return this.previewMode();
    }, b.prototype.previewable_canPreview = function () {
      return this.previewMode() !== App.PreviewMode.UNAVAILABLE;
    }, b.prototype.previewable_isAutomaticPreviewMode = function () {
      return this.previewMode() == App.PreviewMode.AUTOMATIC;
    }, b.prototype.previewable_getPreviewStatus = function () {
      return App.PreviewStatus.DONE;
    }, b.prototype.previewable_setPreviewStatus = function (a) {}, b.prototype.previewable_getProjectId = function () {
      return null;
    }, b.prototype.previewable_isExternal = function () {
      return !0;
    }, b;
  }(a.Base.AExternalAttachment);a.ExternalAttachment = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.creation_date && (a.creation_date = moment.utc(a.creation_date, App.Util.UTCFormat).setUserTimezone()), a.update_date && (a.update_date = moment.utc(a.update_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.AFilter = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AFilter);a.Filter = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.auth && (b.auth = new a.Auth(b.auth)), $.extend(this, b);
      }return b;
    }();b.AProjectAuth = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AProjectAuth);a.ProjectAuth = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.stats && (b.stats = new a.ProjectStats(b.stats)), b.auth && (b.auth = new a.Auth(b.auth)), b.tags && (b.tags = b.tags.map(function (b) {
          return new a.Tag(b);
        })), b.creation_date && (b.creation_date = moment.utc(b.creation_date, App.Util.UTCFormatDate)), $.extend(this, b);
      }return b;
    }();b.AProject = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.hasUser = function (a) {
      return -1 !== $.inArray(a, this.user_id_list);
    }, c.prototype.getUsersAuth = function (a, b, c) {
      var d = this;this.auth_list ? a(this.auth_list) : (this.auth_list = [], App.API.Main.getProjectUsersAuth(this.project_id, { onSuccess: function onSuccess(b) {
          var c = new App.API.Main.Project.GetUsersAuthResponse(b);d.auth_list = c.auth_list, a(d.auth_list);
        }, onError: function onError(a, b) {
          return d.auth_list = null, !c || c();
        }, button: b }));
    }, c.prototype.getUserList = function (b) {
      var c = this.user_id_list.map(function (b) {
        return a.User.getUser(b);
      });return c = c.filter(function (a) {
        return !!a && !(!b && a.isSelf());
      });
    }, c.prototype.getUserAuth = function (a) {
      if (!this.auth_list) return null;for (var b in this.auth_list) {
        if (this.auth_list.hasOwnProperty(b)) {
          var c = this.auth_list[b];if (c.user_id == a) return c.auth;
        }
      }return null;
    }, c.prototype.isCurrent = function () {
      var a = App.Global.project();return a && a.project_id === this.project_id;
    }, c.prototype.getImageURL = function () {
      return this.custom_image_id ? App.Global.url("ui/custom-image.php?id=" + this.custom_image_id) : App.Global.urlStaticImageCustom("project-folder-default.png");
    }, c.prototype.getURL = function (a) {
      if (!a) {
        var b = this.getAuthorizedModules();if (!b.length) return App.Global.url(App.Global.MODULES.DASHBOARD, !0);a = b[0].id;
      }return App.Global.url(this.slug + "/" + a, !0);
    }, c.prototype.getAuthorizedModules = function () {
      var a = [],
          b = App.Global.modulesToDisplay(!1);for (var c in b) {
        if (b.hasOwnProperty(c)) {
          var d = b[c];if (!this.hasModuleEnabled(d.id)) continue;var e = d.id,
              f = this.auth[e] || 0,
              g = App.Rights.authCodeForModule(f, e);g > App.Rights.AuthType.DENIED && a.push(d);
        }
      }return a;
    }, c.prototype.hasModuleEnabled = function (a) {
      return !!this.modules[a];
    }, c.prototype.getModulesForEdition = function () {
      var a = [],
          b = App.Global.modulesToDisplay(!0);for (var c in b) {
        if (b.hasOwnProperty(c)) {
          var d = b[c];this.hasModuleEnabled(d.id) && a.push(d);
        }
      }return a;
    }, c.prototype.getSize = function (a) {
      if (void 0 !== this.documents_size) return a(this.documents_size);var b = this;App.API.Main.getProject(this.project_id, !1, !0, !1, { onSuccess: function onSuccess(c) {
          var d = new App.API.Main.Account.GetProjectResponse(c);b.documents_size = d.project.documents_size, a(b.documents_size);
        } });
    }, c.prototype.getLateTasksPercentage = function () {
      return this.stats ? this.stats.todo_late / (this.stats.todo_count + this.stats.todo_late) * 100 : 0;
    }, c.prototype.canUserEdit = function (b) {
      var c = a.User.getUser(b);return !!c && (!!c.hasRole(App.Roles.ROLES.GENERAL_ADMIN) || !(!c.hasRole(App.Roles.ROLES.ADMIN) || this.owner_user_id != c.user_id));
    }, c.prototype.addTag = function (a) {
      this.hasTag(a.label) || this.tags.push(a);
    }, c.prototype.hasTag = function (a) {
      for (var b in this.tags) {
        if (this.tags.hasOwnProperty(b)) {
          var c = this.tags[b];if (c.label == a) return !0;
        }
      }return !1;
    }, c.prototype.getTags = function () {
      return this.tags.filter(function (a) {
        return App.Global.tagExists(a.tag_id);
      }).sort(function (a, b) {
        return a.label.toLowerCase() < b.label.toLowerCase() ? -1 : a.label.toLowerCase() > b.label.toLowerCase() ? 1 : 0;
      });
    }, c.getProject = function (a) {
      var b = App.Global.projects(!0, !0, !0)[a];return b || null;
    }, c.getProjectBySlug = function (a) {
      var b = App.Global.projects(!1, !0, !0);for (var c in b) {
        if (b.hasOwnProperty(c) && b[c].slug === a) return b[c];
      }return console.warn("Project not found for slug: " + a), null;
    }, c.getProjectName = function (a, b) {
      var c = this.getProject(a);return c ? c.name : b || App.Global.trans("unknown_project");
    }, c;
  }(a.Base.AProject);a.Project = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AProjectStats = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AProjectStats);a.ProjectStats = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.date_start && (a.date_start = moment.utc(a.date_start, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ASharing = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ASharing);a.Sharing = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.completion_date && (a.completion_date = moment.utc(a.completion_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ASubtask = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ASubtask);a.Subtask = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ATag = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.entry_getId = function () {
      return this.tag_id;
    }, b;
  }(a.Base.ATag);a.Tag = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.creation_date && (a.creation_date = moment.utc(a.creation_date, App.Util.UTCFormat).setUserTimezone()), a.begin_date && (a.begin_date = moment.utc(a.begin_date, App.Util.UTCFormatDate)), a.due_date && (a.due_date = moment.utc(a.due_date, App.Util.UTCFormatDate)), a.start_date && (a.start_date = moment.utc(a.start_date, App.Util.UTCFormat).setUserTimezone()), a.completion_date && (a.completion_date = moment.utc(a.completion_date, App.Util.UTCFormat).setUserTimezone()), a.accepted_date && (a.accepted_date = moment.utc(a.accepted_date, App.Util.UTCFormat).setUserTimezone()), a.update_date && (a.update_date = moment.utc(a.update_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ATask = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.getURLForTaskId = function (a, b, c) {
      if (b) return App.Global.url([b.slug, App.Global.MODULES.TASKS, "detail", a].join("/"), !0, c);
    }, b;
  }(a.Base.ATask);a.Task = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.begin_date && (a.begin_date = moment.utc(a.begin_date, App.Util.UTCFormat).setUserTimezone()), a.due_date && (a.due_date = moment.utc(a.due_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ATaskEdition = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATaskEdition);a.TaskEdition = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.event_data && a.event_data.completion_date && (a.event_data.completion_date = moment.utc(a.event_data.completion_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.accepted_date && (a.event_data.accepted_date = moment.utc(a.event_data.accepted_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.start_date && (a.event_data.start_date = moment.utc(a.event_data.start_date, App.Util.UTCFormatDate)), a.event_data && a.event_data.fields && a.event_data.fields.start_date && (a.event_data.fields.start_date = moment.utc(a.event_data.fields.start_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.fields && a.event_data.fields.completion_date && (a.event_data.fields.completion_date = moment.utc(a.event_data.fields.completion_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.fields && a.event_data.fields.accepted_date && (a.event_data.fields.accepted_date = moment.utc(a.event_data.fields.accepted_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.due_date && (a.event_data.due_date = moment.utc(a.event_data.due_date, App.Util.UTCFormat).setUserTimezone()), a.event_data && a.event_data.begin_date && (a.event_data.begin_date = moment.utc(a.event_data.begin_date, App.Util.UTCFormat).setUserTimezone()), a.event_date && (a.event_date = moment.utc(a.event_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ATaskHistory = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATaskHistory);a.TaskHistory = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.tasks && (b.tasks = b.tasks.map(function (b) {
          return new a.Task(b);
        })), $.extend(this, b);
      }return b;
    }();b.ATaskList = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATaskList);a.TaskList = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AUserBase = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.getInitials = function () {
      return this.first_name[0] + this.last_name[0];
    }, b.prototype.fullName = function () {
      return this.first_name + " " + this.last_name;
    }, b;
  }(a.Base.AUserBase);a.UserBase = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (b) {
      function c(c) {
        c.phones && (c.phones = c.phones.map(function (b) {
          return new a.Phone(b);
        })), c.tags && (c.tags = c.tags.map(function (b) {
          return new a.Tag(b);
        })), b.call(this, c);
      }return __extends(c, b), c;
    }(a.UserBase);b.AUser = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c(a) {
      a.status = a.status || "offline", b.call(this, a);
    }return __extends(c, b), c.prototype.hasAvatar = function () {
      return !!this.custom_image_id;
    }, c.prototype.avatarPath = function () {
      return this.hasAvatar() ? "/ui/custom-image.php?id=" + this.custom_image_id : null;
    }, c.prototype.isActive = function () {
      return !this.trash;
    }, c.prototype.getRole = function () {
      return App.Roles.getRole(this.role);
    }, c.prototype.hasRole = function (a) {
      return this.role >= a;
    }, c.prototype.isGoogleAppsUser = function () {
      return !!this.gapps_uid;
    }, c.prototype.isSelf = function () {
      return this.user_id == App.Global.user().user_id;
    }, c.prototype.isFellow = function () {
      var a = App.Global.projects(!1, !1, !1);for (var b in a) {
        if (a.hasOwnProperty(b)) {
          var c = a[b];if (-1 !== $.inArray(this.user_id, c.user_id_list)) return !0;
        }
      }return !1;
    }, c.prototype.isOffline = function () {
      return "offline" == this.status;
    }, c.prototype.getStatusId = function () {
      return { offline: 0, online: 1, idle: 2, busy: 3, away: 4 }[this.status] || 0;
    }, c.prototype.addTag = function (a) {
      this.hasTag(a.label) || this.tags.push(a);
    }, c.prototype.hasTag = function (a) {
      for (var b in this.tags) {
        if (this.tags.hasOwnProperty(b)) {
          var c = this.tags[b];if (c.label == a) return !0;
        }
      }return !1;
    }, c.prototype.getTags = function () {
      return this.tags.filter(function (a) {
        return App.Global.tagExists(a.tag_id);
      }).sort(function (a, b) {
        return a.label.toLowerCase() < b.label.toLowerCase() ? -1 : a.label.toLowerCase() > b.label.toLowerCase() ? 1 : 0;
      });
    }, c.getUsers = function (a, b, c) {
      return void 0 === a && (a = !1), void 0 === b && (b = !1), void 0 === c && (c = !1), App.Global.getUsers(a, b, c);
    }, c.getUsersSorted = function (a, b, c) {
      return void 0 === a && (a = !1), void 0 === b && (b = !1), void 0 === c && (c = !1), App.Global.getUsersSorted(a, b, c);
    }, c.getUsersForIdList = function (a) {
      var b = c.getUsersSorted(!0, !0, !0),
          d = [];for (var e in a) {
        if (a.hasOwnProperty(e)) {
          var f = a[e],
              g = b[f];g ? d.push(new c(g)) : console.warn("user not found: " + f);
        }
      }return d;
    }, c.getUser = function (a) {
      var b = c.getUsersForIdList([a]);return b.length ? b[0] : null;
    }, c.getUserName = function (b, d) {
      var e = c.getUser(b);return a.User.getUserNameFor(e, d);
    }, c.getUserNameFor = function (a, b) {
      return a ? a.display_name : void 0 !== b ? b : App.Global.trans("unknown_user");
    }, c.getUserStatusFor = function (a) {
      return a ? a.status : "offline";
    }, c.getUserInitialsFor = function (a, b) {
      return void 0 === b && (b = "-"), a ? a.getInitials() : b;
    }, c.prototype.entry_getId = function () {
      return this.user_id;
    }, c;
  }(a.Base.AUser);a.User = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.UserBase);b.AUserService = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.hasName = function () {
      return $.trim(this.fullName()) != $.trim(this.email);
    }, b;
  }(a.Base.AUserService);a.UserService = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AWorkload = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AWorkload);a.Workload = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.last_update && (a.last_update = moment.utc(a.last_update, App.Util.UTCFormatDate)), $.extend(this, a);
      }return a;
    }();a.ATagReporting = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATagReporting);a.TagReporting = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ATaskWeightUnit = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATaskWeightUnit);a.TaskWeightUnit = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ATaskStatus = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ATaskStatus);a.TaskStatus = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ARight = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ARight);a.Right = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.date && (b.date = moment.utc(b.date, App.Util.UTCFormat).setUserTimezone()), b.versions && (b.versions = b.versions.map(function (b) {
          return new a.LogEventVersion(b);
        })), $.extend(this, b);
      }return b;
    }();b.ALogEvent = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ALogEvent);a.LogEvent = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.date && (a.date = moment.utc(a.date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, a);
      }return a;
    }();a.ALogEventVersion = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ALogEventVersion);a.LogEventVersion = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.date && (b.date = moment.utc(b.date, App.Util.UTCFormat).setUserTimezone()), b.evt_document && (b.evt_document = new a.ActivityEventDocument(b.evt_document)), b.evt_directory && (b.evt_directory = new a.ActivityEventDirectory(b.evt_directory)), b.evt_calendar && (b.evt_calendar = new a.ActivityEventCalendar(b.evt_calendar)), b.evt_task && (b.evt_task = new a.ActivityEventTask(b.evt_task)), b.evt_meeting && (b.evt_meeting = new a.ActivityEventMeeting(b.evt_meeting)), b.evt_user && (b.evt_user = new a.ActivityEventUser(b.evt_user)), b.evt_project && (b.evt_project = new a.ActivityEventProject(b.evt_project)), $.extend(this, b);
      }return b;
    }();b.AActivityEvent = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (a) {
    a[a.CALENDAR = 3] = "CALENDAR", a[a.TASK = 4] = "TASK", a[a.MEETING = 5] = "MEETING", a[a.USER = 6] = "USER", a[a.PROJECT = 7] = "PROJECT", a[a.FILE = 10] = "FILE", a[a.DIRECTORY = 9] = "DIRECTORY";
  }(a.ActivityEventTypeEnum || (a.ActivityEventTypeEnum = {}));var b = a.ActivityEventTypeEnum,
      c = function (c) {
    function d() {
      c.apply(this, arguments);
    }return __extends(d, c), d.prototype.getEvent = function () {
      switch (this.getType()) {case b.FILE:
          return this.evt_document;case b.DIRECTORY:
          return this.evt_directory;case b.CALENDAR:
          return this.evt_calendar;case b.TASK:
          return this.evt_task;case b.MEETING:
          return this.evt_meeting;case b.USER:
          return this.evt_user;case b.PROJECT:
          return this.evt_project;default:
          return null;}
    }, d.prototype.getType = function () {
      return this.type;
    }, d.prototype.getSubtype = function () {
      return this.getEvent().subtype;
    }, d.prototype.getEventIcon = function () {
      return this.getEvent().getIcon();
    }, d.prototype.getActionLabel = function () {
      return this.getEvent().getAction(this.user_id);
    }, d.getAvailableTypes = function (a) {
      var c = [b.FILE, b.DIRECTORY, b.CALENDAR, b.TASK, b.MEETING, b.USER];a && c.push(b.PROJECT);var d = [];for (var e in c) {
        c.hasOwnProperty(e) && d.push(this.activityEventTypeForType(c[e]));
      }return d;
    }, d.activityEventTypeForType = function (c) {
      switch (c) {case b.FILE:
          return { icon: a.ActivityEventDocument.getIcon(), name: App.Global.trans("modules.documents"), type: c };case b.DIRECTORY:
          return { icon: a.ActivityEventDirectory.getIcon(), name: App.Global.trans("directories"), type: c };case b.CALENDAR:
          return { icon: a.ActivityEventCalendar.getIcon(), name: App.Global.trans("modules.calendar"), type: c };case b.TASK:
          return { icon: a.ActivityEventTask.getIcon(), name: App.Global.trans("modules.tasks"), type: c };case b.MEETING:
          return { icon: a.ActivityEventMeeting.getIcon(), name: App.Global.trans("modules.meetings"), type: c };case b.USER:
          return { icon: a.ActivityEventUser.getIcon(), name: App.Global.trans("contributeurs"), type: c };case b.PROJECT:
          return { icon: a.ActivityEventProject.getIcon(), name: App.Global.trans("espaces_projets"), type: c };default:
          return null;}
    }, d;
  }(a.Base.AActivityEvent);a.ActivityEvent = c;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AActivityEventTypeBase = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getActionIcon = function () {
      return this.getSubtype(this.subtype).icon;
    }, c.prototype.getActionColor = function () {
      return this.getSubtype(this.subtype).color;
    }, c.prototype.getUserView = function (b) {
      var c = a.User.getUser(b);return '<span class="bold">' + App.Util.avatarFor(c, { html: !0, status: !1, tooltip: !1 }) + a.User.getUserNameFor(c) + "</span>";
    }, c;
  }(a.Base.AActivityEventTypeBase);a.ActivityEventTypeBase = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventTask = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), task: this.getTaskView(), label: this.getTaskView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, { action: "%user_added_task_%task", icon: "fa-plus", color: "green" }, { action: "%user_deleted_task_%task", icon: "fa-trash-o", color: "red" }, { action: "%user_updated_task_%task", icon: "fa-pencil", color: "blue" }, { action: "%user_updated_task_%task", icon: "fa-pencil", color: "blue" }, { action: "event.task.commented", icon: "fa-comment-o", color: "blue" }][a];
    }, c.prototype.getTaskView = function () {
      var b = a.Project.getProject(this.project_id);if (b && b.hasModuleEnabled(App.Global.MODULES.TASKS)) {
        var c = a.Task.getURLForTaskId(this.task_id, b);return '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + this.label.makeSafe() + "</a>";
      }return '<span class="actvitiy-event-item">' + this.label.makeSafe() + "</span>";
    }, c.getIcon = function () {
      return "fa-check";
    }, c;
  }(a.Base.AActivityEventTask);a.ActivityEventTask = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventDocument = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), file: this.getFileView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, { action: "%user_added_document_%file", icon: "fa-plus", color: "green" }, { action: "%user_deleted_document_%file", icon: "fa-trash-o", color: "red" }, { action: "%user_updated_document_%file", icon: "fa-pencil", color: "blue" }, { action: "%user_added_document_%file", icon: "fa-plus", color: "green" }, { action: "%user_restored_document_%file", icon: "fa-refresh", color: "blue" }, { action: "%user_downloaded_document_%file", icon: "fa-download", color: "blue" }, { action: "%user_deleted_document_%file", icon: "fa-trash-o", color: "red" }, { action: "%user_restored_document_%file", icon: "fa-refresh", color: "blue" }][a];
    }, c.prototype.getFileView = function () {
      var b = a.Project.getProject(this.project_id);if (b && b.hasModuleEnabled(App.Global.MODULES.DOCUMENTS)) {
        var c = a.File.getURLForFileId(this.file_master_id, !0, b);return '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + this.file_name.makeSafe() + "</a>";
      }return '<span class="actvitiy-event-item">' + this.file_name.makeSafe() + "</span>";
    }, c.getIcon = function () {
      return "fa-file-o";
    }, c;
  }(a.Base.AActivityEventDocument);a.ActivityEventDocument = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventDirectory = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), file: this.getDirectoryView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, null, null, null, { action: "%user_added_directory_%file", icon: "fa-plus", color: "green" }, null, null, { action: "%user_deleted_directory_%file", icon: "fa-trash-o", color: "red" }, { action: "%user_restored_directory_%file", icon: "fa-refresh", color: "blue" }][a];
    }, c.prototype.getDirectoryView = function () {
      var b = a.Project.getProject(this.project_id);if (b && b.hasModuleEnabled(App.Global.MODULES.DOCUMENTS)) {
        var c = a.Directory.getURLForDirectoryId(this.dir_id, b);return '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + this.dir_name.makeSafe() + "</a>";
      }
      return '<span class="actvitiy-event-item">' + this.dir_name.makeSafe() + "</span>";
    }, c.getIcon = function () {
      return "fa-folder-o";
    }, c;
  }(a.Base.AActivityEventDirectory);a.ActivityEventDirectory = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventCalendar = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), event: this.getEventView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, { action: "%user_added_event_%event", icon: "fa-plus", color: "green" }, { action: "%user_deleted_event_%event", icon: "fa-trash-o", color: "red" }, { action: "%user_updated_event_%event", icon: "fa-pencil", color: "blue" }][a];
    }, c.prototype.getEventView = function () {
      var b = a.Project.getProject(this.project_id);if (b && b.hasModuleEnabled(App.Global.MODULES.AGENDA)) {
        var c = a.CalendarEvent.getURLForEventId(this.event_id, b);return '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + this.event_name.makeSafe() + "</a>";
      }return '<span class="actvitiy-event-item">' + this.event_name.makeSafe() + "</span>";
    }, c.getIcon = function () {
      return "fa-calendar-o";
    }, c;
  }(a.Base.AActivityEventCalendar);a.ActivityEventCalendar = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventMeeting = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), meeting: this.getMeetingView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, { action: "%user_added_meeting_%meeting", icon: "fa-plus", color: "green" }, { action: "%user_deleted_meeting_%meeting", icon: "fa-trash-o", color: "red" }, { action: "%user_updated_meeting_%meeting", icon: "fa-pencil", color: "blue" }, { action: "%user_fixed_meeting_%meeting", icon: "fa-thumb-tack", color: "blues" }][a];
    }, c.prototype.getMeetingView = function () {
      var b = a.Project.getProject(this.project_id);if (b && b.hasModuleEnabled(App.Global.MODULES.MEETINGS)) {
        var c = a.Meeting.getURLForMeetingId(this.meeting_id, b);return '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + this.meeting_name.makeSafe() + "</a>";
      }return '<span class="actvitiy-event-item">' + this.meeting_name.makeSafe() + "</span>";
    }, c.getIcon = function () {
      return "fa-users";
    }, c;
  }(a.Base.AActivityEventMeeting);a.ActivityEventMeeting = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventProject = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getIcon = function () {
      return c.getIcon();
    }, c.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), project: this.getProjectView() };return App.Global.trans(b.action, c);
    }, c.prototype.getSubtype = function (a) {
      return [null, { action: "%user_added_project_%project", icon: "fa-plus", color: "green" }, { action: "%user_deleted_project_%project", icon: "fa-trash-o", color: "red" }, { action: "%user_archived_project_%project", icon: "fa-archive", color: "orange" }, { action: "%user_restored_project_%project", icon: "fa-refresh", color: "blue" }][a];
    }, c.prototype.getProjectView = function () {
      var b = a.Project.getProject(this.project_id),
          c = b ? b.getURL() : null,
          d = this.project_name.makeSafe() || (b ? b.name : '<span class="italic">' + App.Global.trans("unknown_project") + "</span>");return c ? '<a data-toggle="tooltip" title="' + App.Global.trans("wall_goto_element") + '" href="' + c + '" class="actvitiy-event-item">' + d + "</a>" : '<span class="actvitiy-event-item">' + d + "</span>";
    }, c.getIcon = function () {
      return "fa-cloud";
    }, c;
  }(a.Base.AActivityEventProject);a.ActivityEventProject = b;
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (b) {
    var c = function (a) {
      function b(b) {
        a.call(this, b);
      }return __extends(b, a), b;
    }(a.ActivityEventTypeBase);b.AActivityEventUser = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.getIcon = function () {
      return b.getIcon();
    }, b.prototype.getAction = function (a) {
      var b = this.getSubtype(this.subtype),
          c = { user: this.getUserView(a), contributor: this.getContributorView(), project: this.getProjectView() };return App.Global.trans(b.action, c);
    }, b.prototype.getSubtype = function (a) {
      return [null, { action: "%user_created_contributor_%contributor", icon: "fa-plus", color: "green" }, { action: "%user_deleted_contributor_%contributor", icon: "fa-trash-o", color: "red" }, { action: "%user_added_%contributor_to_project_%project", icon: "fa-plus", color: "blue" }, { action: "%user_removed_%contributor_from_project_%project", icon: "fa-minus", color: "red" }][a];
    }, b.prototype.getProjectView = function () {
      return '<span class="actvitiy-event-item">' + (this.project_name.makeSafe() || '<span class="italic">' + App.Global.trans("unknown_project") + "</span>") + "</span>";
    }, b.prototype.getContributorView = function () {
      return '<span class="actvitiy-event-item">' + [this.first_name, this.last_name].join(" ").makeSafe() + "</span>";
    }, b.getIcon = function () {
      return "fa-user";
    }, b;
  }(a.Base.AActivityEventUser);a.ActivityEventUser = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        a.dates && (a.dates = a.dates.map(function (a) {
          return a.datetime_start && (a.datetime_start = moment.utc(a.datetime_start, App.Util.UTCFormat).setUserTimezone()), a.datetime_end && (a.datetime_end = moment.utc(a.datetime_end, App.Util.UTCFormat).setUserTimezone()), a;
        })), $.extend(this, a);
      }return a;
    }();a.AMeeting = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (a) {
    a[a.DECLINED = -1] = "DECLINED", a[a.UNKONWN = 0] = "UNKONWN", a[a.ACCEPTED = 1] = "ACCEPTED", a[a.MAYBE = 2] = "MAYBE";
  }(a.MeetingAvailabilityStatus || (a.MeetingAvailabilityStatus = {}));var b = a.MeetingAvailabilityStatus,
      c = function (a) {
    function c() {
      a.apply(this, arguments);
    }return __extends(c, a), c.prototype.canEdit = function () {
      return this.user_id == App.Global.user().user_id;
    }, c.prototype.getFixedSlot = function () {
      if (!this.meeting_date_id) return null;for (var a in this.dates) {
        if (this.dates.hasOwnProperty(a)) {
          var b = this.dates[a];if (b.date_id == this.meeting_date_id) return b;
        }
      }return null;
    }, c.prototype.getParticipantStatusForSlot = function (a, c) {
      for (var d in this.availabilities) {
        if (this.availabilities.hasOwnProperty(d)) {
          var e = this.availabilities[d];if (e.date_id == c && e.user_id == a) return e.status;
        }
      }return b.UNKONWN;
    }, c.prototype.getAvailableParticipantCountBySlot = function () {
      var a = {};for (var c in this.dates) {
        if (this.dates.hasOwnProperty(c)) {
          var d = this.dates[c];a[d.date_id] = 0;
        }
      }for (var c in this.availabilities) {
        if (this.availabilities.hasOwnProperty(c)) {
          var e = this.availabilities[c];e.status == b.ACCEPTED && a[e.date_id]++;
        }
      }return a;
    }, c.getURLForMeetingId = function (a, b, c) {
      return b ? App.Global.url([b.slug, App.Global.MODULES.MEETINGS, "?meeting=" + a].join("/"), !0, c) : null;
    }, c.prototype.entry_getId = function () {
      return this.meeting_id;
    }, c;
  }(a.Base.AMeeting);a.Meeting = c;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ATagStats = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.entry_getId = function () {
      return this.tag_id;
    }, b;
  }(a.Base.ATagStats);a.TagStats = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AProperty = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AProperty);a.Property = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ASearchResultEntity = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ASearchResultEntity);a.SearchResultEntity = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.documents && (b.documents = new a.SearchResultEntity(b.documents)), b.tasks && (b.tasks = new a.SearchResultEntity(b.tasks)), b.agenda && (b.agenda = new a.SearchResultEntity(b.agenda)), b.meetings && (b.meetings = new a.SearchResultEntity(b.meetings)), $.extend(this, b);
      }return b;
    }();b.ASearchResult = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ASearchResult);a.SearchResult = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AUserServiceInfo = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AUserServiceInfo);a.UserServiceInfo = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.comment && (b.comment = new a.Comment(b.comment)), b.change_date && (b.change_date = moment.utc(b.change_date, App.Util.UTCFormat).setUserTimezone()), $.extend(this, b);
      }return b;
    }();b.ADocValidationResponse = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (a) {
    a[a.PENDING = 0] = "PENDING", a[a.IN_PROGRESS = 1] = "IN_PROGRESS", a[a.QUESTIONED = 2] = "QUESTIONED", a[a.REJECTED = 3] = "REJECTED", a[a.ACCEPTED = 4] = "ACCEPTED";
  }(a.DocValidationResponseStatus || (a.DocValidationResponseStatus = {}));var b = (a.DocValidationResponseStatus, function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.isGivenOnPreviousVersion = function (b) {
      return this.status !== a.DocValidationResponseStatus.PENDING && this.status !== a.DocValidationResponseStatus.IN_PROGRESS && this.file_version_id != b;
    }, c;
  }(a.Base.ADocValidationResponse));a.DocValidationResponse = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.creation_date && (b.creation_date = moment.utc(b.creation_date, App.Util.UTCFormat).setUserTimezone()), b.expiry_date && (b.expiry_date = moment.utc(b.expiry_date, App.Util.UTCFormat).setUserTimezone()), b.change_date && (b.change_date = moment.utc(b.change_date, App.Util.UTCFormat).setUserTimezone()), b.doc_validation_responses && (b.doc_validation_responses = b.doc_validation_responses.map(function (b) {
          return new a.DocValidationResponse(b);
        })), $.extend(this, b);
      }return b;
    }();b.ADocValidationRequest = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  !function (a) {
    a[a.ON_HOLD = 0] = "ON_HOLD", a[a.IN_PROGRESS = 1] = "IN_PROGRESS", a[a.COMPLETED = 2] = "COMPLETED";
  }(a.DocValidationRequestStatus || (a.DocValidationRequestStatus = {}));var b = (a.DocValidationRequestStatus, function (b) {
    function c() {
      b.apply(this, arguments);
    }return __extends(c, b), c.prototype.getResponseForUser = function (a) {
      for (var b in this.doc_validation_responses) {
        if (this.doc_validation_responses.hasOwnProperty(b)) {
          var c = this.doc_validation_responses[b];if (c.user_id == a) return c;
        }
      }return null;
    }, c.prototype.getResponseForId = function (a) {
      for (var b in this.doc_validation_responses) {
        if (this.doc_validation_responses.hasOwnProperty(b)) {
          var c = this.doc_validation_responses[b];if (c.response_id == a) return c;
        }
      }return null;
    }, c.prototype.getUser = function () {
      return a.User.getUser(this.user_id);
    }, c.prototype.hasPendingResponseForUser = function (b) {
      var c = this.getResponseForUser(b);return c && c.status == a.DocValidationResponseStatus.PENDING;
    }, c.prototype.getResponsesUsersByStatus = function () {
      var b = { pending: [], questioned: [], rejected: [], accepted: [] };return this.doc_validation_responses.forEach(function (c) {
        var d = a.User.getUser(c.user_id);switch (c.status) {case a.DocValidationResponseStatus.PENDING:case a.DocValidationResponseStatus.IN_PROGRESS:
            b.pending.push(d);break;case a.DocValidationResponseStatus.QUESTIONED:
            b.questioned.push(d);break;case a.DocValidationResponseStatus.REJECTED:
            b.rejected.push(d);break;case a.DocValidationResponseStatus.ACCEPTED:
            b.accepted.push(d);}
      }), b;
    }, c.prototype.getFileURL = function () {
      return a.File.getURLForFileId(this.file_data.file_master_id, !0, a.Project.getProject(this.file_data.project_id), !1, "validation");
    }, c;
  }(a.Base.ADocValidationRequest));a.DocValidationRequest = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AProjectTemplate = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AProjectTemplate);a.ProjectTemplate = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (b) {
    var c = function () {
      function b(b) {
        b.trial_until && (b.trial_until = moment.utc(b.trial_until, App.Util.UTCFormat).setUserTimezone()), b.next_payment_date && (b.next_payment_date = moment.utc(b.next_payment_date, App.Util.UTCFormat).setUserTimezone()), b.address && (b.address = new a.Address(b.address)), b.phones && (b.phones = b.phones.map(function (b) {
          return new a.Phone(b);
        })), b.credit_card && (b.credit_card = new a.CreditCard(b.credit_card)), $.extend(this, b);
      }return b;
    }();b.ABillingInfo = c;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.isFreeOffer = function () {
      return !this.trial_until && !this.next_payment_date;
    }, b;
  }(a.Base.ABillingInfo);a.BillingInfo = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AOffer = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b.prototype.isTailorMade = function () {
      return this.is_quote || !this.is_configurable;
    }, b;
  }(a.Base.AOffer);a.Offer = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.APhone = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.APhone);a.Phone = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.ACreditCard = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.ACreditCard);a.CreditCard = b;
}(Model || (Model = {}));var Model;!function (a) {
  !function (a) {
    var b = function () {
      function a(a) {
        $.extend(this, a);
      }return a;
    }();a.AAddress = b;
  }(a.Base || (a.Base = {}));
}(Model || (Model = {}));var __extends = undefined && undefined.__extends || function (a, b) {
  function c() {
    this.constructor = a;
  }for (var d in b) {
    b.hasOwnProperty(d) && (a[d] = b[d]);
  }a.prototype = null === b ? Object.create(b) : (c.prototype = b.prototype, new c());
},
    Model;!function (a) {
  var b = function (a) {
    function b() {
      a.apply(this, arguments);
    }return __extends(b, a), b;
  }(a.Base.AAddress);a.Address = b;
}(Model || (Model = {}));var App;!function (a) {
  "undefined" != typeof emoji && (emoji.emoticons_data[":'D"] = "joy", emoji.emoticons_data["(y)"] = "thumbsup");var b = function () {
    function b(b, c) {
      void 0 === c && (c = {});var d = { canDisable: !0, hasHeader: !0, onFocus: null };this.options = $.extend(d, c), this.id = b, this.$chat = $('<div class="chat-controller" data-chat="' + this.id + '">' + (this.options.hasHeader ? '<div class="chat-header colorable"></div>' : "") + '<div class="chat-body"></div></div>');var e = a.Global.loadingScreen();return this.$chat.find(".chat-body").append(e), this.hasUnseenMessages = !1, this.hasMoreToLoad = !0, this.isLoadingMessages = !1, this.typingTimersByUserId = {}, this.show(), this.load(), this.bind(), this;
    }return b.prototype.isVisible = function () {
      return this.visible;
    }, b.prototype.show = function () {
      this.setVisible(!0), this.$input && this.$input.focus(), this.$messages && this.$messages.scrollToBottom(0), this.onFocus();
    }, b.prototype.hide = function () {
      this.setVisible(!1);
    }, b.prototype.isActive = function () {
      return this.isVisible() && document.hasFocus();
    }, b.prototype.onNameEdited = function (a) {
      this.chat.name = a, this.updateNameView();
    }, b.prototype.updateNameView = function () {
      var a = this.chat.getTitle() || "";this.$chat.find(".chat-name").text(a).attr("title", a), this.$chat.find("textarea.chat-intro-title-name").val(a), this.panel && this.panel.setName();
    }, b.prototype.onUsersAdded = function (a, b) {
      this.onUsersChanged(b);
    }, b.prototype.onUsersRemoved = function (a, b) {
      this.onUsersChanged(b);
    }, b.prototype.onUsersChanged = function (a) {
      this.chat.users = a, this.updateUsersView();
    }, b.prototype.updateUsersView = function () {
      this.updateChatType();var c = b.chatAvatar(this.chat);a.Global.viewLoaded(this.$chat.find(".chat-avatar").html(c)), this.updateNameView(), this.$chat.find(".user-total-count").text(this.chat.users.length), this.$chat.find("[data-air-users]").attr("data-air-users", this.chat.getOtherUsersId().join(",")), this.panel && this.panel.setUsers();
    }, b.prototype.getChatType = function () {
      if (this.chat.isChannel()) return "channel";var a = this.chat.getOtherUsersId();return a.length ? 1 == a.length ? "dm" : a.length > 1 ? "group" : void 0 : "self";
    }, b.prototype.updateChatType = function () {
      this.$chat.attr("data-type", this.getChatType());
    }, b.prototype.onNewMessage = function (b) {
      var c = !this.chat.messages_count,
          d = this.chat.getLastMessage();this.chat.addMessage(b);var e = this;this.stayAtBottom(function () {
        e.displayMessages([b], d);
      }), c && this.showReadByStats(), console.log("chat recieved message. is active:", this.isActive()), this.hasUnseenMessages = !0, this.refreshReadStatsCount(), b.user_id !== a.Global.user().user_id && this.onUserStoppedTyping(b.user_id), this.isActive() && this.clearUnseen();
    }, b.prototype.onMessageEdited = function (a) {
      var c = this;this.stayAtBottom(function () {
        c.chat.editMessage(a);var d = c.chat.getPreviousMessage(a.index),
            e = b.viewForMessages([a], d, c.chat.favorites);c.$chat.find('.message[data-message="' + a.index + '"]').replaceWith(e), b.messagesViewLoaded(c.$messagesList);
      });
    }, b.prototype.onMessageDeleted = function (a) {
      var c = this;this.stayAtBottom(function () {
        c.chat.editMessage(a);var d = c.$chat.find('.message[data-message="' + a.index + '"]'),
            e = d.next(".message");if (d.remove(), e.length) {
          var f = parseInt(e.data("message")),
              g = c.chat.getMessage(f),
              h = c.chat.getPreviousMessage(f),
              i = b.viewForMessages([g], h, c.chat.favorites);e.replaceWith(i), b.messagesViewLoaded(c.$messagesList);
        }
      });
    }, b.prototype.onMessageSetFavorite = function (a, b) {
      b ? this.chat.addFavorite(a) : this.chat.removeFavorite(a), this.$chat.find('.message[data-message="' + a + '"] .message-favorite').toggleClass("is-favorite", b);
    }, b.prototype.onUnseenCleared = function (b) {
      b == a.Global.user().user_id && (this.hasUnseenMessages = !1), this.chat.userUpdateReadCount(b, this.chat.messages_count), this.refreshReadStatsCount();
    }, b.prototype.onUserStartedTyping = function (b) {
      if (b != a.Global.user().user_id) {
        var c = this;clearTimeout(this.typingTimersByUserId[b]), this.typingTimersByUserId[b] = window.setTimeout(function () {
          c.onUserStoppedTyping(b);
        }, 1e4), c.updateTypingUsers();
      }
    }, b.prototype.onUserStoppedTyping = function (b) {
      b != a.Global.user().user_id && (clearTimeout(this.typingTimersByUserId[b]), delete this.typingTimersByUserId[b], this.updateTypingUsers());
    }, b.prototype.remove = function () {
      this.setVisible(!1), this.$chat.remove();
    }, b.prototype.setVisible = function (a) {
      this.visible = a, this.$chat.toggleClass("hidden", !a);
    }, b.prototype.onFocus = function () {
      console.log("on focus ", this.id), console.log("this.hasUnseenMessages", this.hasUnseenMessages), this.hasUnseenMessages && this.clearUnseen(), this.options.onFocus && this.options.onFocus();
    }, b.prototype.bind = function () {
      var b = this;$(window).focus(function () {
        b.isVisible() && b.onFocus();
      }), this.$chat.on("keyup", ".chat-input", function (c) {
        if (c.keyCode === a.Keys.up) {
          var d = $(this);if ($.trim(d.val()).length) return;var e = b.chat.getLastMessageFromMe();if (!e) return;var f = e.index;b.editMessage(f);
        }
      }).on("submit", ".chat-input-form", function () {
        var c = $(this).find(".chat-input"),
            d = $.trim(c.val());d && (b.clearInput(), a.API.Chat.postMessage(d, b.id));
      }).on("keydown", "textarea.chat-intro-title-name", function (b) {
        var c = $(this);b.keyCode == a.Keys.enter && (b.preventDefault(), c.trigger("change"));
      }).on("change", "textarea.chat-intro-title-name", function () {
        var c = $(this),
            d = c.val();a.API.Chat.editName(b.chat.chat_id, d, { tooltip: c });
      }).on("click", ".message-edit", function () {
        var a = $(this),
            c = a.closest(".message"),
            d = parseInt(c.data("message"));b.editMessage(d);
      }).on("click", ".message-favorite", function () {
        var c = $(this),
            d = c.is(".is-favorite"),
            e = parseInt(c.closest(".message").data("message"));a.API.Chat.setFavoriteMessage(!d, e, b.chat.chat_id, { button: c });
      }).on("click", ".message .user-info", function () {
        var c = $(this).closest(".message").data("message"),
            d = b.chat.getMessage(c),
            e = d.user_id;a.Global.showUserDetails(e);
      }).on("click", ".message-attachment .attachment-download", function () {
        var c = $(this).closest(".message-attachment"),
            d = c.data("attachment");a.API.Chat.downloadAttachement(d, b.chat.chat_id);
      }).on("click", ".message-attachment .attachment-preview", function () {
        var c = $(this).closest(".message-attachment"),
            d = parseInt(c.closest(".message").data("message")),
            e = b.chat.getMessage(d),
            f = e.attachment;new a.Preview(f);
      }).on("click", ".chat-options", function () {
        var c = $(this),
            d = a.Templates.Chat.chatActionsMenu();a.Popup.popup(d, { popover: { trigger: c, options: { placement: "top", container: '.chat-controller[data-chat="' + b.chat.chat_id + '"]' } }, autoWidth: !0, onShown: function onShown(c) {
            c.on("click", ".chat-upload-option", function (b) {
              $(this).find(".chat-upload").click(), a.Popup.hide(c);
            }).on("click", ".chat-upload", function (a) {
              a.stopPropagation();
            }).on("change", ".chat-upload", function () {
              var a = $(this),
                  c = a.get(0),
                  d = c.files;b.uploadAttachments(d), a.val("");
            }).on("click", ".chat-post-airtime", function () {
              a.Popup.hide(c);var d = a.Communication.AirTime.getURLForRoom();a.API.Chat.postMessage(d, b.id);
            });
          } });
      }).on("click", ".chat-open-detail", function () {
        var a = $(this);if (a.is(".active")) return b.closeChatPanel();var c = a.data("detail");b.openDetailTab(c);
      }).on("click", ".show-chat-users", function () {
        b.showChatUsers($(this));
      }), setInterval(function () {
        b.$messages && b.$messages.find(".message .meta .date").each(function () {
          var b = $(this),
              c = moment(b.data("date"));b.text(a.Util.naturalDate(c));
        });
      }, 6e4);
    }, b.prototype.openDetailTab = function (a) {
      var b = this;this.stayAtBottom(function () {
        b.panelForChat().open(a);
      });
    }, b.prototype.closeChatPanel = function () {
      return this.panelForChat().close();
    }, b.prototype.showChatUsers = function (b) {
      var c = this;if (c.chat.isChannel() || c.chat.isGroupChat()) {
        var d = c.chat.getUsersId();if (!d.length) return;var e = [];for (var f in d) {
          if (d.hasOwnProperty(f)) {
            var g = d[f],
                h = Model.User.getUser(g);h && e.push(h);
          }
        }e.sort(function (a, b) {
          return a.display_name.toLowerCase() < b.display_name.toLowerCase() ? -1 : 1;
        });var i = { users: e, chat: !!this.options.startChat, airtime: !!this.options.startAirtime };a.Popup.popup(a.Templates.Chat.chatGroupContacts(i), { destroy: !0, popover: { trigger: b, options: { container: "body", placement: "bottom" } }, autoWidth: !0, onShown: function onShown(a) {
            var b = a.find(".start-chat"),
                d = a.find(".start-airtime");a.find('.chat-group-contact input[type="checkbox"]').on("click", function () {
              var c = a.find('.chat-group-contact input[type="checkbox"]:checked').length,
                  e = c > 0,
                  f = c > 0 && c <= 3;b.prop("disabled", !e), d.prop("disabled", !f);
            });var e = function e() {
              return a.find('.chat-group-contact input[type="checkbox"]:checked').map(function () {
                return parseInt($(this).closest(".chat-group-contact").data("user"));
              }).get();
            };b.click(function () {
              var a = e();c.options.startChat && c.options.startChat(a);
            }), d.click(function () {
              var a = e();c.options.startAirtime && c.options.startAirtime(a);
            });
          } });
      }
    }, b.prototype.uploadAttachments = function (a) {
      for (var b = [], c = 0; c < a.length; c++) {
        var d = a[c];d && d.name && b.push(d);
      }b.length > 0 && this.showUploadAttachment(b, 1, b.length);
    }, b.prototype.load = function () {
      var c = this;a.API.Chat.getChat(this.id, { onSuccess: function onSuccess(d) {
          var e = new a.API.Chat.Chat.GetChatResponse(d);c.chat = e.chat;var f = c.chat.isGroupChat() ? null : c.chat.getOtherUsersId()[0],
              g = b.chatAvatar(c.chat);c.$chat.html(a.Templates.Chat.chat({ title: c.chat.getTitle(), avatar: g, has_header: c.options.hasHeader, can_disable: c.options.canDisable, is_group: c.chat.isGroupChat(), user_count: c.chat.getUsersId().length, airtime_user: f })), c.$messages = c.$chat.find(".chat-messages"), c.$messagesList = c.$messages.find(".chat-messages-list"), c.$input = c.$chat.find(".chat-input"), c.$footer = c.$chat.find(".chat-footer"), c.onTemplateLoaded(), c.updateChatType(), c.chat.getMessages().length < a.Chat.MESSAGE_COUNT_PER_LOAD && c.setHasNoMoreToLoad();var h = c.chat.getMessages();h.length && (c.displayMessages(h), c.showReadByStats()), c.$messages.scrollToBottom(0), a.Global.viewLoaded(c.$chat), c.chat.hasUnseenMessages() && c.clearUnseen(), c.$input.focus(), c.options.onLoaded && c.options.onLoaded();
        }, onError: function onError(a) {
          if (c.options.onLoadError) return c.options.onLoadError(a);
        } });
    }, b.prototype.clearUnseen = function () {
      a.API.Chat.clearUnseen(this.id), this.hasUnseenMessages = !1;
    }, b.prototype.showReadByStats = function () {
      this.$messages.find(".read-stats").removeClass("hidden");
    }, b.prototype.clearInput = function () {
      this.$input.val("").trigger("change");
    }, b.prototype.editMessage = function (c) {
      var d = this,
          e = d.chat.getMessagesSorted()[c];a.Panel.showEditMessage(e.getText(), { oEmojiPicker: b.getEmojiPicker({ pickerEmojiView: '<button type="button" class="button-bare button-emoji"><i class="fa fa-fw fa-smile-o"></i></button>', pickerEmojiOpenView: '<button type="button" class="button-bare button-emoji"><i class="fa fa-fw fa-smile-o"></i></button>', pickerEmojiContainerSelector: "#edit-message-emoji-picker" }), onEdit: function onEdit(b, c, f) {
          a.API.Chat.editMessage(b, e.index, d.chat.chat_id, { onSuccess: function onSuccess() {
              f(), d.$input.focus();
            }, button: c });
        }, onDelete: function onDelete(b, c) {
          a.API.Chat.deleteMessage(e.index, d.chat.chat_id, { onSuccess: function onSuccess() {
              c();
            }, button: b });
        } });
    }, b.prototype.displayMessages = function (a, c, d) {
      void 0 === c && (c = null);var e = b.viewForMessages(a, c, this.chat.favorites, { hideChat: !this.chat.isGroupChat() });d ? this.$messagesList.prepend(e) : this.$messagesList.append(e), b.messagesViewLoaded(this.$messagesList);
    }, b.prototype.panelForChat = function () {
      if (this.panel) return this.panel;var b = this,
          c = this.options.panelTabs || { info: this.$chat.find('.chat-open-detail[data-detail="info"]'), search: this.$chat.find('.chat-open-detail[data-detail="search"]'), favorites: this.$chat.find('.chat-open-detail[data-detail="favorites"]'), links: this.$chat.find('.chat-open-detail[data-detail="links"]'), files: this.$chat.find('.chat-open-detail[data-detail="files"]') };return this.panel = new a.ChatPanel(this.chat, this.$chat.find(".chat-body"), { addFiles: function addFiles(a) {
          b.uploadAttachments(a);
        } }, { hideHeader: !0, tabs: c }), this.panel;
    }, b.prototype.onTemplateLoaded = function () {
      var c = this;this.oWDTEmoji = b.getEmojiPicker({ pickerEmojiView: '<button type="button" class="button-bare button-emoji"><i class="fa fa-fw fa-smile-o"></i></button>', pickerEmojiOpenView: '<button type="button" class="button-bare button-emoji"><i class="fa fa-fw fa-smile-o"></i></button>', pickerEmojiContainerSelector: '.chat-controller[data-chat="' + this.chat.chat_id + '"] .chat-input-controls-right' }), this.oWDTEmoji.init('.chat-controller[data-chat="' + this.chat.chat_id + '"] .chat-input', '.chat-controller[data-chat="' + this.chat.chat_id + '"]'), this.$messages.scroll(function () {
        parseInt(c.$messages.prop("scrollTop"), 10) <= 100 && c.loadMore();
      }), this.$input.dynamicTextarea(function (a) {
        a.shiftKey || (a.preventDefault(), c.$input.closest("form").submit());
      }).on("dynamicResize", function () {
        c.stayAtBottom(function () {
          var a = c.$input.outerHeight();c.$messages.css("bottom", a + "px"), c.$footer.css("height", a + "px");
        });
      }).on("keyup", function () {
        var b = $(this),
            d = b.val().length,
            e = d > 3;c.$footer.find(".chat-input-meta").toggleClass("hidden", !e);var f = b.is(".chat-input-empty") && d,
            g = !b.is(".chat-input-empty") && !d;d || (clearTimeout(c.typingTimer), c.isTyping = !1), g ? a.API.Chat.canceledTyping(c.chat.chat_id) : (f || d) && (c.isTyping || (c.isTyping = !0, a.API.Chat.startedTyping(c.chat.chat_id), c.typingTimer = window.setTimeout(function () {
          c.isTyping = !1;
        }, 8e3))), b.toggleClass("chat-input-empty", !d);
      }), this.chat.isGroupChat() && a.Global.listenToUserStatusChanged(function (a, b) {
        var d = c.chat.getUsersId();-1 !== $.inArray(a, d) && c.refreshOnlineUserCount();
      }), this.refreshOnlineUserCount(), this.refreshReadStatsCount();
    }, b.prototype.refreshOnlineUserCount = function () {
      var a = this.chat.getUsers(),
          b = a.filter(function (a) {
        return "offline" !== Model.User.getUserStatusFor(a);
      }).length;this.$chat.find(".user-online-count").text(b), this.options.onOnlineUserCountChanged && this.options.onOnlineUserCountChanged(b);
    }, b.prototype.refreshReadStatsCount = function () {
      var b = a.Global.user().user_id,
          c = this.chat.messages_count,
          d = [],
          e = [],
          f = this.chat.getLastMessage();for (var g in this.chat.users) {
        if (this.chat.users.hasOwnProperty(g)) {
          var h = this.chat.users[g],
              i = h.user_id;if (i == b) continue;var j = h.last_seen_count,
              k = f && f.user_id == i;k || j == c ? d.push(i) : e.push(i);
        }
      }var l = $('<ul class="text-left"></ul>');d = function (a) {
        return a.map(function (a) {
          return Model.User.getUser(a);
        }).filter(function (a) {
          return !!a;
        }).sort(function (a, b) {
          return a.display_name.toLowerCase() < b.display_name.toLowerCase() ? -1 : 1;
        });
      }(d);for (var g in d) {
        if (d.hasOwnProperty(g)) {
          var m = d[g].display_name;l.append('<li class="read-stats-item nowrap ellipsis"><i class="fa fa-fw fa-eye icon-left"></i>' + m + "</li>");
        }
      }var n = this.$messages.find(".read-stats"),
          o = n.find(".read-stats-count"),
          p = l[0].outerHTML;o.text(d.length), n.tooltip("destroy"), d.length && n.tooltip({ html: !0, title: p });
    }, b.prototype.updateTypingUsers = function () {
      var b = [];for (var c in this.typingTimersByUserId) {
        this.typingTimersByUserId.hasOwnProperty(c) && b.push(c);
      }var d = "";if (b.length) {
        var e = b.map(function (a) {
          return Model.User.getUserName(a);
        }).join(", ").makeSafe();d = '<i class="fa fa-pencil icon-left"></i>' + a.Global.trans(b.length > 1 ? "chat.typing_many" : "chat.typing_one", { user: e });
      }this.$chat.find(".users-typing").html(d);
    }, b.prototype.loadMore = function () {
      if (this.hasMoreToLoad && !this.isLoadingMessages) {
        var b = this;this.setLoadingMessages(!0);var c = this.chat.getMessages().length;this.chat.loadMore(c, function (c) {
          c.length ? (b.displayMoreMessages(c), c.length < a.Chat.MESSAGE_COUNT_PER_LOAD && b.setHasNoMoreToLoad()) : b.setHasNoMoreToLoad(), b.setLoadingMessages(!1);
        });
      }
    }, b.prototype.setLoadingMessages = function (a) {
      this.isLoadingMessages = a, this.$messages.toggleClass("loading", a);
    }, b.prototype.setHasNoMoreToLoad = function () {
      if (this.hasMoreToLoad) {
        this.hasMoreToLoad = !1, this.$messages.addClass("has-no-more");var c,
            d = b.chatAvatar(this.chat),
            e = this.chat.getTitle();c = this.chat.isChannel() ? a.Templates.Chat.chatIntroChannel() : this.chat.isGroupChat() ? a.Global.trans("chat.intro.group") : a.Global.trans("chat.intro.direct_message");var f = a.Global.viewLoaded($(a.Templates.Chat.chatIntro({ avatar: d, title: e, info: c, can_edit_name: !this.chat.isChannel() })));this.$messages.prepend(f);
      }
    }, b.prototype.displayMoreMessages = function (a) {
      var b = this.getOffsetFromTop(),
          c = this.getOffsetFromBottom();this.displayMessages(a, null, !0);var d = this.getOffsetFromBottom(),
          e = b + (d - c);this.$messages.scrollTo(e, 0);
    }, b.prototype.getOffsetFromBottom = function () {
      var a = parseInt(this.$messages.prop("scrollTop"));return parseInt(this.$messages.prop("scrollHeight")) - a - this.$messages.outerHeight();
    }, b.prototype.getOffsetFromTop = function () {
      return parseInt(this.$messages.prop("scrollTop"));
    }, b.prototype.shouldScrollToBottom = function () {
      return this.getOffsetFromBottom() <= 10;
    }, b.prototype.showUploadAttachment = function (b, c, d) {
      var e = this;if (b.length > 0) {
        var f,
            g = b[0],
            h = null,
            i = g.name.split("."),
            j = null;i.length ? (j = i.pop(), f = i.join(".")) : f = g.name;var k = function k() {
          var i = a.Templates.Chat.uploadAttachment({ file_count: d, file_index: c, title: f, src: h, icon: h ? null : Model.FileBase.iconForExtension(j) });a.Popup.popup(i, { onShown: function onShown(h) {
              var i = function i() {
                b.shift(), b.length > 0 ? e.showUploadAttachment(b, c + 1, d) : e.$input.focus();
              };h.on("click", ".cancel", function () {
                i();
              }).on("submit", "form", function () {
                var b = $(this),
                    c = $.trim(b.find('input[name="title"]').val()) || f;j && (c += "." + j);var d = $.trim(b.find('textarea[name="description"]').val()),
                    k = new a.Uploader(g, a.Global.conf().upload.attachment_max_size);k.setName(c), k.upload(function (b, f, h) {
                  a.API.Chat.addAttachement(g, c, d, e.chat.chat_id, { onProgress: b, onSuccess: f, onError: h });
                }), a.Popup.hide(h), i();
              });
            } });
        },
            l = "image";if (g.type.substring(0, l.length) == l && FileReader) {
          var m = new FileReader();m.onload = function (a) {
            h = a.target.result, k();
          }, m.readAsDataURL(g);
        } else k();
      }
    }, b.prototype.stayAtBottom = function (a) {
      var b = this.shouldScrollToBottom();a(), b && this.$messages.scrollToBottom(0);
    }, b.messagesViewLoaded = function (b) {
      return a.Util.messageViewLoaded(b);
    }, b.viewForMessages = function (b, c, d, e) {
      void 0 === c && (c = null), void 0 === e && (e = {});var f = "";for (var g in b) {
        if (b.hasOwnProperty(g)) {
          var h = b[g];if (h.deletion_date) continue;var i = Model.User.getUser(h.user_id),
              j = !0;c && Math.abs(h.date.diff(c.date)) / 1e3 < 180 && c.user_id == h.user_id && (j = !1);var k = -1 !== $.inArray(h.index, d);f += a.Templates.Global.detail_comments_comment({ is_mine: h.isMine(), comment_id: h.index, show_meta: j, date: h.date, display_date: h.getNaturalDate(), avatar: a.Util.avatar(h.user_id, { html: !0, tooltip: !0, customClass: "avatar-l" }), username: Model.User.getUserName(h.user_id), content: h.getText(), can_edit: h.isMine() && !h.deletion_date, can_favorite: !h.deletion_date, favorite: k, attachment: h.attachment, edited: h.edited, deleted: !!h.deletion_date, airtime_user_id: e.hideAirTime || !i || i.isSelf() ? null : i.user_id, chat_user_id: e.hideChat || !i || i.isSelf() ? null : i.user_id }), c = h;
        }
      }return f;
    }, b.chatAvatar = function (c, d) {
      void 0 === d && (d = "avatar-l");return c.isChannel() ? b.channelAvatar(c.getProject(), d) : c.isGroupChat() ? '<span class="avatar ' + d + '"><i class="fa fa-fw fa-group"></i></span>' : c.getOtherUsersId().length ? a.Util.avatar(c.getOtherUsersId()[0], { customClass: d, status: !0, html: !0, tooltip: !1 }) : a.Util.avatar(a.Global.user().user_id, { customClass: d, status: !1, html: !0, tooltip: !1 });
    }, b.channelAvatar = function (a, b) {
      void 0 === b && (b = "avatar-l");var c = a.custom_image_id || null,
          d = "/ui/custom-image.php?id=" + c;return '<span class="avatar ' + b + ' avatar-rounded-squared"' + (c ? ' style="background-image: url(' + d + '); "' : "") + ">" + (c ? "" : '<i class="fa fa-fw fa-hashtag"></i>') + "</span>";
    }, b.getEmojiPicker = function (b) {
      return new WDTEmoji($.extend({ emojiSheets: { apple: a.Global.urlStaticImage("emojis/sheet_apple_64.png") }, labels: { footer: "Wimi Loves You", search: a.Global.trans("rechercher_input"), searchResults: a.Global.trans("chat.search_results"), noEmojiFound: a.Global.trans("chat.no_emoji_found") }, sectionHeaders: function sectionHeaders() {
          return { Recent: '<i class="fa fa-fw fa-clock-o"></i>', People: '<i class="fa fa-fw fa-smile-o"></i>', Nature: '<i class="fa fa-fw fa-leaf"></i></a', Foods: '<i class="fa fa-fw fa-cutlery"></i></a', Activity: '<i class="fa fa-fw fa-futbol-o"></i>', Places: '<i class="fa fa-fw fa-plane"></i></a', Objects: '<i class="fa fa-fw fa-lightbulb-o"></i>', Symbols: '<i class="fa fa-fw fa-heart-o"></i>', Flags: '<i class="fa fa-fw fa-flag-o"></i>' };
        } }, b));
    }, b.MESSAGE_COUNT_PER_LOAD = 30, b;
  }();a.Chat = b;
}(App || (App = {}));var App;!function (a) {
  var b = function () {
    function b(b) {
      for (var c in b.app.lang) {
        b.app.lang.hasOwnProperty(c) && (b.app.lang[c].id = parseInt(b.app.lang[c].id), b.app.lang[c].country_key = b.app.lang[c].code.split("-")[1]);
      }return b.app.user_info && (b.app.user_info.date_create = moment(b.app.user_info.date_create, a.Util.UTCFormat), b.app.user_info.locale_id = parseInt(b.app.user_info.locale_id)), $.extend(this, b), this;
    }return b.prototype.getLocaleForId = function (a) {
      for (var b in this.app.lang) {
        if (this.app.lang.hasOwnProperty(b)) {
          var c = this.app.lang[b];if (c.id == a) return c;
        }
      }return console.warn("Locale not found for id : " + a), null;
    }, b.prototype.hasFeature = function (a) {
      return !!this.app.features.feature[a];
    }, b.prototype.hasModule = function (a) {
      return !!this.app.features.module[a];
    }, b.prototype.getPhoneCodeByCountryCode = function () {
      var b = {},
          c = a.Global.conf().phones.countries;for (var d in c) {
        c.hasOwnProperty(d) && (b[d] = "(+" + c[d].code + ")");
      }return b;
    }, b;
  }();a.Config = b;
}(App || (App = {}));var App;!function (a) {
  var b = function () {
    function b(a, c, d) {
      void 0 === d && (d = {}), this.id = null, this.tabsId = null, this.$panel = null, this.$container = null, this.options = null, this.isOpen = null, this.comments = null, this.canEditComments = !1, this.canDeleteComments = !1, this.onLoaded = null, this.oPushHandlerListByTarget = {}, b.currentPanel && b.currentPanel.unload();var e = this;this.id = a, this.$container = c, this.isOpen = !1, this.loaded = !0, this.comments = null, this.options = d, this.$panel = $('<div class="panel-root" data-panel="' + a + '"><div class="panel-container"><div class="panel-header' + (this.options.hideHeader ? " hide-header" : "") + '"><div class="float-left panel-header-left"></div><div class="float-right panel-header-right"><button class="control-light close-panel"><i class="fa fa-fw fa-times"></i></button></div></div><div class="panel-content"></div></div><div class="panel-overlay"><div class="loader"><i class="fa fa-fw fa-spinner fa-pulse"></i></div></div></div>'), this.$panel.appendTo(c), this.$panel.on("click", ".close-panel", function (a) {
        $(this).tooltip("destroy"), e.close();
      }), b.currentPanel = this;
    }return b.prototype.load = function (a) {
      var b = this;this.loading(!0), a(function () {
        b.loading(!1), b.onLoaded && (b.onLoaded(), b.onLoaded = null);
      });
    }, b.prototype.addTab = function (b, c, d, e) {
      void 0 === e && (e = {});var f = this,
          g = this._ensureTabsLayout(),
          h = $('<li><button type="button" data-tab="' + b + '" class="tab button-icon"><i class="fa fa-fw fa-' + c + ' icon-left icon-right"></i></button></li>');g.find("ul").append(h);var i = $('<div class="tab-content" data-tabs="' + this.tabsId + '" data-tab="' + b + '">' + d + "</div>");return this.$panel.find(".panel-content").append(i), i.on("shown", function () {
        if (a.Global.viewLoaded(i), $.isFunction(e.onLoaded) && e.onLoaded(i, h), f.options.tabs) for (var c in f.options.tabs) {
          f.options.tabs.hasOwnProperty(c) && (c == b ? f.options.tabs[c].addClass("active") : f.options.tabs[c].removeClass("active"));
        }f.options.onTabLoaded && f.options.onTabLoaded(b, i, h);
      }), $.isFunction(e.onAdded) && e.onAdded(i, h), this;
    }, b.prototype.addTabComments = function (c) {
      var d = this;c.onEdited && (d.canEditComments = !0), c.onDeleted && (d.canDeleteComments = !0);var e = void 0 !== c.title ? c.title : a.Global.trans("comments"),
          f = c.tabName || "comments";return this.addTab(f, "comments-o", a.Templates.Global.detail_comments({ title: e }), { onLoaded: function onLoaded(a, b) {
          if (a.find('textarea[name="comment"]').focus().commentBox("refresh"), null == d.comments) {
            var e = b.find("button");c.loadComments(e, function (a) {
              d.comments = a, d.displayComments(d.comments), d.scrollToBottom(0);
            });
          }d.scrollToBottom(0), c.onLoaded && c.onLoaded(a, b);
        }, onAdded: function onAdded(e, f) {
          e.find('textarea[name="comment"]').commentBox({ onSend: function onSend(a, b) {
              c.onSubmit(a, function () {
                d.scrollToBottom(0);
              });
            }, bEnterToSend: a.Global.getPref(a.Global.PREFS.GLOBAL.ENTER_TO_SEND, !0), bClearOnSend: !0, bShowControlsOnEditing: !1 }), e.on("click", ".message .message-edit", function () {
            var a = $(this).closest(".message").data("message"),
                e = d.getComment(a);b.showEditMessage(e.getText(), { onEdit: function onEdit(b, d, e) {
                c.onEdited && c.onEdited(b, a, d, e);
              }, onDelete: function onDelete(b, d) {
                c.onDeleted && c.onDeleted(a, b, d);
              } });
          }), setInterval(function () {
            e.find(".message .meta .date").each(function () {
              var b = $(this),
                  c = moment(b.data("date"));b.text(a.Util.naturalDate(c));
            });
          }, 6e4), c.onAdded && c.onAdded(e, f);
        } });
    }, b.prototype.setHeaderLeftContent = function (b) {
      var c = this.$panel.find(".panel-header-left");c.html(b), a.Global.viewLoaded(c);
    }, b.prototype.getActiveTabName = function () {
      return this.tabsId ? this.$panel.find('.tab-content.active[data-tabs="' + this.tabsId + '"]').data("tab") : null;
    }, b.prototype.hasActiveTab = function () {
      return !(!this.tabsId || !this.$panel.find('.tab-content.active[data-tabs="' + this.tabsId + '"]').length);
    }, b.prototype.close = function () {
      if (b.closePanel(this.$container), this.isOpen = !1, this.options.tabs) for (var a in this.options.tabs) {
        this.options.tabs.hasOwnProperty(a) && this.options.tabs[a].removeClass("active");
      }this.options.onClosed && this.options.onClosed();
    }, b.prototype.open = function (a, c) {
      var d = this;b.openPanel(this.$container);var e = this.isOpen ? 0 : 350;this.isOpen = !0, this.options.onOpen && this.options.onOpen();var f = function f(a) {
        a ? d.$panel.find('.tabbar[data-tabs="' + d.tabsId + '"] .tab[data-tab="' + a + '"]').trigger("activate") : d.tabsId && !d.hasActiveTab() && d.$panel.find('.tabbar[data-tabs="' + d.tabsId + '"] .tab').first().trigger("activate"), c && setTimeout(function () {
          c();
        }, e);
      };this.loaded ? f(a) : this.onLoaded = function () {
        f(a);
      };
    }, b.prototype.loading = function (a) {
      this.loaded = !a, this.$panel.toggleClass("loading", a);
    }, b.prototype.scrollToBottom = function (a) {
      void 0 === a && (a = 400), this.$panel.find(".panel-content").scrollToBottom(a, "easeOutCubic");
    }, b.prototype.onCommentAdded = function (a) {
      if (this.comments) {
        var b = this.comments.length ? this.comments[this.comments.length - 1] : null;this.comments.push(a), this.displayComments([a], b);
      }
    }, b.prototype.onCommentEdited = function (a) {
      if (this.comments) {
        var c = this,
            d = null;for (var e in this.comments) {
          if (this.comments.hasOwnProperty(e)) {
            if (this.comments[e].comment_id == a.comment_id) {
              this.comments[e] = a;break;
            }d = this.comments[e];
          }
        }var f = b.viewForComments([a], d, c.canEditComments);c.$panel.find('.message[data-message="' + a.comment_id + '"]').replaceWith(f), b.messagesViewLoaded(c.$panel);
      }
    }, b.prototype.onCommentDeleted = function (a) {
      this.onCommentEdited(a);
    }, b.prototype.getComment = function (a) {
      for (var b in this.comments) {
        if (this.comments.hasOwnProperty(b)) {
          var c = this.comments[b];if (c.comment_id == a) return c;
        }
      }return console.warn("Comment not found: " + a), null;
    }, b.prototype.displayComments = function (a, c) {
      if (void 0 === c && (c = null), a.length) {
        var d = b.viewForComments(a, c, this.canEditComments);b.messagesViewLoaded(this.$panel.find(".comments").append(d));
      }
    }, b.prototype.registerPush = function (b) {
      for (var c in b) {
        if (b.hasOwnProperty(c)) {
          var d = b[c];this.oPushHandlerListByTarget[c] = this.oPushHandlerListByTarget[c] || [], this.oPushHandlerListByTarget[c].push(d), a.Push.subscribe(c, d);
        }
      }
    }, b.prototype.unregisterPush = function () {
      for (var b in this.oPushHandlerListByTarget) {
        if (this.oPushHandlerListByTarget.hasOwnProperty(b)) {
          var c = this.oPushHandlerListByTarget[b];for (var d in c) {
            if (c.hasOwnProperty(d)) {
              var e = c[d];a.Push.unsubscribe(b, e);
            }
          }
        }delete this.oPushHandlerListByTarget[b];
      }
    }, b.prototype.unload = function () {
      this.close(), this.$panel.remove(), this.unregisterPush(), b.currentPanel = null;
    }, b.prototype._ensureTabsLayout = function () {
      if (this.tabsId) return this.$panel.find(".tabbar");this.tabsId = "tabs-" + a.Util.uniqueKey();var b = this.$panel.find(".panel-header");b.addClass("has-tabbar");var c = $('<div class="tabbar" data-tabs="' + this.tabsId + '"><div class="tabbar-content"><ul></ul></div></div>');return c.prependTo(b), c;
    }, b.getPanel = function (a) {
      return b.currentPanel && b.currentPanel.id == a ? b.currentPanel : null;
    }, b.openPanel = function (a) {
      b.panelIsOpen(a) || (a.addClass("panel-open"), $(".panel-root").trigger("open"));
    }, b.closePanel = function (a) {
      b.panelIsOpen(a) && (a.removeClass("panel-open"), $(".panel-root").trigger("closed"));
    }, b.panelIsOpen = function (a) {
      return a.hasClass("panel-open");
    }, b.isPanelOpen = function () {
      return b.currentPanel && b.currentPanel.isOpen;
    }, b.resetPanel = function () {
      $(".panel-root").remove(), b.currentPanel = null;
    }, b.showEditMessage = function (b, c) {
      var d = a.Templates.Chat.editMessage({ content: b, can_delete: !!c.onDelete });a.Popup.popup(d, { onShown: function onShown(b) {
          var d = b.find("textarea");if (c.oEmojiPicker) {
            var e = c.oEmojiPicker,
                f = b.find('textarea[name="content"]'),
                g = "textarea-" + a.Util.uniqueKey();f.attr("id", g), e.init("#" + g, "#popup-overlay");
          }d.on("keyup", function (c) {
            c.keyCode == a.Keys.escape && a.Popup.hide(b);
          }), d.commentBox({ onSend: function onSend(d, e) {
              d && c.onEdit && c.onEdit(d, b.find(".message-edit"), function () {
                a.Popup.hide(b);
              });
            }, bEnterToSend: !0, bClearOnSend: !1, bHideControls: !0 });var h = d.val();d.val(""), d.val(h), d.commentBox("refresh"), d.focus(), b.on("click", ".message-delete", function () {
            var d = $(this);c.onDelete && c.onDelete(d, function () {
              a.Popup.hide(b);
            });
          }).on("click", ".message-edit", function () {
            d.commentBox("send");
          });
        } });
    }, b.viewForComments = function (b, c, d) {
      void 0 === c && (c = null);var e = "";for (var f in b) {
        if (b.hasOwnProperty(f)) {
          var g = b[f],
              h = !0;c && g.date.diff(c.date) / 1e3 < 180 && c.user_id == g.user_id && (h = !1);var i = { is_mine: g.isMine(), comment_id: g.comment_id, show_meta: h, date: g.date, display_date: g.getNaturalDate(), avatar: a.Util.avatar(g.user_id, { html: !0, tooltip: !0 }), username: Model.User.getUserName(g.user_id), content: g.getText(), can_edit: g.isMine() && !g.deleted && d, can_favorite: !1, edited: g.edited, deleted: g.deleted };e += a.Templates.Global.detail_comments_comment(i), c = g;
        }
      }return e;
    }, b.messagesViewLoaded = function (b) {
      return a.Util.messageViewLoaded(b);
    }, b.prototype.scrollTop = function (a) {
      var b = this.$panel.find(".panel-content");return void 0 !== a && b.scrollTop(a), b.scrollTop();
    }, b.currentPanel = null, b;
  }();a.Panel = b;
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    a[a.IN_PROGRESS = -3] = "IN_PROGRESS", a[a.CALC_ISSUES = -2] = "CALC_ISSUES", a[a.PENDING = -1] = "PENDING", a[a.DONE = 1] = "DONE";
  }(a.PreviewStatus || (a.PreviewStatus = {}));var b = a.PreviewStatus;!function (a) {
    a[a.UNAVAILABLE = 0] = "UNAVAILABLE", a[a.AUTOMATIC = 1] = "AUTOMATIC", a[a.ON_DEMAND = 2] = "ON_DEMAND";
  }(a.PreviewMode || (a.PreviewMode = {}));a.PreviewMode;!function (a) {
    a[a.FULLSCREEN = 1] = "FULLSCREEN", a[a.INLINE = 2] = "INLINE";
  }(a.PreviewDisplayMode || (a.PreviewDisplayMode = {}));var c = a.PreviewDisplayMode,
      d = function () {
    function d(b, d) {
      void 0 === d && (d = {}), this.file = b;var e = { $container: $("body"), onClosed: null, onError: null, displayMode: c.FULLSCREEN };this.options = $.extend(e, d), this.fullscreen = this.options.displayMode == c.FULLSCREEN, this.showFullScreenToggle = !!(this.fullscreen && d && d.$container);var f = this.options.displayMode == c.FULLSCREEN ? "preview-overlay" : this.options.displayMode == c.INLINE ? "preview-inline" : "";this.$preview = $('<div class="' + f + '"><div class="preview-container"><span class="preview-loading"><i class="fa fa-spinner fa-pulse"></i></span></div></div>');var g = this;switch (this.$preview.on("click", function () {
        g.close();
      }).on("click", ".preview-close", function () {
        g.close();
      }).on("click", ".preview-fullscreen", function () {
        var a = $(this);g.fullscreen ? g.close() : (g.fullscreen = !0, g.$preview.appendTo("body").addClass("preview-overlay").removeClass("preview-inline"), a.find("i").addClass("fa-times").removeClass("fa-arrows-alt"));
      }).on("click", ".toggle-fullscreen", function () {
        g.$preview.toggleClass("fixed");
      }).on("click", ".preview-container", function (a) {
        a.stopImmediatePropagation();
      }), this.file.previewable_previewMode()) {case a.PreviewMode.UNAVAILABLE:
          console.warn("preview unavailable", this.file);break;case a.PreviewMode.AUTOMATIC:
          this.previewURL = this.automaticPreviewURL(), this.automaticPreview();break;case a.PreviewMode.ON_DEMAND:
          this.previewURL = Kore.url("servlet/preview.php?_api_token=" + Kore.getAuthToken() + "&id=" + this.file.previewable_getId() + "&setProjectId=" + this.file.previewable_getProjectId(), !0), this.file.previewable_getPreviewStatus() == a.PreviewStatus.DONE ? this.automaticPreview() : this.onDemandPreview();}
    }return d.prototype.getFileId = function () {
      return this.file.previewable_getId();
    }, d.prototype.open = function () {
      this.options.$container.append(this.$preview);
    }, d.prototype.automaticPreview = function () {
      this.open();var a = d.previewTypeForExtension(this.file.previewable_getExtension());a && $.isFunction(this[a + "Render"]) && this[a + "Render"]();
    }, d.prototype.automaticPreviewURL = function () {
      var a = "servlet/force-download.php?preview=1&_api_token=" + Kore.getAuthToken() + "&id=" + this.file.previewable_getId() + "&doctype=" + this.file.previewable_getDocType();return Kore.url(a, !0);
    }, d.prototype.txtRender = function () {
      var a = this;$.ajax({ method: "GET", url: a.previewURL, success: function success(b) {
          a.renderPreview();var c = $("<pre></pre>").text(b);a.$preview.find(".preview-content").html(c);
        }, dataType: null });
    }, d.prototype.imgRender = function () {
      var a = this,
          b = new Image();b.onload = function () {
        a.renderPreview(), a.$preview.find(".preview-content").empty().html(b);
      }, b.src = this.previewURL;
    }, d.prototype.pdfRender = function () {
      function b(a) {
        l = a, i.$preview.find(".preview-container").toggleClass("rendering", a);
      }function c(a) {
        b(!0), j.getPage(a).then(function (a) {
          var d = a.getViewport(n);o.height = d.height, o.width = d.width;var e = { canvasContext: p, viewport: d };a.render(e).promise.then(function () {
            b(!1), null !== m && (c(m), m = null);
          });
        }), i.$preview.find(".preview-page-num").text(k), i.$preview.find(".preview-container").scrollTop(0);
      }function d(a) {
        l ? m = a : c(a);
      }function e() {
        k <= 1 || (k--, d(k));
      }function f() {
        k >= j.numPages || (k++, d(k));
      }function g(a) {
        i.renderPreview(), i.$preview.find(".preview-content").html('<canvas class="pdf-render"></canvas>'), o = i.$preview.find(".pdf-render").get(0), p = o.getContext("2d"), j = a, i.$preview.find(".preview-header table tr").first().prepend('<td class="nowrap"><button class="control-light preview-prev"><i class="fa fa-fw fa-angle-left"></i></button><button class="control-light preview-next"><i class="fa fa-fw fa-angle-right"></i></button><span class="icon-right"><span class="tag"><span class="preview-page-num"></span>/<span class="preview-page-count"></span></span></span></td>'), i.$preview.find(".preview-page-count").text(j.numPages), c(k);
      }var h = this.previewURL,
          i = this,
          j = null,
          k = 1,
          l = !1,
          m = null,
          n = 1.2,
          o = null,
          p = null;PDFJS.workerSrc = a.Global.urlStatic("scripts/lib.worker.js"), i.$preview.on("click", ".preview-prev", e), i.$preview.on("click", ".preview-next", f), PDFJS.getDocument(h).then(g);
    }, d.prototype.renderPreview = function () {
      var a = "",
          b = "";switch (this.options.displayMode) {case c.FULLSCREEN:
          a = "preview-close", b = "fa-times";break;case c.INLINE:
          a = "preview-fullscreen", b = "fa-arrows-alt";}this.$preview.find(".preview-container").html('<div class="preview-header"><table><tr><td class="full-width"><span class="file-name word-wrap">' + this.file.previewable_getName() + '</span></td><td class="min nowrap">' + (this.showFullScreenToggle ? '<button type="button" class="control-light toggle-fullscreen icon-left"><i class="fa fa-fw fa-arrows-alt"></i></button>' : "") + '<button class="control-light ' + a + '"><i class="fa fa-fw ' + b + '"></i></button></td></tr></table></div><div class="preview-content"></div>');var d = this.$preview.find(".preview-header");this.$preview.find(".preview-container").scroll(function (a) {
        var b = $(this),
            c = b.scrollTop();d.css("top", c + "px");
      });
    }, d.prototype.onDemandPreview = function () {
      console.log("on demand preview");var b = this;this.open(), this.registerForOnDemandPreview(), a.API.Document.previewFile(this.file.previewable_getId(), { onSuccess: function onSuccess(c) {
          var d = new a.API.Document.File.RequestPreviewResponse(c);b.onDemandPreviewStatusChange(d.params.preview);
        }, onError: function onError() {
          return !$.isFunction(b.options.onError) || b.options.onError();
        } });
    }, d.prototype.onDemandPreviewStatusChange = function (c) {
      switch (c) {case "RUNNING":
          this.file.previewable_setPreviewStatus(b.IN_PROGRESS), a.Notifications.notify(a.Global.trans("documents.preview.in_progress"));break;case "OK":
          this.file.previewable_setPreviewStatus(b.DONE), this.automaticPreview();break;case "NOK":
          this.file.previewable_setPreviewStatus(b.CALC_ISSUES), a.Notifications.notifyError(a.Global.trans("documents.preview.error")), this.unregisterForOnDemandPreview(), this.close(), $.isFunction(this.options.onError) && this.options.onError();}
    }, d.prototype.unregisterForOnDemandPreview = function () {
      this.registerForOnDemandPreview(!1);
    }, d.prototype.registerForOnDemandPreview = function (a) {
      void 0 === a && (a = !0), a ? d.requestsFileIds[this.file.previewable_getId()] = this : delete d.requestsFileIds[this.file.previewable_getId()];
    }, d.prototype.close = function () {
      if (this.options.displayMode == c.INLINE) {
        this.fullscreen = !1, this.$preview.appendTo(this.options.$container).removeClass("preview-overlay").addClass("preview-inline");this.$preview.find(".preview-fullscreen").find("i").removeClass("fa-times").addClass("fa-arrows-alt");
      } else this.$preview.remove(), this.options && $.isFunction(this.options.onClosed) && this.options.onClosed();
    }, d.isOnDemandActive = function () {
      return !!a.Global.conf().app.preview.active;
    }, d.previewTypeForExtension = function (b) {
      if (-1 !== $.inArray(b, a.Preview.getAvailableExtensionsForOnDemandPreview())) return "pdf";var c = d.getAvailableExtensionsForAutomaticPreviewByType();for (var e in c) {
        if (-1 !== $.inArray(b, c[e])) return e;
      }return null;
    }, d.getAvailableExtensionsForPreview = function () {
      return d.getAvailableExtensionsForAutomaticPreview().concat(d.getAvailableExtensionsForOnDemandPreview());
    }, d.getAvailableExtensionsForAutomaticPreviewByType = function () {
      return a.Global.conf().app.extensionsForAutomaticPreview;
    }, d.getAvailableExtensionsForAutomaticPreview = function () {
      var a = d.getAvailableExtensionsForAutomaticPreviewByType(),
          b = [];for (var c in a) {
        b = b.concat(a[c]);
      }return b;
    }, d.getAvailableExtensionsForOnDemandPreview = function () {
      return a.Global.conf().app.extensionsForOnDemandPreview;
    }, d.onPreviewStatusChange = function (a) {
      var b = null;a.file && a.file.id && (b = a.file.id);var c = d.requestsFileIds[b];if (c) {
        var e = a.preview;c.onDemandPreviewStatusChange(e);
      }
    }, d.requestsFileIds = {}, d;
  }();a.Preview = d;
}(App || (App = {}));var App;!function (a) {
  var b = function () {
    function b(a, b) {
      this.selection = null, this.$filterInput = null, b && (this.aEntries = b), this.oOptions = a, this.constructTree();
    }return b.prototype.constructTree = function () {
      this.$tree || (this.$tree = $(this.oOptions.layoutView(this)), this.oOptions.headerView && this.$tree.find("thead").html(this.oOptions.headerView(this)), this.$loadingView = $('<div class="tree-loading hidden"><i class="fa fa-spinner fa-pulse"></i></div>'), this.$tree.append(this.$loadingView), this.oOptions.emptyView && (this.$emptyView = $(this.oOptions.emptyView(this)), this.$tree.append(this.$emptyView), this.toggleEmptyView(!1)), this.setSorting(), this.refreshData(), a.Global.viewLoaded(this.$tree), this.bind(), this.oOptions.loaded && this.oOptions.loaded(this.$tree, this));
    }, b.prototype.sortData = function () {
      this.sortEntries(), this.setSorting(), this.refreshData();
    }, b.prototype.setSorting = function () {
      var a = this.oOptions.sortCriteria,
          b = this.oOptions.sortOrder;this.$tree.find("th[data-sort]").removeClass("sortable-active").filter('[data-sort="' + a + '"]').addClass("sortable-active").attr("data-sort-order", b);
    }, b.prototype.refreshData = function () {
      var b = this.$tree.find(".tree-body");if (b.empty(), this.aEntries && !this.aEntries.length) this.toggleEmptyView(!0);else {
        var c = "";for (var d in this.aEntries) {
          this.aEntries.hasOwnProperty(d) && (c += this.oOptions.entryView(this, this.aEntries[d]));
        }b.append(c), c && (a.Global.viewLoaded(b), this.oOptions.onEntriesDisplayed && this.oOptions.onEntriesDisplayed(this)), this.toggleEmptyView(!1);
      }
    }, b.prototype.load = function (a) {
      this.aEntries || this.reload(a);
    }, b.prototype.reload = function (a) {
      var b = this;this.oOptions.getEntries && (this.loading(!0), this.oOptions.getEntries(this, function (c) {
        b.setEntries(c), b.refreshData(), b.loading(!1), b.selection && b.selection.update(), a && a();
      }));
    }, b.prototype.loading = function (a) {
      this.$loadingView.toggleClass("hidden", !a), this.$tree.find(".tree").toggleClass("hidden", a);
    }, b.prototype.toggleEmptyView = function (a) {
      if (this.$emptyView) {
        this.$emptyView.toggleClass("hidden", !a);this.$tree.find(".tree").toggleClass("hidden", a);
      }
    }, b.prototype.getEntries = function () {
      return this.aEntries;
    }, b.prototype.getEntry = function (a) {
      for (var b in this.aEntries) {
        if (this.aEntries.hasOwnProperty(b)) {
          var c = this.aEntries[b];if (c.entry_getId() == a) return c;
        }
      }return console.warn("Entry not found for id: " + a), null;
    }, b.prototype.setEntries = function (a) {
      if (!a) return void (this.aEntries = null);this.aEntries = a, this.sortEntries();
    }, b.prototype.sortEntries = function () {
      var a = this,
          b = this.oOptions.sortCriteria,
          c = this.oOptions.sortOrder;this.aEntries = this.aEntries.sort(function (d, e) {
        return a.oOptions.onSortEntries(d, e, b, c);
      });
    }, b.prototype.empty = function () {
      for (var a in this.aEntries) {
        if (this.aEntries.hasOwnProperty(a)) {
          var b = this.aEntries[a],
              c = b.entry_getId();this.removeEntry(c);
        }
      }
    }, b.prototype.bind = function () {
      var b = this;this.$tree.on("click", ".tree th[data-sort]", function () {
        var c = $(this);c.is(".sortable-active") ? b.oOptions.sortOrder = b.oOptions.sortOrder == a.TreeSortOrder.ASC ? a.TreeSortOrder.DESC : a.TreeSortOrder.ASC : b.oOptions.sortCriteria = c.data("sort"), b.sortData();
      }).on("click", ".tree-row", function (a) {
        var c = $(this).data("entry"),
            d = b.getEntry(c);d && b.oOptions.onEntryClicked && b.oOptions.onEntryClicked(d, a);
      }), a.Global.viewLoaded(this.$tree);
    }, b.prototype.removeEntry = function (b, c) {
      var d = this.indexOfEntryForId(b);-1 !== d ? (a.Util.arrayRemove(this.aEntries, d, !0), this.$tree.find('.tree-row[data-entry="' + b + '"]').remove(), this.selection && this.selection.update(), !1 !== c && this.oOptions.onEntryRemoved && this.oOptions.onEntryRemoved(b), this.aEntries && this.aEntries.length || this.refreshData()) : console.warn("did not found entry " + b + " in tree", this);
    }, b.prototype.indexOfEntryForId = function (a) {
      for (var b in this.aEntries) {
        if (this.aEntries.hasOwnProperty(b)) {
          var c = this.aEntries[b];if (c.entry_getId() == a) return parseInt(b, 10);
        }
      }return -1;
    }, b.prototype.addEntry = function (b, c) {
      this.aEntries.push(b), this.setEntries(this.aEntries);var d = this.indexOfEntryForId(b.entry_getId()),
          e = $(this.oOptions.entryView(this, b));return e.insertAtIndex(this.$tree.find(".tree-body").first(), d, ".tree-row"), a.Global.viewLoaded(e), this.toggleEmptyView(!1), this.oOptions.onEntriesDisplayed && this.oOptions.onEntriesDisplayed(this), a.Util.didAdd(e, null, 2e3), c && e[0].scrollIntoView(), e;
    }, b.prototype.getEntryViewForId = function (a) {
      var b = this.$tree.find('.tree-row[data-entry="' + a + '"]');return b.length ? b : null;
    }, b.prototype.getSelection = function () {
      if (!this.selection) return console.warn("Tree does not have selection option"), null;var a = this.selection,
          b = a.getSelected(),
          c = [];return b.each(function (a, b) {
        var d = $(b),
            e = d.closest(".tree-row");c.push(parseInt(e.data("entry"), 10));
      }), c;
    }, b.prototype.selectEntryView = function (a, b) {
      if (!this.selection) return console.warn("Tree does not have selection option"), null;this.selection.select(a.find('input[type="checkbox"]'), b);
    }, b.prototype.toggleEntrySelection = function (a, b) {
      if (!this.selection) return console.warn("Tree does not have selection option"), null;var c = a.find('input[type="checkbox"]');this.selection.onCheckboxClicked(c, !c.is(":checked"), b);
    }, b.prototype.selectEntryForId = function (a, b) {
      var c = this.getEntryViewForId(a);c && this.selectEntryView(c, b);
    }, b.prototype.toggleSelectionForEntryId = function (a, b) {
      var c = this.getEntryViewForId(a);c && this.toggleEntrySelection(c, b);
    }, b.prototype.setFilter = function (a) {
      var b = this;this.$filterInput = a, this.$filterInput.on("keyup", function () {
        var a = $.trim($(this).val());b.applyFilter(a);
      });
    }, b.prototype.applyFilter = function (b) {
      this.$filterInput && $.trim(this.$filterInput.val()) != b && this.$filterInput.val(b), a.Util.updateSearchFilterForList(b, this.$tree, ".tree-row", !1);
    }, b;
  }();a.TableController = b;
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    a[a.ASC = 0] = "ASC", a[a.DESC = 1] = "DESC";
  }(a.TreeSortOrder || (a.TreeSortOrder = {}));var b = a.TreeSortOrder,
      c = function () {
    function c(c, d) {
      this.oOptions = {}, this.aTrees = [], this.$filterInput = null, this.treeBox = null, this.oDefaults = { iAnimationDuration: 400, sAnimationEasing: "easeOutExpo", iParallaxOffset: 10 }, this.sHightlightClass = "highlighted", this.$container = c, this.oOptions = d;var e = $(d.breadcrumbTemplate()),
          f = $('<div class="tree-controller"></div>');this.$breadcrumb = e, this.$trees = f, this.$container.append(this.$breadcrumb), a.Global.viewLoaded(this.$breadcrumb), this.$container.append(this.$trees);var g = this;this.oOptions.$treeBox && (this.treeBox = new a.WimiTree(this.oOptions.$treeBox, { itemMode: a.ITreeBoxItemMode.DIRECTORY, selectionMode: a.ITreeBoxSelectionMode.DIRECTORY, multipleSelection: !1, rootName: a.Global.project().name, onItemSelectionChanged: function onItemSelectionChanged(a, b, c) {
          if (b) {
            var d = g.treeBox.getPathTreeBoxItemsFromItemView(a),
                e = d.map(function (a) {
              return { dir_id: a.ref, name: a.name };
            });g.ensureTreePath(e, c);
          }
        }, onItemsDisplayed: function onItemsDisplayed(a) {
          g.oOptions.onTreeBoxItemsDisplayed && g.oOptions.onTreeBoxItemsDisplayed(a);
        }, onItemRendered: function onItemRendered(a, b) {
          g.oOptions.onTreeBoxItemRendered && g.oOptions.onTreeBoxItemRendered(a, b);
        } })), this.$container.on("click", ".tree-pop", function () {
        g.popTree();
      }).on("click", ".tree th[data-sort]", function () {
        var a = $(this);a.is(".sortable-active") ? (g.oOptions.sortOrder = g.oOptions.sortOrder == b.ASC ? b.DESC : b.ASC, g.oOptions.onSortOrderChanged && g.oOptions.onSortOrderChanged(g.oOptions.sortOrder)) : (g.oOptions.sortCriteria = a.data("sort"), g.oOptions.onSortCriteriaChanged && g.oOptions.onSortCriteriaChanged(g.oOptions.sortCriteria));for (var c in g.aTrees) {
          g.aTrees.hasOwnProperty(c) && g.aTrees[c].sortData();
        }
      }), this.$breadcrumb.on("click", ".breadcrumb-item", function () {
        var a = $(this).data("directory");g.popTo(a, !1, !0);
      });
    }return c.prototype.setFilter = function (a) {
      var b = this;this.$filterInput = a, this.$filterInput.on("keyup", function () {
        var a = $(this).val();b.applyFilter(a);
      });
    }, c.prototype.resetFilterValue = function () {
      this.$filterInput && (this.$filterInput.val(""), this.applyFilter(null));
    }, c.prototype.applyFilter = function (a) {
      this.$filterInput && this.$filterInput.val() != a && this.$filterInput.val(a), this.getLastTree().applyFilter(a);
    }, c.prototype.getLastTree = function () {
      return this.aTrees.length ? this.aTrees[this.aTrees.length - 1] : null;
    }, c.prototype.push = function (a, b, c) {
      var d = this;if (a.oParentTree) {
        var e = b ? 0 : this.oDefaults.iAnimationDuration;a.oParentTree.onBeforePop(), this.resetFilterValue();var f = a.oParentTree ? a.oParentTree.$tree : null;a.$tree.css({ left: "10%", right: "-10%", opacity: 0 }), this.$trees.append(a.$tree), f.height() < a.$tree.height() && this.$trees.height(a.$tree.height()), f.animate({ left: "-" + this.oDefaults.iParallaxOffset + "%", right: this.oDefaults.iParallaxOffset + "%", opacity: 0 }, e, this.oDefaults.sAnimationEasing), a.$tree.animate({ left: "0%", right: "0%", opacity: 1 }, e, this.oDefaults.sAnimationEasing, function () {
          f.detach(), d.$trees.height(a.$tree.height());
        });
      } else this.$trees.html(a.$tree).height(a.$tree.height());return this.$breadcrumb.find(".tree-breadcrumb-items").append('<a href="#" class="breadcrumb-item" data-directory="' + a.oFolder.dir_id + '">' + a.oFolder.name + "</a>"), this.oOptions.onBreadcrumbChanged && this.oOptions.onBreadcrumbChanged(this.$breadcrumb), this.aTrees.push(a), this.onTreeDidAppear(a, c), a;
    }, c.prototype.popTree = function () {
      var a = this.getLastTree();if (!a.oParentTree) return console.warn("Can't pop root tree !");this.popTo(a.oParentTree.oFolder.dir_id, !1, !0);
    }, c.prototype.popTo = function (a, b, c, d) {
      var e = this,
          f = this.getLastTree(),
          g = b ? 0 : this.oDefaults.iAnimationDuration;if (!f.oParentTree) return console.warn("Can't pop root tree !");if (f.oFolder.dir_id == a) return console.warn("Trying to pop tree to current tree");f.onBeforePop(), this.resetFilterValue();for (var h = f.oParentTree; h.oFolder.dir_id != a;) {
        this.$breadcrumb.find('.breadcrumb-item[data-directory="' + h.oFolder.dir_id + '"]').remove(), this.aTrees.pop(), h = h.oParentTree;
      }var i = h.$tree;i.css({ left: "-" + this.oDefaults.iParallaxOffset + "%", right: this.oDefaults.iParallaxOffset + "%", opacity: 0 }), this.$trees.prepend(i), i.height() > f.$tree.height() && this.$trees.height(i.height()), f.$tree.animate({ left: this.oDefaults.iParallaxOffset + "%", right: "-" + this.oDefaults.iParallaxOffset + "%", opacity: 0 }, g, this.oDefaults.sAnimationEasing), i.animate({ left: "0%", right: "0%", opacity: 1 }, g, this.oDefaults.sAnimationEasing, function () {
        f.$tree.remove(), e.$trees.height(i.height());
      }), this.aTrees.pop(), this.$breadcrumb.find('.breadcrumb-item[data-directory="' + f.oFolder.dir_id + '"]').remove(), this.oOptions.onBreadcrumbChanged && this.oOptions.onBreadcrumbChanged(this.$breadcrumb), this.onTreeDidAppear(h, c, d);
    }, c.prototype.onTreeDidAppear = function (a, b, c) {
      var d = this;$("body").animate({ scrollTop: 0 }, this.oDefaults.iAnimationDuration, this.oDefaults.sAnimationEasing), b && a.load(c), this.treeBox && this.treeBox.ensurePathIds(a.getPathIds(), function () {
        d.treeBox.selectDirectory(a.oFolder.dir_id, !1);
      }), this.oOptions.onTreeDidAppear && this.oOptions.onTreeDidAppear(a);
    }, c.prototype.ensureTreePath = function (a, b) {
      for (var c = null, d = 0; a.length;) {
        var e = a[0],
            f = e.dir_id;if (!this.aTrees[d] || this.aTrees[d].oFolder.dir_id != f) break;c = this.aTrees[d], a.shift(), d++;
      }if (!c) return console.warn("Cannot ensure path, root folders dont match", a, this.aTrees), !1;var g = a.length,
          h = this.getLastTree().oFolder.dir_id != c.oFolder.dir_id;if (h) {
        var i = !g,
            j = !g;this.popTo(c.oFolder.dir_id, !i, j, j ? b : null);
      }g && this.pushFolders(a, !h, b), g || h || b && b();
    }, c.prototype.pushFolders = function (a, b, c) {
      for (; a.length;) {
        var d = a.shift(),
            e = this.oOptions.treeFor(d),
            f = b && 0 == a.length;this.push(e, !f);
      }this.getLastTree().load(c);
    }, c.prototype.empty = function () {
      var a = this.aTrees[0];this.popTo(a.oFolder.dir_id), a.empty();
    }, c.prototype.getFile = function (a, b) {
      for (var c in this.aTrees) {
        if (this.aTrees.hasOwnProperty(c)) {
          var d = this.aTrees[c];for (var e in d.aFiles) {
            if (d.aFiles.hasOwnProperty(e)) {
              var f = d.aFiles[e];if (f.file_id == a) return $.isFunction(b) ? b(f, d) : { file: f, tree: d };
            }
          }
        }
      }return console.warn("file not found", a), $.isFunction(b) ? b(null, null) : { file: null, tree: null };
    }, c.prototype.getDirectory = function (a, b) {
      for (var c in this.aTrees) {
        if (this.aTrees.hasOwnProperty(c)) {
          var d = this.aTrees[c];for (var e in d.aDirectories) {
            if (d.aDirectories.hasOwnProperty(e)) {
              var f = d.aDirectories[e];if (f.dir_id == a) return $.isFunction(b) ? b(f, d) : { directory: f, tree: d };
            }
          }
        }
      }return console.warn("directory not found", a), $.isFunction(b) ? b(null, null) : { directory: null, tree: null };
    }, c.prototype.getFileView = function (a) {
      var b = this.$trees.find('.tree-row[data-file="' + a + '"]').first();return b.length ? b : null;
    }, c.prototype.getDirectoryView = function (a) {
      var b = this.$trees.find('.tree-row[data-directory="' + a + '"]').first();return b.length ? b : null;
    }, c.prototype.getCurrentFolder = function () {
      return this.getLastTree().oFolder;
    }, c.prototype.getTree = function (a) {
      a = a || 0;for (var b in this.aTrees) {
        if (this.aTrees.hasOwnProperty(b)) {
          var c = this.aTrees[b];if (c.oFolder.dir_id == a) return c;
        }
      }return console.warn("tree not found for directory id: " + a), null;
    }, c.prototype.highlightFile = function (a, b) {
      var c = this.getFileView(a);this.highlightEntry(c, b);
    }, c.prototype.highlightDirectory = function (a, b) {
      var c = this.getDirectoryView(a);this.highlightEntry(c, b);
    }, c.prototype.highlightEntry = function (a, b) {
      this.$trees.find(".tree-row." + this.sHightlightClass).removeClass(this.sHightlightClass), a && (a.addClass(this.sHightlightClass), b && a[0].scrollIntoView());
    }, c.prototype.getHighlightedEntry = function () {
      var a = this.getLastTree().$tree.find(".tree-row." + this.sHightlightClass);return a.length ? a : null;
    }, c.prototype.getSiblingHighlightedEntry = function (a, b) {
      var c = this.getHighlightedEntry(),
          d = c && c[a ? "next" : "prev"](".tree-row").length ? c[a ? "next" : "prev"](".tree-row") : this.getLastTree().$tree.find(".tree-row")[a ? "first" : "last"]();d.length && this.getEntryFromView(d, function (a, c) {
        b(d, a, c);
      });
    }, c.prototype.getPrevHighlightedEntry = function (a) {
      this.getSiblingHighlightedEntry(!1, a);
    }, c.prototype.getNextHighlightedEntry = function (a) {
      this.getSiblingHighlightedEntry(!0, a);
    }, c.prototype.getEntryFromView = function (a, b) {
      if (a.is(".tree-file")) {
        var c = a.data("file");this.getFile(c, function (a) {
          b(a, !1);
        });
      } else if (a.is(".tree-directory")) {
        var d = a.data("directory");this.getDirectory(d, function (a) {
          b(a, !0);
        });
      }
    }, c.prototype.addFile = function (a, b) {
      var c = a.dir_id,
          d = this.getTree(c);d && d.addFile(a, b);
    }, c.prototype.removeFile = function (a) {
      this.getFile(a, function (b, c) {
        c && c.removeFile(a);
      });
    }, c.prototype.addDirectory = function (b, c) {
      var d = this.getTree(c);if (d && d.addDirectory(b), this.treeBox) {
        var e = a.WimiTree.directoriesToItems([b]);this.treeBox.addItems(e, c);
      }
    }, c.prototype.removeDirectory = function (b) {
      this.getDirectory(b, function (a, c) {
        c && c.removeDirectory(b);
      }), this.treeBox && this.treeBox.removeItems([b], a.ITreeBoxItemType.DIRECTORY);
    }, c.prototype.getDirectoryForUpdate = function (a, b, c, d) {
      if (this.getDirectory(a, function (a, d) {
        a && (b && b(a), c && c(d, a));
      }), this.treeBox) {
        var e = this.treeBox.getOriginalDirectoryItem(a);e && (b && b(e), this.treeBox.setOriginalDirectoryItem(e, a)), d && d(this.treeBox, e);
      }
    }, c.prototype.reload = function (a) {
      var b = this.getLastTree();b && b.reload(a);
    }, c.prototype.onTreeReload = function (b, c, d) {
      if (this.treeBox && (c.length && this.treeBox.removeItems(c, a.ITreeBoxItemType.DIRECTORY), d.length)) {
        var e = a.WimiTree.directoriesToItems(d);this.treeBox.addItems(e, b.oFolder.dir_id);
      }
    }, c;
  }();a.TreeController = c;var d = function () {
    function b(a, b, c, d, e) {
      this.oOptions = {}, this.selection = null, this.oParentTree = a.getLastTree(), this.oController = a, this.oFolder = d, this.setDirectories(b), this.setFiles(c), this.oOptions = e, this.constructTree();
    }return b.prototype.constructTree = function () {
      this.$tree || (this.$tree = $(this.oOptions.layoutView(this)), this.oOptions.headerView && this.$tree.find("thead").html(this.oOptions.headerView(this)), this.$loadingView = $('<div class="tree-loading hidden"><i class="fa fa-spinner fa-pulse"></i></div>'), this.$tree.append(this.$loadingView), this.oOptions.emptyView && (this.$emptyView = $(this.oOptions.emptyView(this)), this.$tree.append(this.$emptyView), this.toggleEmptyView(!1)), this.setSorting(), this.refreshData(), a.Global.viewLoaded(this.$tree), this.bind(), $.isFunction(this.oOptions.loaded) && this.oOptions.loaded(this.$tree));
    }, b.prototype.sortData = function () {
      this.sortFiles(), this.sortDirectories(), this.setSorting(), this.refreshData();
    }, b.prototype.setSorting = function () {
      var a = this.oController.oOptions.sortCriteria,
          b = this.oController.oOptions.sortOrder;this.$tree.find("th[data-sort]").removeClass("sortable-active").filter('[data-sort="' + a + '"]').addClass("sortable-active").attr("data-sort-order", b);
    }, b.prototype.refreshData = function () {
      var b = this.oParentTree ? this.oParentTree.oFolder : null,
          c = this.$tree.find(".tree-body");if (c.empty(), this.oOptions.parentView && b && c.append(this.oOptions.parentView(this)), this.aDirectories && !this.aDirectories.length && this.aFiles && !this.aFiles.length) this.toggleEmptyView(!0);else {
        var d = "";for (var e in this.aDirectories) {
          this.aDirectories.hasOwnProperty(e) && (d += this.oOptions.directoryView(this, this.aDirectories[e]));
        }for (var e in this.aFiles) {
          this.aFiles.hasOwnProperty(e) && (d += this.oOptions.fileView(this, this.aFiles[e]));
        }c.append(d), d && (a.Global.viewLoaded(c), this.oOptions.onEntriesDisplayed && this.oOptions.onEntriesDisplayed(this)), this.toggleEmptyView(!1);
      }
    }, b.prototype.load = function (a) {
      this.aFiles || this.aDirectories || this.reload(a, !0);
    }, b.prototype.reload = function (a, b) {
      void 0 === b && (b = !1);var c = this;if (this.oOptions.getEntries) {
        var d = c.aDirectories;this.loading(!0), this.oOptions.getEntries(this, function (e, f, g) {
          c.setFiles(e), c.setDirectories(f), g && (c.oFolder = g), c.refreshData(), c.loading(!1);var h = {};for (var i in d) {
            if (d.hasOwnProperty(i)) {
              var j = d[i];h[j.dir_id] = j;
            }
          }var k = {};for (var i in f) {
            if (f.hasOwnProperty(i)) {
              var j = f[i];k[j.dir_id] = j;
            }
          }var l = [];for (var m in k) {
            k.hasOwnProperty(m) && (h.hasOwnProperty(m) ? delete h[m] : l.push(k[m]));
          }var n = [];for (var m in h) {
            h.hasOwnProperty(m) && n.push(m);
          }b || c.oController.onTreeReload(c, n, l), a && a(e, f, g);
        });
      }
    }, b.prototype.loading = function (a) {
      this.$loadingView.toggleClass("hidden", !a);
    }, b.prototype.toggleEmptyView = function (a) {
      this.$emptyView.toggleClass("hidden", !a);
    }, b.prototype.setFiles = function (a) {
      if (!a) return void (this.aFiles = null);this.aFiles = a, this.sortFiles();
    }, b.prototype.setDirectories = function (a) {
      if (!a) return void (this.aDirectories = null);this.aDirectories = a, this.sortDirectories();
    }, b.prototype.sortFiles = function () {
      var a = this,
          b = this.oController.oOptions.sortCriteria,
          c = this.oController.oOptions.sortOrder;this.aFiles = this.aFiles.sort(function (d, e) {
        return a.oController.oOptions.onSortFiles(d, e, b, c);
      });
    }, b.prototype.sortDirectories = function () {
      var a = this,
          b = this.oController.oOptions.sortCriteria,
          c = this.oController.oOptions.sortOrder;this.aDirectories = this.aDirectories.sort(function (d, e) {
        return a.oController.oOptions.onSortDirectories(d, e, b, c);
      });
    }, b.prototype.empty = function () {
      var a = this.aFiles.map(function (a) {
        return a.file_id;
      });for (var b in a) {
        a.hasOwnProperty(b) && this.removeFile(a[b]);
      }var c = this.aDirectories.map(function (a) {
        return a.dir_id;
      });for (var b in c) {
        c.hasOwnProperty(b) && this.removeDirectory(c[b]);
      }
    }, b.prototype.bind = function () {
      var b = this;this.$tree.on("click", ".tree-push", function (a) {
        a.preventDefault(), a.stopPropagation();var c = $(this),
            d = parseInt(c.data("directory") || c.closest("[data-directory]").data("directory")),
            e = b.getDirectory(d),
            f = b.oOptions.onDirectoryPressed;$.isFunction(f) && f(e);
      }).on("click", ".tree-row", function () {
        var a = $(this),
            c = null;if (a.hasClass("tree-file")) {
          var d = parseInt(a.data("file")),
              e = b.getFile(d);c = b.oOptions.onFileRowPressed, $.isFunction(c) && c(e);
        } else if (a.hasClass("tree-directory")) {
          var f = parseInt(a.data("directory")),
              g = b.getDirectory(f);c = b.oOptions.onDirectoryRowPressed, $.isFunction(c) && c(g);
        }
      }).on("click", ".tree-filename.can-press", function (a) {
        a.preventDefault(), a.stopPropagation();var c = parseInt($(this).closest(".tree-row").data("file")),
            d = b.getFile(c),
            e = b.oOptions.onFilePressed;$.isFunction(e) && e(d);
      }), a.Global.viewLoaded(this.$tree);
    }, b.prototype.onBeforePop = function () {
      this.selection && this.selection.deselectAll();
    }, b.prototype.getDirectory = function (a) {
      for (var b in this.aDirectories) {
        if (this.aDirectories.hasOwnProperty(b)) {
          var c = this.aDirectories[b];if (c.dir_id == a) return c;
        }
      }return console.warn("directory not found for id: " + a), null;
    }, b.prototype.getFile = function (a) {
      for (var b in this.aFiles) {
        if (this.aFiles.hasOwnProperty(b)) {
          var c = this.aFiles[b];if (c.file_id == a) return c;
        }
      }return console.warn("oFile not found for id: " + a), null;
    }, b.prototype.removeFile = function (b, c) {
      var d = this.indexOfFile(b);-1 !== d ? (a.Util.arrayRemove(this.aFiles, d, !0), this.$tree.find('.tree-row.tree-file[data-file="' + b + '"]').remove(), this.selection && this.selection.update(), !1 !== c && this.oOptions.onFileRemoved && this.oOptions.onFileRemoved(b), this.aFiles && this.aFiles.length || this.aDirectories && this.aDirectories.length || this.refreshData()) : console.warn("did not found file " + b + " in tree", this);
    }, b.prototype.removeDirectory = function (b) {
      var c = this.indexOfDirectory(b);-1 !== c ? (a.Util.arrayRemove(this.aDirectories, c, !0), this.$tree.find('.tree-row.tree-directory[data-directory="' + b + '"]').remove(), this.selection && this.selection.update(), this.oOptions.onDirectoryRemoved && this.oOptions.onDirectoryRemoved(b), this.aFiles && this.aFiles.length || this.aDirectories && this.aDirectories.length || this.refreshData()) : console.warn("did not found directory " + b + " in tree", this);
    }, b.prototype.indexOfFile = function (a) {
      for (var b in this.aFiles) {
        if (this.aFiles.hasOwnProperty(b) && this.aFiles[b].file_id == a) return parseInt(b, 10);
      }return -1;
    }, b.prototype.indexOfDirectory = function (a) {
      for (var b in this.aDirectories) {
        if (this.aDirectories.hasOwnProperty(b) && this.aDirectories[b].dir_id == a) return parseInt(b, 10);
      }return -1;
    }, b.prototype.getParentFolder = function () {
      return this.oParentTree ? this.oParentTree.oFolder : null;
    }, b.prototype.getParentFolderId = function () {
      var a = this.getParentFolder();return a ? a.dir_id : 0;
    }, b.prototype.addFile = function (b, c) {
      c && this.removeFile(c, !1), this.aFiles.push(b), this.setFiles(this.aFiles);var d = this.indexOfFile(b.file_id),
          e = this.aDirectories.length + d,
          f = $(this.oOptions.fileView(this, b));f.insertAtIndex(this.$tree.find(".tree-body").first(), e, ".tree-row"), a.Global.viewLoaded(f), this.toggleEmptyView(!1), this.oOptions.onEntriesDisplayed && this.oOptions.onEntriesDisplayed(this);
    }, b.prototype.addDirectory = function (b) {
      this.aDirectories.push(b), this.setDirectories(this.aDirectories);var c = this.indexOfDirectory(b.dir_id),
          d = $(this.oOptions.directoryView(this, b));d.insertAtIndex(this.$tree.find(".tree-body").first(), c, ".tree-row"), a.Global.viewLoaded(d), this.toggleEmptyView(!1), this.oOptions.onEntriesDisplayed && this.oOptions.onEntriesDisplayed(this);
    }, b.prototype.getSelection = function () {
      if (!this.selection) return console.warn("Tree does not have selection option"), null;var a = this.selection,
          b = a.getSelected(),
          c = [],
          d = [];return b.each(function (a, b) {
        var e = $(b),
            f = e.closest(".tree-row");f.is(".tree-file") ? c.push(parseInt(f.data("file"), 10)) : f.is(".tree-directory") && d.push(parseInt(f.data("directory"), 10));
      }), { filesId: c, directoriesId: d };
    }, b.prototype.applyFilter = function (b) {
      a.Util.updateSearchFilterForList(b, this.$tree, ".tree-row", !1);
    }, b.prototype.getPathIds = function () {
      var a = [];a.push(this.oFolder.dir_id);var b;for (b = this; b.oParentTree;) {
        b = b.oParentTree, a.push(b.oFolder.dir_id);
      }return a.reverse();
    }, b;
  }();a.Tree = d;
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    a[a.FILE = 0] = "FILE", a[a.DIRECTORY = 1] = "DIRECTORY";
  }(a.ITreeBoxItemType || (a.ITreeBoxItemType = {}));var b = a.ITreeBoxItemType;!function (a) {
    a[a.NONE = 0] = "NONE", a[a.ALL = 1] = "ALL", a[a.FILE = 2] = "FILE", a[a.DIRECTORY = 3] = "DIRECTORY";
  }(a.ITreeBoxSelectionMode || (a.ITreeBoxSelectionMode = {}));var c = a.ITreeBoxSelectionMode;!function (a) {
    a[a.ALL = 0] = "ALL", a[a.FILE = 1] = "FILE", a[a.DIRECTORY = 2] = "DIRECTORY";
  }(a.ITreeBoxItemMode || (a.ITreeBoxItemMode = {}));var d = a.ITreeBoxItemMode,
      e = function () {
    function e(d, e) {
      this.$treeBox = null, this.options = null, this.selection = null, this.selectionEnabled = !0, this.itemsCheckedByDefault = !0, this.bIsLoading = !1, this.loadingQueue = [];var f = this;this.$treeBox = d, this.options = e;var g = "list-" + a.Util.uniqueKey();this.$treeBox.html('<div class="tree-box-loading"><i class="fa fa-spinner fa-pulse"></i></div><ul class="tree-box-list" id="' + g + '"></ul>');var h = { ref: 0, name: this.options.rootName || "Root", type: b.DIRECTORY, originalItem: null };if (this.displayItems([h]), this.options.selectionMode !== c.NONE && this.options.multipleSelection && (this.selection = new a.Util.Selection(this.$treeBox, ".item-selection", { onSelected: function onSelected(a, b) {
          var c = a.closest(".tree-box-item");f.onItemSelectionChanged(c, !0);
        }, onDeselected: function onDeselected(a, b) {
          var c = a.closest(".tree-box-item");f.onItemSelectionChanged(c, !1);
        } })), this.options.withSearchBar) {
        this.$treeBox.prepend('<div class="tree-box-search"><input type="text" class="text-input full-width" placeholder="' + a.Global.trans("rechercher_input") + '"></div>');var i = this.$treeBox.find(".tree-box-search input");i.on("keyup", function () {
          var b = $.trim(i.val());a.Util.updateSearchFilterForList(b, f.$treeBox.find(".tree-box-list"));
        });
      }this.options.withSelectionToggles && this.$treeBox.append('<div class="tree-box-footer"><button type="button" class="control-light checkAll pointer inline-block icon-left" data-check-container="' + g + '" data-check-visible=".tree-box-item > label"><i class="fa fa-check-square icon-left"></i>' + a.Global.trans("tous") + '</button>/<button type="button" class="control-light uncheckAll pointer inline-block icon-right" data-check-container="' + g + '" data-check-visible=".tree-box-item > label"><i class="fa fa-square-o icon-left"></i>' + a.Global.trans("none") + "</button></div>"), a.Util.shadowOnScroll(this.$treeBox.find(".tree-box-list")), this.bind();
    }return e.prototype.onItemDisplayed = function (a, b) {
      this.options.onItemRendered && this.options.onItemRendered(a, b);
    }, e.prototype.onItemSelectionChanged = function (a, b, c) {
      this.options.onItemSelectionChanged && this.options.onItemSelectionChanged(a, b, c);
    }, e.prototype.itemsForDirectoryRef = function (a, b) {
      var c = this;this.bIsLoading = !0, this.options.itemsForDirectoryRef && this.options.itemsForDirectoryRef(a, function (a) {
        c.bIsLoading = !1, b(a);
      });
    }, e.prototype.bind = function () {
      var a = this;this.$treeBox.on("click", ".folding-icon", function () {
        var b = $(this).closest(".tree-box-item");a.toggleDirectoryFolding(b, !b.hasClass("folded"));
      }).on("click", "li.tree-box-item:not(.no-access) > label", function () {
        var b = $(this).closest(".tree-box-item");a.options.multipleSelection || a.selectItem(b.data("ref"), b.data("type"), !0);
      });
    }, e.prototype.toggleDirectoryFolding = function (b, c, d) {
      var e = this;if (c || b.find("ul").length) d && d();else if (this.bIsLoading) this.loadingQueue.push({ directory: b, bFold: c, callback: d });else {
        var f = b.data("ref");this.loadItems(f, function () {
          if (e.loadingQueue.length) {
            var a = e.loadingQueue.shift();e.toggleDirectoryFolding(a.directory, a.bFold, a.callback);
          }d && d();
        });
      }a.TreeBox.toggleDirectoryFolding(b, c);
    }, e.prototype.load = function (a) {
      var c = this,
          d = this.$treeBox.find('li[data-ref="0"][data-type="' + b.DIRECTORY + '"]');this.toggleDirectoryFolding(d, !1, function () {
        c.$treeBox.find(".tree-box-loading").remove(), a && a();
      });
    }, e.prototype.loadItems = function (a, c) {
      var d = this,
          e = this.$treeBox.find('li[data-ref="' + a + '"][data-type="' + b.DIRECTORY + '"]');e.addClass("loading"), this.itemsForDirectoryRef(a, function (b) {
        e.removeClass("loading"), d.displayItems(b, a), c && c();
      });
    }, e.prototype.displayItems = function (c, f) {
      var g = this;this.options.itemMode != d.ALL && (c = c.filter(function (a) {
        return g.options.itemMode == d.DIRECTORY && a.type == b.DIRECTORY || g.options.itemMode == d.FILE && a.type == b.FILE;
      })), c.sort(function (a, c) {
        return a.type == b.DIRECTORY && c.type == b.FILE ? -1 : a.type == b.FILE && c.type == b.DIRECTORY ? 1 : a.name.toLowerCase() > c.name.toLowerCase() ? 1 : -1;
      });var h = void 0 === f,
          i = h ? this.$treeBox.find(".tree-box-list") : this.$treeBox.find('[data-ref="' + f + '"][data-type="' + b.DIRECTORY + '"]'),
          j = i.find("> ul");j.length || (j = $("<ul></ul>").appendTo(i)), j.empty();for (var k = 0; k < c.length; k++) {
        var l = c[k],
            m = $(a.Templates.Global.treeBoxItem({ item: l, can_unfold: this.canUnfoldItem(l) && !h, can_check: this.canSelectItem(l) && this.options.multipleSelection, can_select: this.canSelectItem(l) && !this.options.multipleSelection, checked: this.itemsCheckedByDefault, disabled: !this.selectionEnabled, icon: l.type == b.DIRECTORY ? "folder" : "file-o", is_folded: !h && l.type == b.DIRECTORY, is_dir: l.type == b.DIRECTORY, show_item: !h || h && !!this.options.rootName }));e.setItemInView(m, l), m.appendTo(j), this.onItemDisplayed(m, l);
      }this.$treeBox.find(".tree-box-list").trigger("scroll"), this.options.onItemsDisplayed && this.options.onItemsDisplayed(this);
    }, e.prototype.addItems = function (a, b) {
      if (this.isDirectoryLoaded(b)) {
        var c = this.getDirectoryItems(b);a = a.concat(c), this.displayItems(a, b);
      }this.toggleDirectoryFoldingIcon(b, !1);
    }, e.prototype.removeItems = function (a, b) {
      for (var c in a) {
        if (a.hasOwnProperty(c)) {
          var d = a[c],
              e = this.getItemView(d, b),
              f = e.parents(".tree-box-item").first().data("ref");e.remove(), this.updateDirectoryFolding(f);
        }
      }
    }, e.prototype.renameItem = function (a, b, c) {
      var d = this.getItemView(b, c);if (d) {
        d.find(".item-name").first().text(a);var f = e.getItemFromView(d);f.name = a, e.setItemInView(d, f);
      }
    }, e.prototype.getOriginalDirectoryItem = function (a) {
      var c = this.getItem(a, b.DIRECTORY);return c ? c.originalItem : null;
    }, e.prototype.setOriginalDirectoryItem = function (a, c) {
      var d = this.getItemView(c, b.DIRECTORY);if (d) {
        var f = e.getItemFromView(d);f.originalItem = a, e.setItemInView(d, f);
      }
    }, e.prototype.updateDirectoryFolding = function (a) {
      if (a) {
        var b = this.getDirectoryItems(a);this.toggleDirectoryFoldingIcon(a, !b.length);
      }
    }, e.prototype.toggleDirectoryFoldingIcon = function (a, c) {
      if (a) {
        this.getItemView(a, b.DIRECTORY).find("> .folding-icon").toggleClass("hidden", c);
      }
    }, e.prototype.isDirectoryLoaded = function (a) {
      return !!this.getItemView(a, b.DIRECTORY).find("> ul").length;
    }, e.prototype.getDirectoryItems = function (a) {
      var c = this.getItemView(a, b.DIRECTORY),
          d = c.find("> ul > li"),
          f = [];return d.each(function () {
        f.push(e.getItemFromView($(this)));
      }), f;
    }, e.prototype.ensurePathIds = function (a, c) {
      var d = this;if (!a || !a.length) return void (c && c());var a = a.slice(0),
          e = a.shift(),
          f = this.getItemView(e, b.DIRECTORY);this.toggleDirectoryFolding(f, !1, function () {
        a.length ? d.ensurePathIds(a, c) : c && c();
      });
    }, e.prototype.getPathTreeBoxItemsFromItemView = function (a) {
      var b = [];return a.parents(".tree-box-item").add(a).each(function () {
        var a = $(this),
            c = e.getItemFromView(a);b.push(c);
      }), b;
    }, e.prototype.selectItem = function (a, b, c, d) {
      var f = this.getItemView(a, b);if (!f) return !1;var g = e.getItemFromView(f);if (!this.canSelectItem(g)) return console.warn("cannot select item", g), !1;if (this.options.multipleSelection) this.selection.select(f.find(".item-selection"), null);else {
        var h = this.$treeBox.find(".tree-box-item.selected");h.length && (h.removeClass("selected"), c && this.onItemSelectionChanged(h, !1)), f.addClass("selected"), c && this.onItemSelectionChanged(f, !0, d);
      }
    }, e.prototype.getItemView = function (a, b) {
      var c = this.$treeBox.find('.tree-box-item[data-type="' + b + '"][data-ref="' + a + '"]');return c.length ? c : (console.warn("tree box item not found for ref: " + a + " - type: " + b), null);
    }, e.prototype.getItem = function (a, b) {
      var c = this.getItemView(a, b);return c ? e.getItemFromView(c) : null;
    }, e.prototype.selectDirectory = function (a, c, d) {
      this.selectItem(a, b.DIRECTORY, c, d);
    }, e.prototype.selectFile = function (a, c) {
      this.selectItem(a, b.FILE, c);
    }, e.prototype.toggleSelection = function (a) {
      this.options.selectionMode != c.NONE && (a && this.selectionEnabled || !a && !this.selectionEnabled || (this.selectionEnabled = a, this.$treeBox.find(".item-selection").prop("disabled", !a)));
    }, e.prototype.canUnfoldItem = function (a) {
      return a.type == b.DIRECTORY && (0 !== a.nb_dirs || 0 !== a.nb_files && this.options.itemMode == d.ALL);
    }, e.prototype.canSelectItem = function (a) {
      return this.options.selectionMode == c.ALL || this.options.selectionMode == c.FILE && a.type == b.FILE || this.options.selectionMode == c.DIRECTORY && a.type == b.DIRECTORY;
    }, e.prototype.getSelection = function () {
      if (this.selection) {
        var a = [],
            b = {},
            c = this.selection.getSelected();return console.log("get selected", c), c.each(function () {
          var c = $(this).closest(".tree-box-item"),
              d = e.getItemFromView(c),
              f = c.parents(".tree-box-item");1 == f.data("type") && (b[f.data("ref")] = b[f.data("ref")] || [], b[f.data("ref")].push(d)), a.push(d);
        }), console.log(b), b;
      }return [];
    }, e.toggleDirectoryFolding = function (a, b) {
      a.toggleClass("folded", b), a.find("> .folding-icon").toggleClass("fa-caret-right", b).toggleClass("fa-caret-down", !b), a.find("> .folder-icon").toggleClass("fa-folder", b).toggleClass("fa-folder-open", !b);
    }, e.setItemInView = function (a, b) {
      return a.data("tree-box-item", b);
    }, e.getItemFromView = function (a) {
      return a.data("tree-box-item");
    }, e;
  }();a.TreeBox = e;
}(App || (App = {}));var App;!function (a) {
  var b = function () {
    function a(a) {
      this.options = a, this.members = [], this.dataChannels = {}, this.peerJoinedTimers = {}, this.debug = !0;
    }return a.prototype.init = function (b, c, d, e, f, g) {
      var h = this;h.appId = b, h.appKey = c, h.chromeExtensionId = e, a.onReady(function () {
        if (!BistriConference.isCompatible()) return void (h.options.onIncompatible && h.options.onIncompatible());var b = { appId: h.appId, appKey: h.appKey, userName: d, chromeExtensionId: h.chromeExtensionId, debug: !0 };f && (b.turnServers = f), g && (b.stunServers = g), BistriConference.init(b), BistriConference.signaling.bind("onConnected", function (a) {
          h.log("onConnected", arguments), h.member = { id: a.id, name: d }, h.options.onConnected && h.options.onConnected();
        }), BistriConference.signaling.bind("onError", function (a) {
          h.warn("onError", arguments), h.options.onError && h.options.onError(a);
        }), BistriConference.signaling.bind("onJoinedRoom", function (b) {
          h.log("onJoinedRoom", arguments), a.isScreenRoom(b.room) || (h.roomName = b.room, h.members = b.members, h.options.onJoinedRoom && h.options.onJoinedRoom(h.roomName, h.members), h.joinRoom(a.screenSharingRoomForName(b.room)));
        }), BistriConference.signaling.bind("onJoinRoomError", function (a) {
          h.warn("onJoinRoomError", arguments), h.options.onJoinedRoomError && h.options.onJoinedRoomError({ code: parseInt(a.code), text: a.text });
        }), BistriConference.signaling.bind("onQuittedRoom", function (b) {
          var c = b.room;a.isScreenRoom(c) || (h.log("onQuittedRoom", arguments), h.options.onQuittedRoom && h.options.onQuittedRoom(c));
        }), BistriConference.signaling.bind("onPeerJoinedRoom", function (b) {
          h.log("onPeerJoinedRoom", arguments);var c = b.room,
              d = { id: b.pid, name: b.name };if (a.isScreenRoom(c)) return void (h.screenStream && h.screenStream.active && h._call(c, [d], a.getParamsForStream(h.screenStream, !0)));var e = h.peerJoinedTimers[b.pid];e && clearTimeout(e), e = window.setTimeout(function () {
            h.log("Calling " + b.pid + " because we havent received any stream from this peer"), BistriConference.endCall(b.pid, c), h._call(c, [d], a.getParamsForStream(this.localStream, !1)), delete h.peerJoinedTimers[b.pid];
          }, 5e3), h.peerJoinedTimers[b.pid] = e, h.options.onPeerJoinedRoom && h.options.onPeerJoinedRoom(c, d);
        }), BistriConference.signaling.bind("onPeerQuittedRoom", function (b) {
          h.log("onPeerQuittedRoom", arguments);var c = b.room;if (!a.isScreenRoom(c)) {
            var d = b.pid,
                e = $.inArray(d, h.members.map(function (a) {
              return a.id;
            }));-1 !== e && h.members.splice(e, 1), h.options.onPeerQuittedRoom && h.options.onPeerQuittedRoom(c, d);
          }
        }), BistriConference.signaling.bind("onExtensionInstallStarted", function () {
          h.log("onExtensionInstallStarted", arguments);
        }), BistriConference.signaling.bind("onExtensionInstalled", function () {
          h.log("onExtensionInstalled", arguments);
        }), BistriConference.signaling.bind("onExtensionInstallFailed", function () {
          h.log("onExtensionInstallFailed", arguments);
        }), BistriConference.streams.bind("onStreamAdded", function (a, b) {
          if (h.log("onStreamAdded", arguments), a.room == h.roomName) {
            var c = h.peerJoinedTimers[b];c && (h.log("Clearing join timer for peer " + b + " since we have received a stream"), clearTimeout(c), delete h.peerJoinedTimers[b]);
          }var d = !!a.getVideoTracks().length;h.options.onStreamAdded && h.options.onStreamAdded(a, b, d);
        }), BistriConference.streams.bind("onStreamRemoved", function (a, b) {
          h.log("onStreamRemoved", arguments), h.options.onStreamRemoved && h.options.onStreamRemoved(a, b);
        }), BistriConference.streams.bind("onStreamClosed", function (a, b) {
          h.log("onStreamClosed", arguments), h.options.onStreamClosed && h.options.onStreamClosed(a, b);
        }), BistriConference.streams.bind("onStreamError", function (a) {
          console.warn("WebRTC onStreamError", a), h.options.onStreamError && h.options.onStreamError(a);
        }), BistriConference.channels.bind("onDataChannelCreated", h.onDataChannel.bind(h)), BistriConference.channels.bind("onDataChannelRequested", h.onDataChannel.bind(h)), BistriConference.connect();
      });
    }, a.prototype.joinRoom = function (b) {
      console.log("joinRoom", b), BistriConference.joinRoom(b, a.MAX_ROOM_PARTICIPANTS);
    }, a.prototype.quitRoom = function () {
      this.log("quitRoom", this.roomName), BistriConference.quitRoom(this.roomName), BistriConference.quitRoom(a.screenSharingRoomForName(this.roomName));
    }, a.prototype.getMediaSources = function (a) {
      return BistriConference.getMediaSources(a);
    }, a.prototype.startStream = function (a, b) {
      this.log("startStream", a);var c = this;BistriConference.startStream(a, function (a) {
        c.localStream = a, b(c.localStream);
      });
    }, a.prototype.startScreenSharing = function (a) {
      this.log("startScreenSharing");var b = this;BistriConference.startStream("screen-sharing", function (c) {
        b.screenStream = c, a(b.screenStream);
      });
    }, a.prototype.stopStream = function (a) {
      if (this.log("stopStream", this.localStream), !this.localStream) return this.warn("Trying to stop an undefined stream"), a();BistriConference.stopStream(this.localStream, a);
    }, a.prototype.stopScreenSharing = function (a) {
      if (this.log("stopScreenSharing", this.screenStream), !this.screenStream) return this.warn("Trying to stop an undefined screen stream"), a();BistriConference.stopStream(this.screenStream, a);
    }, a.prototype.attachStream = function (a, b, c) {
      void 0 === c && (c = {}), this.log("attachStream", a), BistriConference.attachStream(a, b, c);
    }, a.prototype.detachStream = function (a) {
      if (this.log("detachStream", a), !a) return void this.warn("Trying to detach an undefined stream");BistriConference.detachStream(a);
    }, a.prototype.call = function (b) {
      var c = b ? a.screenSharingRoomForName(this.roomName) : this.roomName,
          d = a.getParamsForStream(b ? this.screenStream : this.localStream, b);this.log("will call", c, d), this._call(c, this.members, d);
    }, a.prototype.removeStream = function () {
      var a = this.localStream;this._removeStream(a, !1);
    }, a.prototype.removeScreenSharing = function () {
      var a = this.screenStream;this._removeStream(a, !0);
    }, a.prototype.addStream = function () {
      var a = this.localStream;this._addStream(a, this.members, !1);
    }, a.prototype.addScreenSharing = function () {
      var a = this.screenStream;this._addStream(a, this.members, !0);
    }, a.prototype.isMicrophoneMuted = function () {
      return this.log("isMicrophoneMuted"), BistriConference.isMicrophoneMuted();
    }, a.prototype.muteMicrophone = function (a) {
      this.log("muteMicrophone", a), BistriConference.muteMicrophone(a);
    }, a.prototype.muteVideo = function (a) {
      this.localStream && (this.log("muteVideo", a), BistriConference.muteVideo(this.localStream, a));
    }, a.prototype.isScreenSharingCompatible = function () {
      return BistriConference.isScreenSharingCompatible();
    }, a.prototype.getMember = function (a) {
      if (!a) return this.member;for (var b in this.members) {
        if (this.members.hasOwnProperty(b)) {
          var c = this.members[b];if (c.id == a) return c;
        }
      }return console.warn("WebRTC: member not found " + a), null;
    }, a.prototype.getMembers = function (a) {
      var b = a ? [this.getMember()] : [];return b.concat(this.members) || b;
    }, a.prototype.openChatChannel = function () {
      this.log("will openChatChannel");for (var a in this.members) {
        if (this.members.hasOwnProperty(a)) {
          var b = this.members[a];this.log("openChatChannel", b.id), BistriConference.openDataChannel(b.id, "chat", this.roomName);
        }
      }
    }, a.prototype.sendChatMessage = function (a) {
      this.log("will sendChatMessage");var b = this.dataChannels.chat || {};for (var c in b) {
        if (b.hasOwnProperty(c)) {
          var d = b[c];this.log("sendChatMessage", c, a), d.send(a.message);
        }
      }
    }, a.prototype.endCall = function (b, c) {
      this.log("endCall", b, c);var d = c ? a.screenSharingRoomForName(this.roomName) : this.roomName;BistriConference.endCall(b, d);
    }, a.prototype.endCalls = function (b) {
      var c = b ? a.screenSharingRoomForName(this.roomName) : this.roomName;BistriConference.endCalls(c);
    }, a.prototype.monitorAudioActivity = function (a, b) {
      BistriConference.monitorAudioActivity(a, b);
    }, a.prototype.isChromeExtensionInstalled = function () {
      return !!$("#extension-is-installed-" + this.chromeExtensionId).length;
    }, a.prototype.installChromeExtension = function (a, b) {
      this.log("installChromeExtension"), chrome.webstore.install(this.getChromeExtensionURL(), a, b);
    }, a.prototype.getChromeExtensionURL = function () {
      return "https://chrome.google.com/webstore/detail/" + this.chromeExtensionId;
    }, a.prototype.getRemoteStreamsByMember = function (b) {
      var c = BistriConference.getRemoteStreams(this.roomName),
          d = BistriConference.getRemoteStreams(a.screenSharingRoomForName(this.roomName)),
          e = {},
          f = this.getMembers();for (var g in f) {
        if (f.hasOwnProperty(g)) {
          var h = f[g],
              i = !c || !c[h.id] || b && !c[h.id].getVideoTracks().length ? null : c[h.id];i && !i.active && (i = null);var j = d && d[h.id] ? d[h.id] : null;j && !j.active && (j = null), e[h.id] = { stream: i, screenStream: j };
        }
      }return e;
    }, a.prototype._call = function (a, b, c) {
      for (var d in b) {
        if (b.hasOwnProperty(d)) {
          var e = b[d];this.log("call", e.id, a, c), c ? BistriConference.call(e.id, a, c) : BistriConference.call(e.id, a);
        }
      }
    }, a.prototype._log = function (a, b) {
      Array.prototype.unshift.call(b, "WebRTC"), this.debug && console && console[a] && console[a].apply(console, b);
    }, a.prototype.log = function () {
      for (var a = [], b = 0; b < arguments.length; b++) {
        a[b - 0] = arguments[b];
      }this._log("log", arguments);
    }, a.prototype.warn = function () {
      for (var a = [], b = 0; b < arguments.length; b++) {
        a[b - 0] = arguments[b];
      }this._log("warn", arguments);
    }, a.prototype.onDataChannel = function (a, b) {
      var c = this,
          d = a.label;a.onOpen = function () {
        c.dataChannels[d] = c.dataChannels[d] || {}, c.dataChannels[d][b] = this;
      }, a.onMessage = function (a) {
        if ("chat" == d) {
          var e = { message: a.data, member: c.getMember(b), date: moment() };c.options.onChatMessage(e);
        }
      }, a.onClose = function () {
        c.dataChannels && c.dataChannels[d] && c.dataChannels[d][b] && delete c.dataChannels[d][b];
      };
    }, a.prototype._addStream = function (a, b, c) {
      if (c) return this.call(!0);var d = this.roomName;this.log("will addStream", d, b);for (var e in b) {
        if (b.hasOwnProperty(e)) {
          var f = b[e];this.log("addStream", f.id, d), BistriConference.addStream(f.id, d, a);
        }
      }
    }, a.prototype._removeStream = function (a, b) {
      if (!a) return void this.warn("Trying to remove an undefined stream");if (b) return this.endCalls(!0);var c = this.roomName,
          d = this.members;this.log("will removeStream", c, d);for (var e in d) {
        if (d.hasOwnProperty(e)) {
          var f = d[e];this.log("removeStream", f.id, c), BistriConference.removeStream(f.id, c, a);
        }
      }
    }, a.ready = function () {
      a.bReady = !0;for (var b in a.aReadyCallbacks) {
        a.aReadyCallbacks.hasOwnProperty(b) && a.aReadyCallbacks[b]();
      }a.aReadyCallbacks = [];
    }, a.onReady = function (b) {
      a.bReady ? b() : a.aReadyCallbacks.push(b);
    }, a.screenSharingRoomForName = function (a) {
      return "__screen_" + a;
    }, a.isScreenRoom = function (a) {
      return 0 === a.indexOf("__screen_");
    }, a.getParamsForStream = function (a, b) {
      return a ? b ? { sendonly: !0, stream: a } : { stream: a } : null;
    }, a.MAX_ROOM_PARTICIPANTS = 7, a.bReady = !1, a.aReadyCallbacks = [], a;
  }();a.WebRTC = b;
}(App || (App = {})), window.onBistriConferenceReady = App.WebRTC.ready;var BistriConference = window.BistriConference,
    App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getUsers" }, c));
      }function e(c, d, e, f, g, h, i, j) {
        void 0 === j && (j = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "addUser", data: { first_name: c, last_name: d, login: e, role: f, language: g, notif_user: h, message: i || "" } }, j));
      }function f(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "exportUsersRights", download: !0, data: { delimiter: c } }, d));
      }function g(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "exportUsers", download: !0, data: { delimiter: e, file_name: c, format: d } }, f));
      }function h(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "importUsersFromCSV", webdav: !0, file: c }, d));
      }function i(c, d, e) {
        void 0 === e && (e = {});var f = $.extend({}, d);b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "editUser", data: f, objects: { target_user_id: c } }, e));
      }function j(a, b, c, d, e) {
        void 0 === e && (e = {});var f = {};f[c] = d, k(a, b, f, e);
      }function k(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "editUserProjectAuth", data: e, objects: { target_user_id: c, target_project_id: d } }, f));
      }function l(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "addTag", objects: { target_user_id: c, label: d } }, e));
      }function m(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "removeTagByLabel", objects: { target_user_id: c, label: d } }, e));
      }function n(c, d, e) {
        void 0 === e && (e = {});var f = {},
            g = a.Global.modulesToDisplay(!0);for (var h in g) {
          if (g.hasOwnProperty(h)) {
            var i = g[h];f[i.id] = i.auth.length - 1;
          }
        }b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "editUserProjectAuth", data: f, objects: { target_user_id: c, target_project_id: d } }, e));
      }function o(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "deactivateUsers", objects: { user_id_list: c } }, d));
      }function p(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "activateUsers", objects: { user_id_list: c } }, d));
      }function q(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "deleteUsers", objects: { user_id_list: c } }, d));
      }function r(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getUserProjectsAuth", objects: { target_user_id: c } }, d));
      }function s(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "sendInvitation", objects: { target_user_id: c } }, d));
      }function t(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "toggleThirdPartyService", data: { service: c, enable: d } }, e));
      }function u(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.THIRD_PARTY, entity: a.Global.ENTITIES.ZAPIER, action: "generateApiKey" }, c));
      }function v(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "regenerateGeneralPassword" }, c));
      }function w(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getServiceUsers", data: { service: a.Global.ServicesEnum.GOOGLE } }, c));
      }function x(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getGAppsUsers" }, c));
      }function y(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "importGAppsUser", data: { google_id_list: c } }, d));
      }function z(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getBillingInfo", data: { offers: !0, users_stats: !0 } }, c));
      }function A(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "setBillingInfo", data: c }, d));
      }function B(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "addCreditCard", data: { credit_card: c } }, d));
      }function C(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "removeCreditCard", objects: { credit_card_id: c } }, d));
      }function D(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "shouldPerformPayment" }, c));
      }function E(c, d, e, f, g, h, i, j) {
        void 0 === j && (j = {});var k = { total_user_count: d, total_storage: e, months: f, automatic_renewal: h, force_payment: i };g && (k.credit_card = g), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "updateOffer", objects: { offer_id: c }, data: k }, j));
      }c.getUsers = d, c.addUser = e, c.exportUsersRights = f, c.exportUsers = g, c.importUsersFromCSV = h, c.editUser = i, c.editUserProjectAuth = j, c.editUserProjectAuthList = k, c.addUserTag = l, c.removeUserTagByLabel = m, c.addUserProjectAuth = n, c.deactivateUsers = o, c.activateUsers = p, c.deleteUsers = q, c.getUserProjectsAuth = r, c.sendInvitationMail = s, c.toggleThirdPartyService = t, c.generateZapierApiKey = u, c.regenerateGeneralPassword = v, c.listGoogleContact = w, c.listGoogleAppsUsers = x, c.importGoogleAppsUsers = y, c.getBillingInfo = z, c.setBillingInfo = A, c.addCreditCard = B, c.removeCreditCard = C, c.shouldPerformPayment = D, c.updateOffer = E;
    }(b.Account || (b.Account = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d, e) {
        void 0 === d && (d = {}), void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.ACTIVITY, entity: a.Global.ENTITIES.EVENT, action: "getList", objects: { project_id_list: c }, data: d }, e));
      }function e(c, d, e) {
        void 0 === d && (d = {}), void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.ACTIVITY, entity: a.Global.ENTITIES.EVENT, action: "exportAsCSV", download: !0, objects: { project_id_list: c }, data: d }, e));
      }function f(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.ACTIVITY, entity: a.Global.ENTITIES.EVENT, action: "getUnreadCount" }, c));
      }c.getList = d, c.exportAsCSV = e, c.getUnreadCount = f;
    }(b.Activity || (b.Activity = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.COMMUNICATION, entity: a.Global.ENTITIES.AIRTIME, action: "invite", objects: { user_id_list: c }, data: { room_name: d } }, e));
      }function e(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.COMMUNICATION, entity: a.Global.ENTITIES.AIRTIME, action: "join", data: { room_name: c } }, d));
      }function f(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.COMMUNICATION, entity: a.Global.ENTITIES.AIRTIME, action: "decline", data: { room_name: c } }, d));
      }c.invite = d, c.join = e, c.decline = f;
    }(b.AirTime || (b.AirTime = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.AUTH, entity: a.Global.ENTITIES.USER, action: "login", auth: { login: c, password: d }, data: { token: e || null } }, f));
      }c.login = d;
    }(b.Auth || (b.Auth = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "get", project: d.project || a.Global.project().project_id, objects: { calendar_event_id: c } }, d));
      }function e(c, d, e, f, g) {
        void 0 === g && (g = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getList", project: g.project || a.Global.project().project_id, data: { start_date: c, end_date: d, filters: e, view_busy: !!f } }, g));
      }function f(c, d, e, f, g, h) {
        void 0 === h && (h = {});var i = { start_date: c, end_date: d, filters: e };f && (i.project_id_list = f), g && (i.user_id_list = g), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getListUnified", data: i }, h));
      }function g(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "addWimiAttachment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c, file_id: d } }, e));
      }function h(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "addExternalAttachment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: d }, file: c, webdav: !0 }, e));
      }function i(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getAttachmentList", project: d.project || a.Global.project().project_id, objects: { calendar_event_id: c } }, d));
      }function j(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "downloadAttachment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: d, attachment_id: c }, download: !0, webdav: !0 }, e));
      }function k(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "removeWimiAttachment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: d, attachment_id: c } }, e));
      }function l(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "removeExternalAttachment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: d, attachment_id: c } }, e));
      }function m(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "update", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: d }, e));
      }function n(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "update", project: f.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: $.extend({}, e, { recurrence_id: d }) }, f));
      }function o(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "updateProject", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c, target_project_id: d } }, e));
      }function p(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "create", project: d.project || a.Global.project().project_id, data: c }, d));
      }function q(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "remove", project: d.project || a.Global.project().project_id, objects: { calendar_event_id: c } }, d));
      }function r(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "update", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: d }, e));
      }function s(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "update", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: d }, e));
      }function t(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "removeRecurrenceOccurrence", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: { recurrence_id: d } }, e));
      }function u(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getComments", project: d.project || a.Global.project().project_id, objects: { calendar_event_id: c } }, d));
      }function v(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "addComment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c }, data: { comment: d } }, e));
      }function w(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "editComment", project: f.project || a.Global.project().project_id, objects: { calendar_event_id: c, comment_id: d }, data: { comment: e } }, f));
      }function x(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "deleteComment", project: e.project || a.Global.project().project_id, objects: { calendar_event_id: c, comment_id: d } }, e));
      }function y(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getSubscriptionLink", project: a.Global.project().project_id }, c));
      }function z(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.AGENDA, entity: a.Global.ENTITIES.EVENT, action: "getUnifiedSubscriptionLink" }, c));
      }c.getEvent = d, c.getEvents = e, c.getEventsUnified = f, c.addWimiAttachment = g, c.addExternalAttachment = h, c.getAttachments = i, c.downloadAttachment = j, c.removeWimiAttachment = k, c.removeExternalAttachment = l, c.editEvent = m, c.editRecurrenceOccurence = n, c.updateEventProject = o, c.addEvent = p, c.deleteEvent = q, c.makeEventPrivate = r, c.makeEventPublic = s, c.deleteRecurrenceOccurrence = t, c.getEventComments = u, c.eventAddComment = v, c.eventEditComment = w, c.eventDeleteComment = x, c.getSubscriptionLink = y, c.getUnifiedSubscriptionLink = z;
    }(b.Calendar || (b.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "getList" }, c));
      }function e(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "getChat", objects: { chat_id: c } }, d));
      }function f(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "loadMessages", objects: { chat_id: c }, data: { offset: d } }, e));
      }function g(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "create", data: { users: c, use_existing: d } }, e));
      }function h(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "createChannel", project: c }, d));
      }function i(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "editName", objects: { chat_id: c }, data: { name: d } }, e));
      }function j(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "addUsers", objects: { chat_id: c, user_id_list: d } }, e));
      }function k(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "removeUsers", objects: { chat_id: c, user_id_list: d } }, e));
      }function l(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "disable", objects: { chat_id: c } }, d));
      }function m(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "clearUnseen", objects: { chat_id: c } }, d));
      }function n(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "search", objects: { chat_id: c }, data: { search: d } }, e));
      }function o(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "startedTyping", objects: { chat_id: c } }, d));
      }function p(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "canceledTyping", objects: { chat_id: c } }, d));
      }function q(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "postMessage", objects: { chat_id: d }, data: { message: c } }, e));
      }function r(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "editMessage", objects: { chat_id: e }, data: { message_index: d, message: c } }, f));
      }function s(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "deleteMessage", objects: { chat_id: d }, data: { message_index: c } }, e));
      }function t(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: c ? "favoriteMessage" : "unfavoriteMessage", objects: { chat_id: e }, data: { message_index: d } }, f));
      }function u(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "getLinks", objects: { chat_id: c } }, d));
      }function v(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "getFavorites", objects: { chat_id: c } }, d));
      }function w(c, d, e, f, g) {
        void 0 === g && (g = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "addAttachment", objects: { chat_id: f }, data: { attachment_title: d, attachment_description: e }, file: c, webdav: !0 }, g));
      }function x(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "downloadAttachment", objects: { chat_id: d, file_id: c }, download: !0, webdav: !0 }, e));
      }function y(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.CHAT, entity: a.Global.ENTITIES.CHAT, action: "getAttachmentList", objects: { chat_id: c } }, d));
      }c.getChats = d, c.getChat = e, c.loadMessages = f, c.createChat = g, c.createChannel = h, c.editName = i, c.addUsers = j, c.removeUsers = k, c.disbaleChat = l, c.clearUnseen = m, c.search = n, c.startedTyping = o, c.canceledTyping = p, c.postMessage = q, c.editMessage = r, c.deleteMessage = s, c.setFavoriteMessage = t, c.getLinks = u, c.getFavorites = v, c.addAttachement = w, c.downloadAttachement = x, c.getAttachements = y;
    }(b.Chat || (b.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d, e, f) {
        void 0 === f && (f = {});var g = {},
            h = d ? "trashList" : "list",
            i = {};d || (i.no_comment_count = !!e), c && (g.dir_id = c), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.ENTRY, action: h, project: f.project || a.Global.project().project_id, objects: g, data: i }, f));
      }function e(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.TRASH, action: "list", project: d.project || a.Global.project().project_id, data: c }, d));
      }function f(c, d, e) {
        void 0 === e && (e = {});var f = {};d ? f.file_master_id = c : f.file_id = c, b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "pathInfo", project: a.Global.project().project_id, objects: f }, e));
      }function g(c, d, e, f) {
        void 0 === d && (d = !1), void 0 === e && (e = !1), void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: d ? "lock" : "unlock", project: a.Global.project().project_id, objects: { file_id: c }, data: { force: e } }, f));
      }function h(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "editDescription", project: a.Global.project().project_id, objects: { file_id: c }, data: { description: d } }, e));
      }function i(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "activateSharing", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function j(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "deactivateSharing", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function k(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "getVersions", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function l(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "unversion", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function m(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "getComments", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function n(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "addComment", project: a.Global.project().project_id, objects: { file_id: c }, data: { comment: d } }, e));
      }function o(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "editComment", project: a.Global.project().project_id, objects: { file_id: c, comment_id: d }, data: { comment: e } }, f));
      }function p(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "deleteComment", project: a.Global.project().project_id, objects: { file_id: c, comment_id: d } }, e));
      }function q(c, d, e, f) {
        void 0 === f && (f = {});var g = {};e && (g.operation = e), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "move", project: a.Global.project().project_id, objects: { file_id_list: c, dir_id: d }, data: g }, f));
      }function r(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "download", project: d || a.Global.project().project_id, objects: { file_id: c }, webdav: !0, download: !0 }, e));
      }function s(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "download", project: d || a.Global.project().project_id, objects: { file_master_id: c }, webdav: !0, download: !0 }, e));
      }function t(c, d, e) {
        void 0 === e && (e = {});var f = {};d && (f.dir_id = d), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "checkConflict", project: a.Global.project().project_id, objects: f, data: { name: c } }, e));
      }function u(c, d, e, f, g) {
        void 0 === g && (g = {});var h = {};d && (h.dir_id = d), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "upload", project: a.Global.project().project_id, file: c, webdav: !0, objects: h, data: { replace_master: e, notify: f } }, g));
      }function v(c, d, e, f) {
        void 0 === f && (f = {});var g = { file_id: c };e && (g.dir_id = e), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "upload", project: a.Global.project().project_id, file: d, webdav: !0, objects: g }, f));
      }function w(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "editName", project: a.Global.project().project_id, objects: { file_id: c }, data: { name: d } }, e));
      }function x(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "moveToTrash", project: a.Global.project().project_id, objects: { file_id_list: c } }, d));
      }function y(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "moveToGarbageCollector", project: a.Global.project().project_id, objects: { file_id_list: c } }, d));
      }function z(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.TRASH, action: "restoreFile", project: a.Global.project().project_id, objects: { file_id_list: c } }, d));
      }function A(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "requestPreview", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function B(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "getEvents", project: a.Global.project().project_id, objects: { file_id: c } }, d));
      }function C(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "addTag", project: a.Global.project().project_id, objects: { file_master_id: c, label: d } }, e));
      }function D(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.FILE, action: "removeTagByLabel", project: a.Global.project().project_id, objects: { file_master_id: c, label: d } }, e));
      }function E(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "listRequests" }, c));
      }function F(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "listRequestsAsRequester" }, c));
      }function G(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "listRequestsAsValidator" }, c));
      }function H(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "createRequest", project: a.Global.project().project_id, objects: { file_master_id: c } }, d));
      }function I(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "removeRequest", project: a.Global.project().project_id, objects: { file_master_id: d, request_id: c } }, e));
      }function J(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "addValidatorsToRequest", project: a.Global.project().project_id, objects: { file_master_id: e, request_id: d, user_id_list: c } }, f));
      }function K(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "removeValidatorsFromRequest", project: a.Global.project().project_id, objects: { file_master_id: e, request_id: d, response_id_list: c } }, f));
      }function L(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "resetResponseStatus", project: a.Global.project().project_id, objects: { file_master_id: e, request_id: d, response_id: c } }, f));
      }function M(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "remindValidator", project: a.Global.project().project_id, objects: { file_master_id: e, request_id: d, response_id: c } }, f));
      }function N(c, d, e, f, g, h) {
        void 0 === h && (h = {});var i = { status: f };g && (i.comment = g), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "updateResponseStatus", project: a.Global.project().project_id, objects: { file_master_id: e, request_id: d, response_id: c }, data: i }, h));
      }function O(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "updateRequestExpiryDate", project: a.Global.project().project_id, objects: { file_master_id: d, request_id: c }, data: { expiry_date: e } }, f));
      }function P(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.VALIDATION, action: "updateRequestStatus", project: a.Global.project().project_id, objects: { file_master_id: d, request_id: c }, data: { status: e } }, f));
      }function Q(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "create", project: a.Global.project().project_id, objects: { dir_id: d }, data: { name: c } }, e));
      }function R(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "pathInfo", project: a.Global.project().project_id, objects: { dir_id: c } }, d));
      }function S(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "getComments", project: a.Global.project().project_id, objects: { dir_id: c } }, d));
      }function T(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "addComment", project: a.Global.project().project_id, objects: { dir_id: c }, data: { comment: d } }, e));
      }function U(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "editComment", project: a.Global.project().project_id, objects: { dir_id: c, comment_id: d }, data: { comment: e } }, f));
      }function V(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "deleteComment", project: a.Global.project().project_id, objects: { dir_id: c, comment_id: d } }, e));
      }function W(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "editName", project: a.Global.project().project_id, objects: { dir_id: c }, data: { name: d } }, e));
      }function X(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: "activate", project: a.Global.project().project_id, objects: { dir_id: c } }, d));
      }function Y(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: "deactivate", project: a.Global.project().project_id, objects: { dir_id: c } }, d));
      }function Z(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: "setPassword", project: a.Global.project().project_id, objects: { sharing_code: c }, data: { sharing_pwd: d } }, e));
      }function _(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: "removePassword", project: a.Global.project().project_id, objects: { sharing_code: c } }, d));
      }function aa(c, d, e) {
        void 0 === e && (e = {});var f = d ? "allowUpload" : "disallowUpload";b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: f, project: a.Global.project().project_id, objects: { sharing_code: c } }, e));
      }function ba(c, d, e) {
        void 0 === e && (e = {});var f = d ? "allowInvisibleSub" : "disallowInvisibleSub";b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SHARING, action: f, project: a.Global.project().project_id, objects: { sharing_code: c } }, e));
      }function ca(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "move", project: a.Global.project().project_id, objects: { dir_id_list: c, dir_id: d }, data: { conflict_rename: e } }, f));
      }function da(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "moveToTrash", project: a.Global.project().project_id, objects: { dir_id_list: c } }, d));
      }function ea(c, d, e) {
        void 0 === c && (c = []), void 0 === d && (d = []), void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.ENTRY, action: "download", project: a.Global.project().project_id, objects: { dir_id_list: c, file_id_list: d }, data: { recursive: !0 }, zipper: !0 }, e));
      }function fa(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "moveToGarbageCollector", project: a.Global.project().project_id, objects: { dir_id_list: c } }, d));
      }function ga(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "deniedList", project: a.Global.project().project_id, objects: { target_user_id: c } }, d));
      }function ha(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "editUsersAccessToDirectories", project: a.Global.project().project_id, objects: { user_id_list: c }, data: { dir_access_array: d } }, e));
      }function ia(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "getUsersAccess", project: a.Global.project().project_id, objects: { dir_id: c } }, d));
      }function ja(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "editUsersAccess", project: a.Global.project().project_id, objects: { dir_id: c }, data: { user_access_list: d } }, e));
      }function ka(c, d, e, f, g) {
        void 0 === g && (g = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "setPropertyValue", project: a.Global.project().project_id, objects: { dir_id: c, property_label: d }, data: { value: e, subdirs: f } }, g));
      }function la(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.DIRECTORY, action: "restore", project: a.Global.project().project_id, objects: { dir_id_list: c } }, d));
      }function ma(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.TRASH, action: "emptyTrash", project: a.Global.project().project_id }, c));
      }function na(c, d, e) {
        void 0 === e && (e = {});var f = { service: c };d && (f.folder_ref = d), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SERVICE, action: "getEntries", data: f }, e));
      }function oa(c, d, e, f) {
        void 0 === f && (f = {});var g = { service: c, files: d };e && (g.dir_id = e), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SERVICE, action: "importEntries", data: g, project: a.Global.project().project_id, webdav: !0 }, f));
      }function pa(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SERVICE, action: "edit", project: a.Global.project().project_id, objects: { file_id: c }, data: { service: a.Global.ServicesEnum.GOOGLE }, webdav: !0 }, d));
      }function qa(c, d, e, f) {
        void 0 === f && (f = {});var g = { file_id: c };d && (g.dir_id = d);var h = { service: a.Global.ServicesEnum.GOOGLE };e && (h.format = e), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SERVICE, action: "bringBack", project: a.Global.project().project_id, objects: g, data: h, webdav: !0 }, f));
      }function ra(c, d, e) {
        void 0 === e && (e = {});var f = { file_id: c },
            g = { service: a.Global.ServicesEnum.GOOGLE };d && (g.format = d), b.request($.extend({ module: a.Global.MODULES.DOCUMENTS, entity: a.Global.ENTITIES.SERVICE, action: "download", project: a.Global.project().project_id, objects: f, data: g, webdav: !0 }, e));
      }c.ConflictOperationEnum = { CONFLICT_NOOP: "noop", CONFLICT_RENAME: "rename", CONFLICT_ADD_VERSION: "add_version" }, c.getEntries = d, c.getTrashEntries = e, c.getFilePathInfo = f, c.lockFile = g, c.editFileDescription = h, c.activateFileSharing = i, c.deactivateFileSharing = j, c.getFileVersions = k, c.unversionFile = l, c.getFileComments = m, c.fileAddComment = n, c.fileEditComment = o, c.fileDeleteComment = p, c.moveFiles = q, c.downloadFile = r, c.downloadFileMaster = s, c.checkFileConflict = t, c.addFile = u, c.addFileVersion = v, c.fileRename = w, c.moveFileListToTrash = x, c.deleteFileList = y, c.restoreFiles = z, c.previewFile = A, c.getFileHistory = B, c.addFileTag = C, c.removeFileTagByLabel = D, c.getValidationRequestList = E, c.getValidationRequestListAsRequester = F, c.getValidationRequestListAsValidator = G, c.createValidationRequest = H, c.removeValidationRequest = I, c.addValidators = J, c.removeValidators = K, c.resetResponseStatus = L, c.remindValidators = M, c.updateResponseStatus = N, c.updateRequestExpiryDate = O, c.updateRequestStatus = P, c.createDirectory = Q, c.getDirectoryPathInfo = R, c.getDirectoryComments = S, c.directoryAddComment = T, c.directoryEditComment = U, c.directoryDeleteComment = V, c.renameDirectory = W, c.activateDirectorySharing = X, c.deactivateDirectorySharing = Y, c.setDirectorySharingPassword = Z, c.removeDirectorySharingPassword = _, c.setDirectorySharingAllowUpload = aa, c.setDirectorySharingInvisibleSubs = ba, c.moveDirectories = ca, c.moveDirectoryListToTrash = da, c.downloadEntries = ea, c.deleteDirectoryList = fa, c.getDirectoryDeniedListForUser = ga, c.editUsersAccessToDirectories = ha, c.getDirectoryAccessList = ia, c.editDirectoryAccess = ja, c.setDirectoryProperty = ka, c.restoreDirectories = la, c.emptyTrash = ma, c.getServiceEntires = na, c.importServiceEntries = oa, c.editFileViaGoogle = pa, c.retrieveFileFromGoogle = qa, c.downloadFileFromGoogle = ra;
    }(b.Document || (b.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.SESSION, action: "load", data: { all_account_projects: !0, projects_users: !0, users_trashed: !0, users_deleted: !0, projects_stats: !1, projects_tasks_stats: !0, tags: !0 } }, c));
      }function e(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.SESSION, action: "closePopup", data: { popup_id: c }, objects: { target_user_id: d } }, e));
      }function f(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.SESSION, action: "sendMessage", data: { message: c, blocking: d }, objects: { user_id_list: e } }, f));
      }function g(c, d, e) {
        void 0 === d && (d = 300), void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "createLimitedToken", data: { access: c, ttl: d }, objects: {} }, e));
      }function h(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.SEARCH, action: "search", project: a.Global.project() ? a.Global.project().project_id : null, data: { query: c, tag_label_list: d, module: e } }, f));
      }function i(c, d, e, f, g) {
        void 0 === d && (d = !1), void 0 === e && (e = !1), void 0 === f && (f = !1), void 0 === g && (g = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getProject", project: c, data: { project_auth: d, project_stats: e, project_users: f } }, g));
      }function j(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "create", data: c }, d));
      }function k(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "getUsersList", project: c }, d));
      }function l(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "getUsersAuth", project: c }, d));
      }function m(c, d, e) {
        void 0 === e && (e = {});var f = d.image;delete d.image, b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "update", project: c, data: d, file: f }, e));
      }function n(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "removeUsers", objects: { target_project_id: d, user_id_list: c } }, e));
      }function o(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "archive", project: c }, d));
      }function p(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "restore", project: c }, d));
      }function q(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "delete", project: c }, d));
      }function r(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "activateModules", project: c, data: { modules: d } }, e));
      }function s(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "deactivateModules", project: c, data: { modules: d } }, e));
      }function t(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "addTag", project: c, objects: { label: d } }, e));
      }function u(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.PROJECT, action: "removeTagByLabel", project: c, objects: { label: d } }, e));
      }function v(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "getProjectTemplates" }, c));
      }function w(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.ACCOUNT, action: "editCategory", objects: { category_id: c }, data: { category_name: d } }, e));
      }function x(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "setStatus", data: { status: c } }, d));
      }function y(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "setUserLanguage", data: { locale: c } }, d));
      }function z(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.AUTH, entity: a.Global.ENTITIES.USER, action: "multiLogin", auth: { login: c, password: d }, no_auth: !0 }, e));
      }function A(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "getUserServicesInfo" }, c));
      }function B(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "revokeService", data: { service: c } }, d));
      }function C(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "getNotificationSettings" }, c));
      }function D(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.USER, action: "setNotificationSettings", data: c }, d));
      }function E(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "create", data: { label: c } }, d));
      }function F(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "importFromCSV", webdav: !0, file: c }, d));
      }function G(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "rename", objects: { tag_id: c }, data: { label: d } }, e));
      }function H(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "getAll" }, c));
      }function I(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "GetStats" }, c));
      }function J(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "batchMergeTags", objects: { tag_id_list_to_merge: c, tag_id_to_keep: d } }, e));
      }function K(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "remove", objects: { tag_id: c } }, d));
      }function L(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MAIN, entity: a.Global.ENTITIES.TAG, action: "batchRemove", objects: { tag_id_list: c } }, d));
      }c.load = d, c.closePopup = e, c.sendMessage = f, c.createLimitedToken = g, c.search = h, c.getProject = i, c.createProject = j, c.getProjectUsers = k, c.getProjectUsersAuth = l, c.updateProject = m, c.removeUsersFromProject = n, c.archiveProject = o, c.restoreProject = p, c.deleteProject = q, c.activateModules = r, c.deactivateModules = s, c.addProjectTag = t, c.removeProjectTagByLabel = u, c.getProjectTemplates = v, c.editCategory = w, c.setUserStatus = x, c.setUserLanguage = y, c.multiLogin = z, c.getUserServicesInfo = A, c.revokeUserService = B, c.getNotificationSettings = C, c.setNotificationSettings = D, c.createTag = E, c.importTagsFromCSV = F, c.renameTag = G, c.getTags = H, c.getTagsStats = I, c.mergeTagList = J, c.deleteTag = K, c.deleteTagList = L;
    }(b.Main || (b.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "getList", project: a.Global.project().project_id }, c));
      }function e(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "add", project: a.Global.project().project_id, data: c }, d));
      }function f(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "edit", project: a.Global.project().project_id, data: d, objects: { meeting_id: c } }, e));
      }function g(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "addDates", project: a.Global.project().project_id, data: { dates: d }, objects: { meeting_id: c } }, e));
      }function h(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "addInternalParticipants", project: a.Global.project().project_id, data: { user_id_list: d }, objects: { meeting_id: c } }, e));
      }function i(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "addExternalParticipants", project: a.Global.project().project_id, data: { ext_user_list: d }, objects: { meeting_id: c } }, e));
      }function j(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "removeParticipants", project: a.Global.project().project_id, data: { user_id_list: d }, objects: { meeting_id: c } }, e));
      }function k(c, d, e, f) {
        void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "updateStatus", project: a.Global.project().project_id, data: { status: e }, objects: { meeting_id: c, date_id: d } }, f));
      }function l(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "fixDate", project: a.Global.project().project_id, objects: { meeting_id: c, date_id: d } }, e));
      }function m(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "unfixDate", project: a.Global.project().project_id, objects: { meeting_id: c } }, d));
      }function n(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.MEETINGS, entity: a.Global.ENTITIES.MEETING, action: "delete", project: a.Global.project().project_id, objects: { meeting_id: c } }, d));
      }c.getList = d, c.addMeeting = e, c.editMeeting = f, c.addSlots = g, c.addInternalParticipants = h, c.addExternalParticipants = i, c.removeParticipants = j, c.setStatus = k, c.fixDate = l, c.unfixDate = m, c.deleteMeeting = n;
    }(b.Meeting || (b.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c) {
        void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "load", project: c.project || a.Global.project().project_id }, c));
      }function e(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "status", project: d.project || a.Global.project().project_id, data: { tasks_lists: c } }, d));
      }function f(c, d, e, f) {
        void 0 === f && (f = {});var g = { tasks_lists: c, period: d, unit: e };b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "burndown", project: f.project || a.Global.project().project_id, data: g }, f));
      }function g(c, d, e, f) {
        void 0 === f && (f = {});var g = { tasks_lists: c, period: d, unit: e };b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "performance", project: f.project || a.Global.project().project_id, data: g }, f));
      }function h(c, d, e) {
        void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "tags", project: e.project || a.Global.project().project_id, data: { tasks_lists: c, amount: d } }, e));
      }function i(c, d) {
        void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.REPORTING, entity: a.Global.ENTITIES.TASK, action: "workload", project: d.project || a.Global.project().project_id, data: { tasks_lists: c } }, d));
      }c.load = d, c.status = e, c.burndown = f, c.performance = g, c.tags = h, c.workload = i;
    }(b.Reporting || (b.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      function d(c, d, e) {
        void 0 === e && (e = {});var f = {};d && (f.sharing_pwd = d), b.request($.extend({ module: a.Global.MODULES.SHARING, entity: a.Global.ENTITIES.SHARING, action: "load", project: null, objects: { sharing_code: c }, data: f, no_auth: !0 }, e));
      }function e(c, d, e, f) {
        void 0 === f && (f = {});var g = {};e && (g.sharing_pwd = e), b.request($.extend({ module: a.Global.MODULES.SHARING, entity: a.Global.ENTITIES.SHARING, action: "folder", project: null, objects: { sharing_code: d, dir_id: c }, data: g, no_auth: !0 }, f));
      }function f(c, d, e, f) {
        void 0 === f && (f = {});var g = {};e && (g.sharing_pwd = e), b.request($.extend({ module: a.Global.MODULES.SHARING, entity: a.Global.ENTITIES.SHARING, action: "download", project: null, objects: { sharing_code: d, file_id: c }, data: g, no_auth: !0, webdav: !0 }, f));
      }function g(c, d, e) {
        void 0 === e && (e = {});var f = {};d && (f.sharing_pwd = d), f.recursive = !0, b.request($.extend({ module: a.Global.MODULES.SHARING, entity: a.Global.ENTITIES.SHARING, action: "download", project: null, objects: { sharing_code: c }, data: f, no_auth: !0, zipper: !0 }, e));
      }function h(c, d, e, f, g, h) {
        void 0 === h && (h = {});var i = { sharing_code: f };d && (i.dir_id = d);var j = { notify: !0, replace_master: e };g && (j.sharing_pwd = g), b.request($.extend({ module: a.Global.MODULES.SHARING, entity: a.Global.ENTITIES.SHARING, action: "upload", project: null, objects: i, data: j, file: c, no_auth: !0, webdav: !0 }, h));
      }c.load = d, c.getFolder = e, c.download = f, c.downloadSharingFolder = g, c.upload = h;
    }(b.Sharing || (b.Sharing = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (c) {
      !function (c) {
        function d(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "get", project: d.project || a.Global.project().project_id, objects: { task_id: c } }, d));
        }function e(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "getAll", project: d.project || a.Global.project().project_id, objects: { task_list_id: c } }, d));
        }function f(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "create", project: f.project || a.Global.project().project_id, objects: { task_list_id: c }, data: { label: d, owners: e } }, f));
        }function g(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "delete", project: d.project || a.Global.project().project_id, objects: { task_id: c } }, d));
        }function h(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "batchDelete", project: d.project || a.Global.project().project_id, objects: { task_id_list: c } }, d));
        }function i(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "update", project: e.project || a.Global.project().project_id, objects: { task_id: c }, data: d }, e));
        }function j(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "changeStatus", project: e.project || a.Global.project().project_id, objects: { task_id: c }, data: { status: d } }, e));
        }function k(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "history", project: d.project || a.Global.project().project_id, objects: { task_id: c } }, d));
        }function l(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "addComment", project: e.project || a.Global.project().project_id, objects: { task_id: c }, data: { comment: d } }, e));
        }function m(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "editComment", project: f.project || a.Global.project().project_id, objects: { task_id: c, comment_id: d }, data: { comment: e } }, f));
        }function n(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "deleteComment", project: e.project || a.Global.project().project_id, objects: { task_id: c, comment_id: d } }, e));
        }function o(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "move", project: f.project || a.Global.project().project_id, objects: { task_id: c, task_list_id: d }, data: { position: e } }, f));
        }function p(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "moveAfter", project: f.project || a.Global.project().project_id, objects: { task_id: c, task_list_id: d, target_task_id: e } }, f));
        }function q(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "batchMove", project: f.project || a.Global.project().project_id, objects: { task_id_list: c, task_list_id: d }, data: { position: e } }, f));
        }function r(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "batchMoveAfter", project: f.project || a.Global.project().project_id, objects: { task_id_list: c, task_list_id: d, target_task_id: e } }, f));
        }function s(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "relocate", project_id: f.project || a.Global.project().project_id, objects: { target_project_id: c, task_id_list: e, task_list_id: d } }, f));
        }function t(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "addExternalAttachment", project: e.project || a.Global.project().project_id, objects: { task_id: d }, file: c, webdav: !0 }, e));
        }function u(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "downloadAttachment", project: e.project || a.Global.project().project_id, objects: { attachment_id: c, task_id: d }, webdav: !0, download: !0 }, e));
        }function v(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "removeExternalAttachment", project: e.project || a.Global.project().project_id, objects: { task_id: c, attachment_id: d } }, e));
        }function w(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "addWimiAttachment", project: e.project || a.Global.project().project_id, objects: { task_id: c, file_id: d } }, e));
        }function x(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "removeWimiAttachment", project: e.project || a.Global.project().project_id, objects: { task_id: c, attachment_id: d } }, e));
        }function y(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "addTag", project: e.project || a.Global.project().project_id, objects: { task_id: c, label: d } }, e));
        }function z(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.TASK, action: "removeTagByLabel", project: e.project || a.Global.project().project_id, objects: { task_id: c, label: d } }, e));
        }c.getTask = d, c.getAllTasksForListId = e, c.createTask = f, c.deleteTask = g, c.batchDeleteTask = h, c.updateTask = i, c.changeTaskStatus = j, c.getTaskHistory = k, c.addComment = l, c.editComment = m, c.deleteComment = n, c.moveTask = o, c.moveTaskAfter = p, c.batchMoveTask = q, c.batchMoveTaskAfter = r, c.relocateTask = s, c.addExternalAttachment = t, c.downloadExternalAttachment = u, c.removeExternalAttachment = v, c.addWimiAttachment = w, c.removeWimiAttachment = x, c.addTag = y, c.deleteTagByLabel = z;
      }(c.Task || (c.Task = {}));!function (c) {
        function d(c) {
          void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, project: c.project || a.Global.project().project_id, action: "getAll" }, c));
        }function e(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "importFromCSV", project: d.project || a.Global.project().project_id, file: c, webdav: !0, download: !0 }, d));
        }function f(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "importFromXLS", project: d.project || a.Global.project().project_id, file: c, webdav: !0, download: !0 }, d));
        }function g(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "exportAsCSV", project: e.project || a.Global.project().project_id, objects: { task_list_id_list: c }, data: { delimiter: d }, webdav: !0, download: !0 }, e));
        }function h(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "exportAsXLS", project: d.project || a.Global.project().project_id, objects: { task_list_id_list: c }, webdav: !0, download: !0 }, d));
        }function i(c) {
          void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "dashboard", project: c.project || a.Global.project().project_id }, c));
        }function j(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "dashboardGlobal", data: { without_tasks: c } }, d));
        }function k(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "create", project: d.project || a.Global.project().project_id, data: { label: c } }, d));
        }function l(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "update", project: f.project || a.Global.project().project_id, objects: { task_list_id: c }, data: { label: d, color: e } }, f));
        }function m(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "move", project: e.project || a.Global.project().project_id, objects: { task_list_id: c }, data: { position: d } }, e));
        }function n(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.LIST, action: "delete", project: d.project || a.Global.project().project_id, objects: { task_list_id: c } }, d));
        }c.getAllLists = d, c.importListsFromCSV = e, c.importListsFromXLS = f, c.exportListsAsCSV = g, c.exportListsAsXLS = h, c.dashboard = i, c.dashboardGlobal = j, c.createList = k, c.updateList = l, c.moveList = m, c.deleteList = n;
      }(c.List || (c.List = {}));!function (c) {
        function d(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.SUBTASK, action: "create", project: e.project || a.Global.project().project_id, objects: { task_id: c }, data: { label: d } }, e));
        }function e(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.SUBTASK, action: "delete", project: d.project || a.Global.project().project_id, objects: { subtask_id: c } }, d));
        }function f(c, d, e, f) {
          void 0 === f && (f = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.SUBTASK, action: "move", project: f.project || a.Global.project().project_id, objects: { task_id: c, subtask_id: d }, data: { position: e } }, f));
        }function g(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.SUBTASK, action: "changeStatus", project: e.project || a.Global.project().project_id, objects: { subtask_id: c }, data: { status: d } }, e));
        }function h(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.SUBTASK, action: "update", project: e.project || a.Global.project().project_id, objects: { subtask_id: c }, data: { label: d } }, e));
        }c.createSubtask = d, c.deleteSubtask = e, c.moveSubtask = f, c.changeSubtaskStatus = g, c.updateSubtask = h;
      }(c.Subtask || (c.Subtask = {}));!function (c) {
        function d(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.FILTER, action: "apply", objects: { target_project_id: d.project || 0 }, data: c }, d));
        }function e(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.FILTER, action: "add", project: d.project || a.Global.project().project_id, data: c }, d));
        }function f(c) {
          void 0 === c && (c = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.FILTER, action: "list", project: c.project || a.Global.project().project_id }, c));
        }function g(c, d) {
          void 0 === d && (d = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.FILTER, action: "delete", project: d.project || a.Global.project().project_id, objects: { filter_id: c } }, d));
        }function h(c, d, e) {
          void 0 === e && (e = {}), b.request($.extend({ module: a.Global.MODULES.TASKS, entity: a.Global.ENTITIES.FILTER, action: "edit", project: e.project || a.Global.project().project_id, objects: { filter_id: c }, data: d }, e));
        }c.applyFilter = d, c.addFilter = e, c.listFilters = f, c.deleteFilter = g, c.editFilter = h;
      }(c.Filter || (c.Filter = {}));
    }(b.Tasks || (b.Tasks = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ExportAsCSVResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Activity || (a.Activity = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.activity_events && (a.activity_events = a.activity_events.map(function (a) {
              return new Model.ActivityEvent(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Activity || (a.Activity = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetUnreadCountResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Activity || (a.Activity = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), a.account && (a.account = new Model.Account(a.account)), a.projects && (a.projects = a.projects.map(function (a) {
              return new Model.Project(a);
            })), $.extend(this, a);
          }return a;
        }();a.LoginResponse = b;
      }(a.User || (a.User = {}));
    }(a.Auth || (a.Auth = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.LogoutResponse = b;
      }(a.User || (a.User = {}));
    }(a.Auth || (a.Auth = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.MultiLoginResponse = b;
      }(a.User || (a.User = {}));
    }(a.Auth || (a.Auth = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.WimiReminderResponse = b;
      }(a.User || (a.User = {}));
    }(a.Auth || (a.Auth = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.AddCommentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCommentPushTarget = "calendar.event.addcomment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.attachment && (a.attachment = new Model.ExternalAttachment(a.attachment)), $.extend(this, a);
          }return a;
        }();a.AddExternalAttachmentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddExternalAttachmentPushTarget = "calendar.event.addexternalattachment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.attachment && (a.attachment = new Model.DocumentAttachment(a.attachment)), $.extend(this, a);
          }return a;
        }();a.AddWimiAttachmentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddWimiAttachmentPushTarget = "calendar.event.addwimiattachment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.event && (a.event = new Model.CalendarEvent(a.event)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "calendar.event.create";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.DeleteCommentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteCommentPushTarget = "calendar.event.deletecomment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadAttachmentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.EditCommentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditCommentPushTarget = "calendar.event.editcomment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.event && (a.event = new Model.CalendarEvent(a.event)), $.extend(this, a);
          }return a;
        }();a.GetResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.external_attachments && (a.external_attachments = a.external_attachments.map(function (a) {
              return new Model.ExternalAttachment(a);
            })), a.wimi_attachments && (a.wimi_attachments = a.wimi_attachments.map(function (a) {
              return new Model.DocumentAttachment(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAttachmentListResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comments && (a.comments = a.comments.map(function (a) {
              return new Model.Comment(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetCommentsResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.events && (a.events = a.events.map(function (a) {
              return new Model.CalendarEvent(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.events && (a.events = a.events.map(function (a) {
              return new Model.CalendarEvent(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListUnifiedResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetSubscriptionLinkResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetUnifiedSubscriptionLinkResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemovePushTarget = "calendar.event.remove";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveExternalAttachmentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveExternalAttachmentPushTarget = "calendar.event.removeexternalattachment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (b) {
    !function (b) {
      !function (b) {
        var c = function () {
          function b(b) {
            b.recurrence_id && (b.recurrence_id = moment.utc(b.recurrence_id, a.Util.UTCFormat).setUserTimezone()), $.extend(this, b);
          }return b;
        }();b.RemoveRecurrenceOccurrenceResponse = c;
      }(b.Event || (b.Event = {}));
    }(b.Calendar || (b.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveRecurrenceOccurrencePushTarget = "calendar.event.removerecurrenceoccurrence";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveWimiAttachmentResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveWimiAttachmentPushTarget = "calendar.event.removewimiattachment";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.event && (a.event = new Model.CalendarEvent(a.event)), $.extend(this, a);
          }return a;
        }();a.UpdateResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdatePushTarget = "calendar.event.update";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.event && (a.event = new Model.CalendarEvent(a.event)), $.extend(this, a);
          }return a;
        }();a.UpdateProjectResponse = b;
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateProjectPushTarget = "calendar.event.updateproject";
      }(a.Event || (a.Event = {}));
    }(a.Calendar || (a.Calendar = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.message && (a.message = new Model.ChatMessage(a.message)), $.extend(this, a);
          }return a;
        }();a.AddAttachmentResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddAttachmentPushTarget = "chat.chat.addattachment";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.chat_users && (a.chat_users = a.chat_users.map(function (a) {
              return new Model.ChatUser(a);
            })), $.extend(this, a);
          }return a;
        }();a.AddUsersResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddUsersPushTarget = "chat.chat.addusers";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CanceledTypingResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CanceledTypingPushTarget = "chat.chat.canceledtyping";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ClearUnseenResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ClearUnseenPushTarget = "chat.chat.clearunseen";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "chat.chat.create";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CreateChannelResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreateChannelPushTarget = "chat.chat.createchannel";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.message && (a.message = new Model.ChatMessage(a.message)), $.extend(this, a);
          }return a;
        }();a.DeleteMessageResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteMessagePushTarget = "chat.chat.deletemessage";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DisableResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DisablePushTarget = "chat.chat.disable";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadAttachmentResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.message && (a.message = new Model.ChatMessage(a.message)), $.extend(this, a);
          }return a;
        }();a.EditMessageResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditMessagePushTarget = "chat.chat.editmessage";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditNameResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditNamePushTarget = "chat.chat.editname";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.FavoriteMessageResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.FavoriteMessagePushTarget = "chat.chat.favoritemessage";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.attachments && (a.attachments = a.attachments.map(function (a) {
              return new Model.ChatMessage(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAttachmentListResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.chat && (a.chat = new Model.ChatFull(a.chat)), $.extend(this, a);
          }return a;
        }();a.GetChatResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.GetChatPushTarget = "chat.chat.getchat";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.favorites && (a.favorites = a.favorites.map(function (a) {
              return new Model.ChatMessage(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetFavoritesResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.links && (a.links = a.links.map(function (a) {
              return new Model.ChatMessage(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetLinksResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.chats && (a.chats = a.chats.map(function (a) {
              return new Model.Chat(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.messages && (a.messages = a.messages.map(function (a) {
              return new Model.ChatMessage(a);
            })), $.extend(this, a);
          }return a;
        }();a.LoadMessagesResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.message && (a.message = new Model.ChatMessage(a.message)), $.extend(this, a);
          }return a;
        }();a.PostMessageResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.PostMessagePushTarget = "chat.chat.postmessage";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.chat_users && (a.chat_users = a.chat_users.map(function (a) {
              return new Model.ChatUser(a);
            })), $.extend(this, a);
          }return a;
        }();a.RemoveUsersResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveUsersPushTarget = "chat.chat.removeusers";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.results && (a.results = a.results.map(function (a) {
              return a.before && (a.before = a.before.map(function (a) {
                return new Model.ChatMessage(a);
              })), a.after && (a.after = a.after.map(function (a) {
                return new Model.ChatMessage(a);
              })), a.message && (a.message = new Model.ChatMessage(a.message)), a;
            })), $.extend(this, a);
          }return a;
        }();a.SearchResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.StartedTypingResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.StartedTypingPushTarget = "chat.chat.startedtyping";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.UnfavoriteMessageResponse = b;
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UnfavoriteMessagePushTarget = "chat.chat.unfavoritemessage";
      }(a.Chat || (a.Chat = {}));
    }(a.Chat || (a.Chat = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeclineResponse = b;
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeclinePushTarget = "communication.air.decline";
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.InviteResponse = b;
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.InvitePushTarget = "communication.air.invite";
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.JoinResponse = b;
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.JoinPushTarget = "communication.air.join";
      }(a.Air || (a.Air = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.OpenFileResponse = b;
      }(a.Mobile || (a.Mobile = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.OpenFilePushTarget = "communication.mobile.openfile";
      }(a.Mobile || (a.Mobile = {}));
    }(a.Communication || (a.Communication = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.AddCommentResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCommentPushTarget = "document.directory.addcomment";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CopyResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CopyPushTarget = "document.directory.copy";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.directory && (a.directory = new Model.Directory(a.directory)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "document.directory.create";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.DeleteCommentResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteCommentPushTarget = "document.directory.deletecomment";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeniedListResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.EditCommentResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditCommentPushTarget = "document.directory.editcomment";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditNameResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditNamePushTarget = "document.directory.editname";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditUsersAccessResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditUsersAccessPushTarget = "document.directory.editusersaccess";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditUsersAccessToDirectoriesResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comments && (a.comments = a.comments.map(function (a) {
              return new Model.Comment(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetCommentsResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetDirectoryUsersResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetEventsResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetUsersAccessResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a.dir && (a.dir = new Model.Directory(a.dir)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MovePushTarget = "document.directory.move";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveToGarbageCollectorResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MoveToGarbageCollectorPushTarget = "document.directory.movetogarbagecollector";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveToTrashResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MoveToTrashPushTarget = "document.directory.movetotrash";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.PathInfoResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.property && (a.property = new Model.Property(a.property)), $.extend(this, a);
          }return a;
        }();a.RemovePropertyResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemovePropertyPushTarget = "document.directory.removeproperty";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return a.dir && (a.dir = new Model.Directory(a.dir)), a;
            })), $.extend(this, a);
          }return a;
        }();a.RestoreResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RestorePushTarget = "document.directory.restore";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.property && (a.property = new Model.Property(a.property)), $.extend(this, a);
          }return a;
        }();a.SetPropertyValueResponse = b;
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetPropertyValuePushTarget = "document.directory.setpropertyvalue";
      }(a.Directory || (a.Directory = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetSharingZipperFileListResponse = b;
      }(a.Entry || (a.Entry = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetZipperFileListResponse = b;
      }(a.Entry || (a.Entry = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return new Model.Directory(a);
            })), a.files && (a.files = a.files.map(function (a) {
              return new Model.File(a);
            })), a.folder && (a.folder = new Model.Directory(a.folder)), $.extend(this, a);
          }return a;
        }();a.ListResponse = b;
      }(a.Entry || (a.Entry = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.dirs && (a.dirs = a.dirs.map(function (a) {
              return new Model.Directory(a);
            })), a.files && (a.files = a.files.map(function (a) {
              return new Model.File(a);
            })), a.folder && (a.folder = new Model.Directory(a.folder)), $.extend(this, a);
          }return a;
        }();a.TrashListResponse = b;
      }(a.Entry || (a.Entry = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.ActivateSharingResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ActivateSharingPushTarget = "document.file.activatesharing";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.AddCommentResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCommentPushTarget = "document.file.addcomment";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.AddTagResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddTagPushTarget = "document.file.addtag";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CheckConflictResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CheckConflictsResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.CopyResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CopyPushTarget = "document.file.copy";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeactivateSharingResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeactivateSharingPushTarget = "document.file.deactivatesharing";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.DeleteCommentResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteCommentPushTarget = "document.file.deletecomment";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.EditCommentResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditCommentPushTarget = "document.file.editcomment";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditDescriptionResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditDescriptionPushTarget = "document.file.editdescription";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EditNameResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditNamePushTarget = "document.file.editname";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.comments && (a.comments = a.comments.map(function (a) {
              return new Model.Comment(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetCommentsResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetDownloadTokenResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.events && (a.events = a.events.map(function (a) {
              return new Model.FileEvent(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetEventsResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.GetFromPathResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file_list && (a.file_list = a.file_list.map(function (a) {
              return new Model.File(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetPropertiesResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.versions && (a.versions = a.versions.map(function (a) {
              return new Model.File(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetVersionsResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.GuestLinkResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.IsVersionOfResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.LockResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.LockPushTarget = "document.file.lock";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a.file && (a.file = new Model.File(a.file)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MovePushTarget = "document.file.move";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveToGarbageCollectorResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MoveToGarbageCollectorPushTarget = "document.file.movetogarbagecollector";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return a.error && (a.error = new Model.Error(a.error)), a;
            })), $.extend(this, a);
          }return a;
        }();a.MoveToTrashResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MoveToTrashPushTarget = "document.file.movetotrash";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.NotifyOpenResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.NotifyOpenPushTarget = "document.file.notifyopen";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.PathInfoResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.property && (a.property = new Model.Property(a.property)), $.extend(this, a);
          }return a;
        }();a.RemovePropertyResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemovePropertyPushTarget = "document.file.removeproperty";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagPushTarget = "document.file.removetag";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagByLabelResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagByLabelPushTarget = "document.file.removetagbylabel";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RequestPreviewResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return a.file && (a.file = new Model.File(a.file)), a;
            })), $.extend(this, a);
          }return a;
        }();a.RestoreResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RestorePushTarget = "document.file.restore";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.property && (a.property = new Model.Property(a.property)), $.extend(this, a);
          }return a;
        }();a.SetPropertyValueResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetPropertyValuePushTarget = "document.file.setpropertyvalue";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.UnlockResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UnlockPushTarget = "document.file.unlock";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.UnversionResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UnversionPushTarget = "document.file.unversion";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.UploadResponse = b;
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UploadPushTarget = "document.file.upload";
      }(a.File || (a.File = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetDownloadTokenResponse = b;
      }(a.General_file || (a.General_file = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.BringBackResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BringBackPushTarget = "document.service.bringback";
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CheckTokenResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.EditResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditPushTarget = "document.service.edit";
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetEntriesResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return new Model.File(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportEntriesResponse = b;
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportEntriesPushTarget = "document.service.importentries";
      }(a.Service || (a.Service = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ActivateResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ActivatePushTarget = "document.sharing.activate";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.AllowInvisibleSubResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AllowInvisibleSubPushTarget = "document.sharing.allowinvisiblesub";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.AllowUploadResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AllowUploadPushTarget = "document.sharing.allowupload";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeactivateResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeactivatePushTarget = "document.sharing.deactivate";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DisallowInvisibleSubResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DisallowInvisibleSubPushTarget = "document.sharing.disallowinvisiblesub";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DisallowUploadResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DisallowUploadPushTarget = "document.sharing.disallowupload";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemovePasswordResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemovePasswordPushTarget = "document.sharing.removepassword";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SetPasswordResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetPasswordPushTarget = "document.sharing.setpassword";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.EmptyTrashResponse = b;
      }(a.Trash || (a.Trash = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EmptyTrashPushTarget = "document.trash.emptytrash";
      }(a.Trash || (a.Trash = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.files && (a.files = a.files.map(function (a) {
              return new Model.File(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListResponse = b;
      }(a.Trash || (a.Trash = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RestoreFileResponse = b;
      }(a.Trash || (a.Trash = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RestoreFilePushTarget = "document.trash.restorefile";
      }(a.Trash || (a.Trash = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.AddValidatorsToRequestResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddValidatorsToRequestPushTarget = "document.validation.addvalidatorstorequest";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.CreateRequestResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreateRequestPushTarget = "document.validation.createrequest";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_requests_as_validator && (a.doc_validation_requests_as_validator = a.doc_validation_requests_as_validator.map(function (a) {
              return new Model.DocValidationRequest(a);
            })), a.doc_validation_requests_as_requester && (a.doc_validation_requests_as_requester = a.doc_validation_requests_as_requester.map(function (a) {
              return new Model.DocValidationRequest(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListRequestsResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_requests && (a.doc_validation_requests = a.doc_validation_requests.map(function (a) {
              return new Model.DocValidationRequest(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListRequestsAsRequesterResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_requests && (a.doc_validation_requests = a.doc_validation_requests.map(function (a) {
              return new Model.DocValidationRequest(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListRequestsAsValidatorResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_responses && (a.doc_validation_responses = a.doc_validation_responses.map(function (a) {
              return new Model.DocValidationResponse(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListResponsesResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemindValidatorResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.RemoveRequestResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveRequestPushTarget = "document.validation.removerequest";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.RemoveValidatorsFromRequestResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveValidatorsFromRequestPushTarget = "document.validation.removevalidatorsfromrequest";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.ResetResponseStatusResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ResetResponseStatusPushTarget = "document.validation.resetresponsestatus";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.UpdateRequestExpiryDateResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateRequestExpiryDatePushTarget = "document.validation.updaterequestexpirydate";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.UpdateRequestStatusResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateRequestStatusPushTarget = "document.validation.updaterequeststatus";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.doc_validation_request && (a.doc_validation_request = new Model.DocValidationRequest(a.doc_validation_request)), $.extend(this, a);
          }return a;
        }();a.UpdateResponseStatusResponse = b;
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateResponseStatusPushTarget = "document.validation.updateresponsestatus";
      }(a.Validation || (a.Validation = {}));
    }(a.Document || (a.Document = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ActivateUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ActivateUsersPushTarget = "main.account.activateusers";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.credit_card && (a.credit_card = new Model.CreditCard(a.credit_card)), $.extend(this, a);
          }return a;
        }();a.AddCreditCardResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCreditCardPushTarget = "main.account.addcreditcard";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.AddCreditsResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCreditsPushTarget = "main.account.addcredits";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), a.projects_auth && (a.projects_auth = a.projects_auth.map(function (a) {
              return new Model.ProjectAuth(a);
            })), $.extend(this, a);
          }return a;
        }();a.AddUserResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddUserPushTarget = "main.account.adduser";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CheckBillingInfoResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeactivateUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeactivateUsersPushTarget = "main.account.deactivateusers";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeleteUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteUsersPushTarget = "main.account.deleteusers";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.category && (a.category = new Model.Category(a.category)), $.extend(this, a);
          }return a;
        }();a.EditCategoryResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditCategoryPushTarget = "main.account.editcategory";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), $.extend(this, a);
          }return a;
        }();a.EditUserResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditUserPushTarget = "main.account.edituser";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), a.project && (a.project = new Model.Project(a.project)), a.project_auth && (a.project_auth = new Model.ProjectAuth(a.project_auth)), $.extend(this, a);
          }return a;
        }();a.EditUserProjectAuthResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditUserProjectAuthPushTarget = "main.account.edituserprojectauth";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ExportUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ExportUsersRightsResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAllAvailableUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.billing_info && (a.billing_info = new Model.BillingInfo(a.billing_info)), a.offers && (a.offers = a.offers.map(function (a) {
              return new Model.Offer(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetBillingInfoResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetCalendarsResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.categories && (a.categories = a.categories.map(function (a) {
              return new Model.Category(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetCategoriesResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.UserService(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetGAppsUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.invoices && (a.invoices = a.invoices.map(function (a) {
              return new Model.Invoice(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetInvoicesResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListOfUsersSharingSameProjectsResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.GetProjectResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.templates && (a.templates = a.templates.map(function (a) {
              return new Model.ProjectTemplate(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetProjectTemplatesResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.projects && (a.projects = a.projects.map(function (a) {
              return new Model.Project(a);
            })), a.categories && (a.categories = a.categories.map(function (a) {
              return new Model.Category(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetProjectsResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.UserService(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetServiceUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), $.extend(this, a);
          }return a;
        }();a.GetUserResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.projects_auth && (a.projects_auth = a.projects_auth.map(function (a) {
              return new Model.ProjectAuth(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetUserProjectsAuthResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetUsersResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportGAppsUserResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportGAppsUserPushTarget = "main.account.importgappsuser";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportUsersFromCSVResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportUsersFromCSVPushTarget = "main.account.importusersfromcsv";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RegenerateGeneralPasswordResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RegisterResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveCreditCardResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveCreditCardPushTarget = "main.account.removecreditcard";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SendInvitationResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.billing_info && (a.billing_info = new Model.BillingInfo(a.billing_info)), $.extend(this, a);
          }return a;
        }();a.SetBillingInfoResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetBillingInfoPushTarget = "main.account.setbillinginfo";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ShouldPerformPaymentResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ToggleThirdPartyServiceResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ToggleThirdPartyServicePushTarget = "main.account.togglethirdpartyservice";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.UpdateLdapResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.billing_info && (a.billing_info = new Model.BillingInfo(a.billing_info)), $.extend(this, a);
          }return a;
        }();a.UpdateOfferResponse = b;
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateOfferPushTarget = "main.account.updateoffer";
      }(a.Account || (a.Account = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.LogEventResponse = b;
      }(a.Appli || (a.Appli = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RegisterInstanceResponse = b;
      }(a.Appli || (a.Appli = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.ActivateModulesResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ActivateModulesPushTarget = "main.project.activatemodules";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.AddTagResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddTagPushTarget = "main.project.addtag";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.ArchiveResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ArchivePushTarget = "main.project.archive";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "main.project.create";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.DeactivateModulesResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeactivateModulesPushTarget = "main.project.deactivatemodules";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeletePushTarget = "main.project.delete";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.DisableSyncWithWDResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DisableSyncWithWDPushTarget = "main.project.disablesyncwithwd";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.EnableSyncWithWDResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EnableSyncWithWDPushTarget = "main.project.enablesyncwithwd";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.auth_list && (a.auth_list = a.auth_list.map(function (a) {
              return new Model.UserAuth(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetUsersAuthResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetUsersListResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagPushTarget = "main.project.removetag";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagByLabelResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagByLabelPushTarget = "main.project.removetagbylabel";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveUsersResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveUsersPushTarget = "main.project.removeusers";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.RestoreResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RestorePushTarget = "main.project.restore";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.project && (a.project = new Model.Project(a.project)), $.extend(this, a);
          }return a;
        }();a.UpdateResponse = b;
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdatePushTarget = "main.project.update";
      }(a.Project || (a.Project = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.results && (a.results = new Model.SearchResult(a.results)), $.extend(this, a);
          }return a;
        }();a.SearchResponse = b;
      }(a.Search || (a.Search = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ClosePopupResponse = b;
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ClosePopupPushTarget = "main.session.closepopup";
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GenerateAutologinTokenResponse = b;
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), a.account && (a.account = new Model.Account(a.account)), a.projects && (a.projects = a.projects.map(function (a) {
              return new Model.Project(a);
            })), a.categories && (a.categories = a.categories.map(function (a) {
              return new Model.Category(a);
            })), a.accounts && (a.accounts = a.accounts.map(function (a) {
              return new Model.AccountOther(a);
            })), a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), $.extend(this, a);
          }return a;
        }();a.LoadResponse = b;
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SendMessageResponse = b;
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SendMessagePushTarget = "main.session.sendmessage";
      }(a.Session || (a.Session = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), a.merged_tags && (a.merged_tags = a.merged_tags.map(function (a) {
              return new Model.Tag(a);
            })), $.extend(this, a);
          }return a;
        }();a.BatchMergeTagsResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BatchMergeTagsPushTarget = "main.tag.batchmergetags";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), $.extend(this, a);
          }return a;
        }();a.BatchRemoveResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BatchRemovePushTarget = "main.tag.batchremove";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "main.tag.create";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAllResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tags_stats && (a.tags_stats = a.tags_stats.map(function (a) {
              return new Model.TagStats(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetStatsResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportFromCSVResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportFromCSVPushTarget = "main.tag.importfromcsv";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), a.merged_tag && (a.merged_tag = new Model.Tag(a.merged_tag)), $.extend(this, a);
          }return a;
        }();a.MergeTagsResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MergeTagsPushTarget = "main.tag.mergetags";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemovePushTarget = "main.tag.remove";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RenameResponse = b;
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RenamePushTarget = "main.tag.rename";
      }(a.Tag || (a.Tag = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.AddTagResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddTagPushTarget = "main.user.addtag";
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.CreateLimitedTokenResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeleteLimitedTokenResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetGlobalStatusResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetNotificationSettingsResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.google && (a.google = new Model.UserServiceInfo(a.google)), a.box && (a.box = new Model.UserServiceInfo(a.box)), a.dropbox && (a.dropbox = new Model.UserServiceInfo(a.dropbox)), a.skype && (a.skype = new Model.UserServiceInfo(a.skype)), a.onedrive && (a.onedrive = new Model.UserServiceInfo(a.onedrive)), a.onedrivepro && (a.onedrivepro = new Model.UserServiceInfo(a.onedrivepro)), a.zapier && (a.zapier = new Model.UserServiceInfo(a.zapier)), $.extend(this, a);
          }return a;
        }();a.GetUserServicesInfoResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RegisterFirebaseTokenResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagPushTarget = "main.user.removetag";
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagByLabelResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagByLabelPushTarget = "main.user.removetagbylabel";
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RemoveUserSessionResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RevokeServiceResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SetNotificationSettingsResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SetStatusResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetStatusPushTarget = "main.user.status";
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SetUserLanguageResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SetUserSessionResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.SetUserSessionPushTarget = "main.user.status";
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.UnregisterFirebaseTokenResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.UpdateUsersSessionsResponse = b;
      }(a.User || (a.User = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetCountryZoneByIpResponse = b;
      }(a.Util || (a.Util = {}));
    }(a.Main || (a.Main = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.AddResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddPushTarget = "meeting.meeting.add";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.AddDatesResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddDatesPushTarget = "meeting.meeting.adddates";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.AddExternalParticipantsResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddExternalParticipantsPushTarget = "meeting.meeting.addexternalparticipants";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.AddInternalParticipantsResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddInternalParticipantsPushTarget = "meeting.meeting.addinternalparticipants";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeletePushTarget = "meeting.meeting.delete";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.EditResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditPushTarget = "meeting.meeting.edit";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.FixDateResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.FixDatePushTarget = "meeting.meeting.fixdate";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.GetResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meetings && (a.meetings = a.meetings.map(function (a) {
              return new Model.Meeting(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.RemoveParticipantsResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveParticipantsPushTarget = "meeting.meeting.removeparticipants";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.UnfixDateResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UnfixDatePushTarget = "meeting.meeting.unfixdate";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.meeting && (a.meeting = new Model.Meeting(a.meeting)), $.extend(this, a);
          }return a;
        }();a.UpdateStatusResponse = b;
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdateStatusPushTarget = "meeting.meeting.updatestatus";
      }(a.Meeting || (a.Meeting = {}));
    }(a.Meeting || (a.Meeting = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.BurndownResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.workload && (a.workload = new Model.Workload(a.workload)), a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.TagReporting(a);
            })), $.extend(this, a);
          }return a;
        }();a.LoadResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.PerformanceResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.StatusResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.TagReporting(a);
            })), $.extend(this, a);
          }return a;
        }();a.TagsResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.workload && (a.workload = new Model.Workload(a.workload)), $.extend(this, a);
          }return a;
        }();a.WorkloadResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Reporting || (a.Reporting = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Sharing || (a.Sharing = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.folder && (a.folder = new Model.Directory(a.folder)), a.tree && a.tree.files && (a.tree.files = a.tree.files.map(function (a) {
              return new Model.File(a);
            })), a.tree && a.tree.dirs && (a.tree.dirs = a.tree.dirs.map(function (a) {
              return new Model.Directory(a);
            })), $.extend(this, a);
          }return a;
        }();a.FolderResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Sharing || (a.Sharing = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.sharing && (a.sharing = new Model.Sharing(a.sharing)), a.account && (a.account = new Model.AccountBase(a.account)), $.extend(this, a);
          }return a;
        }();a.LoadResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Sharing || (a.Sharing = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.file && (a.file = new Model.File(a.file)), $.extend(this, a);
          }return a;
        }();a.UploadResponse = b;
      }(a.Sharing || (a.Sharing = {}));
    }(a.Sharing || (a.Sharing = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UploadPushTarget = "sharing.sharing.upload";
      }(a.Sharing || (a.Sharing = {}));
    }(a.Sharing || (a.Sharing = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.filter && (a.filter = new Model.Filter(a.filter)), $.extend(this, a);
          }return a;
        }();a.AddResponse = b;
      }(a.Filter || (a.Filter = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks && (a.tasks = a.tasks.map(function (a) {
              return new Model.Task(a);
            })), $.extend(this, a);
          }return a;
        }();a.ApplyResponse = b;
      }(a.Filter || (a.Filter = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Filter || (a.Filter = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.filter && (a.filter = new Model.Filter(a.filter)), $.extend(this, a);
          }return a;
        }();a.EditResponse = b;
      }(a.Filter || (a.Filter = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.filters && (a.filters = a.filters.map(function (a) {
              return new Model.Filter(a);
            })), $.extend(this, a);
          }return a;
        }();a.ListResponse = b;
      }(a.Filter || (a.Filter = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.subtask && (a.subtask = new Model.Subtask(a.subtask)), $.extend(this, a);
          }return a;
        }();a.ChangeStatusResponse = b;
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ChangeStatusPushTarget = "task.subtask.changestatus";
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.subtask && (a.subtask = new Model.Subtask(a.subtask)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "task.subtask.create";
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.subtask && (a.subtask = new Model.Subtask(a.subtask)), $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeletePushTarget = "task.subtask.delete";
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.subtask && (a.subtask = new Model.Subtask(a.subtask)), $.extend(this, a);
          }return a;
        }();a.MoveResponse = b;
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MovePushTarget = "task.subtask.move";
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.subtask && (a.subtask = new Model.Subtask(a.subtask)), $.extend(this, a);
          }return a;
        }();a.UpdateResponse = b;
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdatePushTarget = "task.subtask.update";
      }(a.Subtask || (a.Subtask = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.AddCommentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddCommentPushTarget = "task.task.addcomment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.attachment && (a.attachment = new Model.ExternalAttachment(a.attachment)), a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.AddExternalAttachmentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddExternalAttachmentPushTarget = "task.task.addexternalattachment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.AddTagResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddTagPushTarget = "task.task.addtag";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.attachment && (a.attachment = new Model.DocumentAttachment(a.attachment)), $.extend(this, a);
          }return a;
        }();a.AddWimiAttachmentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.AddWimiAttachmentPushTarget = "task.task.addwimiattachment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.BatchDeleteResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BatchDeletePushTarget = "task.task.batchdelete";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.BatchMoveResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BatchMovePushTarget = "task.task.batchmove";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.BatchMoveAfterResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.BatchMoveAfterPushTarget = "task.task.batchmoveafter";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.ChangeStatusResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ChangeStatusPushTarget = "task.task.changestatus";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "task.task.create";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeletePushTarget = "task.task.delete";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.DeleteCommentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeleteCommentPushTarget = "task.task.deletecomment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.DownloadAttachmentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.comment && (a.comment = new Model.Comment(a.comment)), $.extend(this, a);
          }return a;
        }();a.EditCommentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.EditCommentPushTarget = "task.task.editcomment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && a.task.task && (a.task.task = new Model.Task(a.task.task)), a.task && a.task.subtasks && (a.task.subtasks = a.task.subtasks.map(function (a) {
              return new Model.Subtask(a);
            })), a.task && a.task.docs && (a.task.docs = a.task.docs.map(function (a) {
              return new Model.DocumentAttachment(a);
            })), a.task && a.task.history && (a.task.history = a.task.history.map(function (a) {
              return new Model.TaskHistory(a);
            })), a.task && a.task.comments && (a.task.comments = a.task.comments.map(function (a) {
              return new Model.Comment(a);
            })), a.task && a.task.attachments && (a.task.attachments = a.task.attachments.map(function (a) {
              return new Model.ExternalAttachment(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks && (a.tasks = a.tasks.map(function (a) {
              return new Model.Task(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAllResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetNbNotCompletedForProjectResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.history && (a.history = a.history.map(function (a) {
              return new Model.TaskHistory(a);
            })), $.extend(this, a);
          }return a;
        }();a.HistoryResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.MoveResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MovePushTarget = "task.task.move";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.MoveAfterResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MoveAfterPushTarget = "task.task.moveafter";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.RelocateResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RelocatePushTarget = "task.task.relocate";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.RemoveExternalAttachmentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveExternalAttachmentPushTarget = "task.task.removeexternalattachment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagPushTarget = "task.task.removetag";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.tag && (a.tag = new Model.Tag(a.tag)), $.extend(this, a);
          }return a;
        }();a.RemoveTagByLabelResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveTagByLabelPushTarget = "task.task.removetagbylabel";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.RemoveWimiAttachmentResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.RemoveWimiAttachmentPushTarget = "task.task.removewimiattachment";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), a.changed && (a.changed = new Model.TaskEdition(a.changed)), $.extend(this, a);
          }return a;
        }();a.UpdateResponse = b;
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdatePushTarget = "task.task.update";
      }(a.Task || (a.Task = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.list && (a.list = new Model.TaskList(a.list)), $.extend(this, a);
          }return a;
        }();a.CreateResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.CreatePushTarget = "task.tlist.create";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks_lists && (a.tasks_lists = a.tasks_lists.map(function (a) {
              return new Model.TaskList(a);
            })), a.statuses && (a.statuses = a.statuses.map(function (a) {
              return new Model.TaskStatus(a);
            })), a.weight_units && (a.weight_units = a.weight_units.map(function (a) {
              return new Model.TaskWeightUnit(a);
            })), a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), a.rights && (a.rights = a.rights.map(function (a) {
              return new Model.Right(a);
            })), a.filters && (a.filters = a.filters.map(function (a) {
              return new Model.Filter(a);
            })), $.extend(this, a);
          }return a;
        }();a.DashboardResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks_lists && (a.tasks_lists = a.tasks_lists.map(function (a) {
              return new Model.TaskList(a);
            })), a.statuses && (a.statuses = a.statuses.map(function (a) {
              return new Model.TaskStatus(a);
            })), a.weight_units && (a.weight_units = a.weight_units.map(function (a) {
              return new Model.TaskWeightUnit(a);
            })), a.tags && (a.tags = a.tags.map(function (a) {
              return new Model.Tag(a);
            })), a.rights && (a.rights = a.rights.map(function (a) {
              return new Model.Right(a);
            })), $.extend(this, a);
          }return a;
        }();a.DashboardGlobalResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.list && (a.list = new Model.TaskList(a.list)), $.extend(this, a);
          }return a;
        }();a.DeleteResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.DeletePushTarget = "task.tlist.delete";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ExportAsCSVResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.ExportAsXLSResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.lists && (a.lists = a.lists.map(function (a) {
              return new Model.TaskList(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetAllResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks && (a.tasks = a.tasks.map(function (a) {
              return new Model.Task(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportFromCSVResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportFromCSVPushTarget = "task.tlist.importfromcsv";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.tasks && (a.tasks = a.tasks.map(function (a) {
              return new Model.Task(a);
            })), $.extend(this, a);
          }return a;
        }();a.ImportFromXLSResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.ImportFromXLSPushTarget = "task.tlist.importfromxls";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.list && (a.list = new Model.TaskList(a.list)), $.extend(this, a);
          }return a;
        }();a.MoveResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.MovePushTarget = "task.tlist.move";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.list && (a.list = new Model.TaskList(a.list)), $.extend(this, a);
          }return a;
        }();a.UpdateResponse = b;
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        a.UpdatePushTarget = "task.tlist.update";
      }(a.Tlist || (a.Tlist = {}));
    }(a.Task || (a.Task = {}));
  }(a.Push || (a.Push = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.AuthenticateResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.Task(a.task)), $.extend(this, a);
          }return a;
        }();a.FinishedTaskPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GenerateApiKeyResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.GetChatPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task_lists && (a.task_lists = a.task_lists.map(function (a) {
              return new Model.TaskList(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetListsPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.projects && (a.projects = a.projects.map(function (a) {
              return new Model.Project(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetProjectsPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.users && (a.users = a.users.map(function (a) {
              return new Model.User(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetUsersPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.NewProjectPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.PrettyTask(a.task)), $.extend(this, a);
          }return a;
        }();a.NewTaskPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.user && (a.user = new Model.User(a.user)), $.extend(this, a);
          }return a;
        }();a.NewUserPollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.SubscribeResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.task && (a.task = new Model.PrettyTask(a.task)), $.extend(this, a);
          }return a;
        }();a.TaskStatusChangePollResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            $.extend(this, a);
          }return a;
        }();a.UnsubscribeResponse = b;
      }(a.Zapier || (a.Zapier = {}));
    }(a.Thirdparty || (a.Thirdparty = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));var App;!function (a) {
  !function (a) {
    !function (a) {
      !function (a) {
        var b = function () {
          function a(a) {
            a.events && (a.events = a.events.map(function (a) {
              return new Model.LogEvent(a);
            })), $.extend(this, a);
          }return a;
        }();a.GetEventsResponse = b;
      }(a.Log || (a.Log = {}));
    }(a.V2 || (a.V2 = {}));
  }(a.API || (a.API = {}));
}(App || (App = {}));
//# sourceMappingURL=core-5.30.0.min.js.map